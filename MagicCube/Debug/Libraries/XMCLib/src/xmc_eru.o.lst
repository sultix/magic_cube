   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_eru.c"
  16              	 .text
  17              	.Ltext0:
 232              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
 233              	 .align 2
 238              	 .global XMC_ERU_ETL_Init
 239              	 .code 16
 240              	 .thumb_func
 242              	XMC_ERU_ETL_Init:
 243              	 .stabd 46,0,0
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
 245              	.LM0:
 246              	.LFBB1:
 247 0000 80B5     	 push {r7,lr}
 248 0002 84B0     	 sub sp,sp,#16
 249 0004 00AF     	 add r7,sp,#0
 250 0006 F860     	 str r0,[r7,#12]
 251 0008 7A60     	 str r2,[r7,#4]
 252 000a 0B23     	 mov r3,#11
 253 000c FB18     	 add r3,r7,r3
 254 000e 0A1C     	 add r2,r1,#0
 255 0010 1A70     	 strb r2,[r3]
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 257              	.LM1:
 258 0012 FB68     	 ldr r3,[r7,#12]
 259 0014 181C     	 mov r0,r3
 260 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
 262              	.LM2:
 263 001a FB68     	 ldr r3,[r7,#12]
 264 001c 1B68     	 ldr r3,[r3]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
 266              	.LM3:
 267 001e 0B22     	 mov r2,#11
 268 0020 BA18     	 add r2,r7,r2
 269 0022 1278     	 ldrb r2,[r2]
 270 0024 9200     	 lsl r2,r2,#2
 271 0026 111C     	 mov r1,r2
 272 0028 0F22     	 mov r2,#15
 273 002a 8A40     	 lsl r2,r2,r1
 274 002c D243     	 mvn r2,r2
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
 276              	.LM4:
 277 002e 1A40     	 and r2,r3
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 279              	.LM5:
 280 0030 7B68     	 ldr r3,[r7,#4]
 281 0032 1B68     	 ldr r3,[r3]
 282 0034 0B21     	 mov r1,#11
 283 0036 7918     	 add r1,r7,r1
 284 0038 0978     	 ldrb r1,[r1]
 285 003a 8900     	 lsl r1,r1,#2
 286 003c 8B40     	 lsl r3,r3,r1
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
 288              	.LM6:
 289 003e 1A43     	 orr r2,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
 291              	.LM7:
 292 0040 FB68     	 ldr r3,[r7,#12]
 293 0042 1A60     	 str r2,[r3]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
 295              	.LM8:
 296 0044 0B23     	 mov r3,#11
 297 0046 FB18     	 add r3,r7,r3
 298 0048 1A78     	 ldrb r2,[r3]
 299 004a 7B68     	 ldr r3,[r7,#4]
 300 004c 5968     	 ldr r1,[r3,#4]
 301 004e FB68     	 ldr r3,[r7,#12]
 302 0050 0432     	 add r2,r2,#4
 303 0052 9200     	 lsl r2,r2,#2
 304 0054 D150     	 str r1,[r2,r3]
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
 306              	.LM9:
 307 0056 BD46     	 mov sp,r7
 308 0058 04B0     	 add sp,sp,#16
 309              	 
 310 005a 80BD     	 pop {r7,pc}
 312              	.Lscope1:
 314              	 .stabd 78,0,0
 315              	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
 316              	 .align 2
 321              	 .global XMC_ERU_OGU_Init
 322              	 .code 16
 323              	 .thumb_func
 325              	XMC_ERU_OGU_Init:
 326              	 .stabd 46,0,0
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
 328              	.LM10:
 329              	.LFBB2:
 330 0000 80B5     	 push {r7,lr}
 331 0002 84B0     	 sub sp,sp,#16
 332 0004 00AF     	 add r7,sp,#0
 333 0006 F860     	 str r0,[r7,#12]
 334 0008 7A60     	 str r2,[r7,#4]
 335 000a 0B23     	 mov r3,#11
 336 000c FB18     	 add r3,r7,r3
 337 000e 0A1C     	 add r2,r1,#0
 338 0010 1A70     	 strb r2,[r3]
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 340              	.LM11:
 341 0012 FB68     	 ldr r3,[r7,#12]
 342 0014 181C     	 mov r0,r3
 343 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 345              	.LM12:
 346 001a 0B23     	 mov r3,#11
 347 001c FB18     	 add r3,r7,r3
 348 001e 1A78     	 ldrb r2,[r3]
 349 0020 7B68     	 ldr r3,[r7,#4]
 350 0022 1968     	 ldr r1,[r3]
 351 0024 FB68     	 ldr r3,[r7,#12]
 352 0026 0832     	 add r2,r2,#8
 353 0028 9200     	 lsl r2,r2,#2
 354 002a D150     	 str r1,[r2,r3]
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 356              	.LM13:
 357 002c BD46     	 mov sp,r7
 358 002e 04B0     	 add sp,sp,#16
 359              	 
 360 0030 80BD     	 pop {r7,pc}
 362              	.Lscope2:
 364              	 .stabd 78,0,0
 365 0032 C046     	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 366              	 .align 2
 372              	 .global XMC_ERU_ETL_SetInput
 373              	 .code 16
 374              	 .thumb_func
 376              	XMC_ERU_ETL_SetInput:
 377              	 .stabd 46,0,0
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 379              	.LM14:
 380              	.LFBB3:
 381 0000 90B5     	 push {r4,r7,lr}
 382 0002 83B0     	 sub sp,sp,#12
 383 0004 00AF     	 add r7,sp,#0
 384 0006 7860     	 str r0,[r7,#4]
 385 0008 0C1C     	 mov r4,r1
 386 000a 101C     	 mov r0,r2
 387 000c 191C     	 mov r1,r3
 388 000e FB1C     	 add r3,r7,#3
 389 0010 221C     	 add r2,r4,#0
 390 0012 1A70     	 strb r2,[r3]
 391 0014 BB1C     	 add r3,r7,#2
 392 0016 021C     	 add r2,r0,#0
 393 0018 1A70     	 strb r2,[r3]
 394 001a 7B1C     	 add r3,r7,#1
 395 001c 0A1C     	 add r2,r1,#0
 396 001e 1A70     	 strb r2,[r3]
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 398              	.LM15:
 399 0020 7B68     	 ldr r3,[r7,#4]
 400 0022 1B68     	 ldr r3,[r3]
 401 0024 FA1C     	 add r2,r7,#3
 402 0026 1278     	 ldrb r2,[r2]
 403 0028 9200     	 lsl r2,r2,#2
 404 002a 111C     	 mov r1,r2
 405 002c 0F22     	 mov r2,#15
 406 002e 8A40     	 lsl r2,r2,r1
 407 0030 D243     	 mvn r2,r2
 408 0032 1A40     	 and r2,r3
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 410              	.LM16:
 411 0034 BB1C     	 add r3,r7,#2
 412 0036 1B78     	 ldrb r3,[r3]
 413 0038 791C     	 add r1,r7,#1
 414 003a 0978     	 ldrb r1,[r1]
 415 003c 8900     	 lsl r1,r1,#2
 416 003e 0B43     	 orr r3,r1
 417 0040 F91C     	 add r1,r7,#3
 418 0042 0978     	 ldrb r1,[r1]
 419 0044 8900     	 lsl r1,r1,#2
 420 0046 8B40     	 lsl r3,r3,r1
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 422              	.LM17:
 423 0048 1A43     	 orr r2,r3
 424 004a 7B68     	 ldr r3,[r7,#4]
 425 004c 1A60     	 str r2,[r3]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 427              	.LM18:
 428 004e BD46     	 mov sp,r7
 429 0050 03B0     	 add sp,sp,#12
 430              	 
 431 0052 90BD     	 pop {r4,r7,pc}
 433              	.Lscope3:
 435              	 .stabd 78,0,0
 436              	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 437              	 .align 2
 442              	 .global XMC_ERU_ETL_SetSource
 443              	 .code 16
 444              	 .thumb_func
 446              	XMC_ERU_ETL_SetSource:
 447              	 .stabd 46,0,0
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 449              	.LM19:
 450              	.LFBB4:
 451 0000 90B5     	 push {r4,r7,lr}
 452 0002 83B0     	 sub sp,sp,#12
 453 0004 00AF     	 add r7,sp,#0
 454 0006 7860     	 str r0,[r7,#4]
 455 0008 081C     	 mov r0,r1
 456 000a 111C     	 mov r1,r2
 457 000c FB1C     	 add r3,r7,#3
 458 000e 021C     	 add r2,r0,#0
 459 0010 1A70     	 strb r2,[r3]
 460 0012 BB1C     	 add r3,r7,#2
 461 0014 0A1C     	 add r2,r1,#0
 462 0016 1A70     	 strb r2,[r3]
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 464              	.LM20:
 465 0018 FB1C     	 add r3,r7,#3
 466 001a 1A78     	 ldrb r2,[r3]
 467 001c BB1C     	 add r3,r7,#2
 468 001e 1B78     	 ldrb r3,[r3]
 469 0020 0F21     	 mov r1,#15
 470 0022 0B40     	 and r3,r1
 471 0024 D9B2     	 uxtb r1,r3
 472 0026 7B68     	 ldr r3,[r7,#4]
 473 0028 0432     	 add r2,r2,#4
 474 002a 9200     	 lsl r2,r2,#2
 475 002c 0F20     	 mov r0,#15
 476 002e 0140     	 and r1,r0
 477 0030 0902     	 lsl r1,r1,#8
 478 0032 D058     	 ldr r0,[r2,r3]
 479 0034 034C     	 ldr r4,.L5
 480 0036 2040     	 and r0,r4
 481 0038 0143     	 orr r1,r0
 482 003a D150     	 str r1,[r2,r3]
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 484              	.LM21:
 485 003c BD46     	 mov sp,r7
 486 003e 03B0     	 add sp,sp,#12
 487              	 
 488 0040 90BD     	 pop {r4,r7,pc}
 489              	.L6:
 490 0042 C046     	 .align 2
 491              	.L5:
 492 0044 FFF0FFFF 	 .word -3841
 494              	.Lscope4:
 496              	 .stabd 78,0,0
 497              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 498              	 .align 2
 503              	 .global XMC_ERU_ETL_SetEdgeDetection
 504              	 .code 16
 505              	 .thumb_func
 507              	XMC_ERU_ETL_SetEdgeDetection:
 508              	 .stabd 46,0,0
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 510              	.LM22:
 511              	.LFBB5:
 512 0000 90B5     	 push {r4,r7,lr}
 513 0002 83B0     	 sub sp,sp,#12
 514 0004 00AF     	 add r7,sp,#0
 515 0006 7860     	 str r0,[r7,#4]
 516 0008 081C     	 mov r0,r1
 517 000a 111C     	 mov r1,r2
 518 000c FB1C     	 add r3,r7,#3
 519 000e 021C     	 add r2,r0,#0
 520 0010 1A70     	 strb r2,[r3]
 521 0012 BB1C     	 add r3,r7,#2
 522 0014 0A1C     	 add r2,r1,#0
 523 0016 1A70     	 strb r2,[r3]
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 525              	.LM23:
 526 0018 FB1C     	 add r3,r7,#3
 527 001a 1A78     	 ldrb r2,[r3]
 528 001c BB1C     	 add r3,r7,#2
 529 001e 1B78     	 ldrb r3,[r3]
 530 0020 0321     	 mov r1,#3
 531 0022 0B40     	 and r3,r1
 532 0024 D9B2     	 uxtb r1,r3
 533 0026 7B68     	 ldr r3,[r7,#4]
 534 0028 0432     	 add r2,r2,#4
 535 002a 9200     	 lsl r2,r2,#2
 536 002c 0320     	 mov r0,#3
 537 002e 0140     	 and r1,r0
 538 0030 8900     	 lsl r1,r1,#2
 539 0032 D058     	 ldr r0,[r2,r3]
 540 0034 0C24     	 mov r4,#12
 541 0036 A043     	 bic r0,r4
 542 0038 0143     	 orr r1,r0
 543 003a D150     	 str r1,[r2,r3]
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 545              	.LM24:
 546 003c BD46     	 mov sp,r7
 547 003e 03B0     	 add sp,sp,#12
 548              	 
 549 0040 90BD     	 pop {r4,r7,pc}
 551              	.Lscope5:
 553              	 .stabd 78,0,0
 554 0042 C046     	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 555              	 .align 2
 559              	 .global XMC_ERU_ETL_GetEdgeDetection
 560              	 .code 16
 561              	 .thumb_func
 563              	XMC_ERU_ETL_GetEdgeDetection:
 564              	 .stabd 46,0,0
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 566              	.LM25:
 567              	.LFBB6:
 568 0000 80B5     	 push {r7,lr}
 569 0002 82B0     	 sub sp,sp,#8
 570 0004 00AF     	 add r7,sp,#0
 571 0006 7860     	 str r0,[r7,#4]
 572 0008 0A1C     	 mov r2,r1
 573 000a FB1C     	 add r3,r7,#3
 574 000c 1A70     	 strb r2,[r3]
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 576              	.LM26:
 577 000e FB1C     	 add r3,r7,#3
 578 0010 1A78     	 ldrb r2,[r3]
 579 0012 7B68     	 ldr r3,[r7,#4]
 580 0014 0432     	 add r2,r2,#4
 581 0016 9200     	 lsl r2,r2,#2
 582 0018 D358     	 ldr r3,[r2,r3]
 583 001a 9B08     	 lsr r3,r3,#2
 584 001c 1A1C     	 add r2,r3,#0
 585 001e 0323     	 mov r3,#3
 586 0020 1340     	 and r3,r2
 587 0022 DBB2     	 uxtb r3,r3
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 589              	.LM27:
 590 0024 181C     	 mov r0,r3
 591 0026 BD46     	 mov sp,r7
 592 0028 02B0     	 add sp,sp,#8
 593              	 
 594 002a 80BD     	 pop {r7,pc}
 596              	.Lscope6:
 598              	 .stabd 78,0,0
 599              	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 600              	 .align 2
 605              	 .global XMC_ERU_ETL_SetStatusFlagMode
 606              	 .code 16
 607              	 .thumb_func
 609              	XMC_ERU_ETL_SetStatusFlagMode:
 610              	 .stabd 46,0,0
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 612              	.LM28:
 613              	.LFBB7:
 614 0000 90B5     	 push {r4,r7,lr}
 615 0002 83B0     	 sub sp,sp,#12
 616 0004 00AF     	 add r7,sp,#0
 617 0006 7860     	 str r0,[r7,#4]
 618 0008 081C     	 mov r0,r1
 619 000a 111C     	 mov r1,r2
 620 000c FB1C     	 add r3,r7,#3
 621 000e 021C     	 add r2,r0,#0
 622 0010 1A70     	 strb r2,[r3]
 623 0012 BB1C     	 add r3,r7,#2
 624 0014 0A1C     	 add r2,r1,#0
 625 0016 1A70     	 strb r2,[r3]
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 627              	.LM29:
 628 0018 FB1C     	 add r3,r7,#3
 629 001a 1A78     	 ldrb r2,[r3]
 630 001c BB1C     	 add r3,r7,#2
 631 001e 1B78     	 ldrb r3,[r3]
 632 0020 0121     	 mov r1,#1
 633 0022 0B40     	 and r3,r1
 634 0024 D9B2     	 uxtb r1,r3
 635 0026 7B68     	 ldr r3,[r7,#4]
 636 0028 0432     	 add r2,r2,#4
 637 002a 9200     	 lsl r2,r2,#2
 638 002c 0120     	 mov r0,#1
 639 002e 0140     	 and r1,r0
 640 0030 4900     	 lsl r1,r1,#1
 641 0032 D058     	 ldr r0,[r2,r3]
 642 0034 0224     	 mov r4,#2
 643 0036 A043     	 bic r0,r4
 644 0038 0143     	 orr r1,r0
 645 003a D150     	 str r1,[r2,r3]
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 647              	.LM30:
 648 003c BD46     	 mov sp,r7
 649 003e 03B0     	 add sp,sp,#12
 650              	 
 651 0040 90BD     	 pop {r4,r7,pc}
 653              	.Lscope7:
 655              	 .stabd 78,0,0
 656 0042 C046     	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 657              	 .align 2
 662              	 .global XMC_ERU_ETL_EnableOutputTrigger
 663              	 .code 16
 664              	 .thumb_func
 666              	XMC_ERU_ETL_EnableOutputTrigger:
 667              	 .stabd 46,0,0
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 669              	.LM31:
 670              	.LFBB8:
 671 0000 90B5     	 push {r4,r7,lr}
 672 0002 83B0     	 sub sp,sp,#12
 673 0004 00AF     	 add r7,sp,#0
 674 0006 7860     	 str r0,[r7,#4]
 675 0008 081C     	 mov r0,r1
 676 000a 111C     	 mov r1,r2
 677 000c FB1C     	 add r3,r7,#3
 678 000e 021C     	 add r2,r0,#0
 679 0010 1A70     	 strb r2,[r3]
 680 0012 BB1C     	 add r3,r7,#2
 681 0014 0A1C     	 add r2,r1,#0
 682 0016 1A70     	 strb r2,[r3]
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 684              	.LM32:
 685 0018 FB1C     	 add r3,r7,#3
 686 001a 1A78     	 ldrb r2,[r3]
 687 001c BB1C     	 add r3,r7,#2
 688 001e 1B78     	 ldrb r3,[r3]
 689 0020 0721     	 mov r1,#7
 690 0022 0B40     	 and r3,r1
 691 0024 D9B2     	 uxtb r1,r3
 692 0026 7B68     	 ldr r3,[r7,#4]
 693 0028 0432     	 add r2,r2,#4
 694 002a 9200     	 lsl r2,r2,#2
 695 002c 0720     	 mov r0,#7
 696 002e 0140     	 and r1,r0
 697 0030 0901     	 lsl r1,r1,#4
 698 0032 D058     	 ldr r0,[r2,r3]
 699 0034 7024     	 mov r4,#112
 700 0036 A043     	 bic r0,r4
 701 0038 0143     	 orr r1,r0
 702 003a D150     	 str r1,[r2,r3]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 704              	.LM33:
 705 003c FB1C     	 add r3,r7,#3
 706 003e 1A78     	 ldrb r2,[r3]
 707 0040 7B68     	 ldr r3,[r7,#4]
 708 0042 0432     	 add r2,r2,#4
 709 0044 9200     	 lsl r2,r2,#2
 710 0046 D158     	 ldr r1,[r2,r3]
 711 0048 0120     	 mov r0,#1
 712 004a 0143     	 orr r1,r0
 713 004c D150     	 str r1,[r2,r3]
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 715              	.LM34:
 716 004e BD46     	 mov sp,r7
 717 0050 03B0     	 add sp,sp,#12
 718              	 
 719 0052 90BD     	 pop {r4,r7,pc}
 721              	.Lscope8:
 723              	 .stabd 78,0,0
 724              	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 725              	 .align 2
 729              	 .global XMC_ERU_ETL_DisableOutputTrigger
 730              	 .code 16
 731              	 .thumb_func
 733              	XMC_ERU_ETL_DisableOutputTrigger:
 734              	 .stabd 46,0,0
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 736              	.LM35:
 737              	.LFBB9:
 738 0000 80B5     	 push {r7,lr}
 739 0002 82B0     	 sub sp,sp,#8
 740 0004 00AF     	 add r7,sp,#0
 741 0006 7860     	 str r0,[r7,#4]
 742 0008 0A1C     	 mov r2,r1
 743 000a FB1C     	 add r3,r7,#3
 744 000c 1A70     	 strb r2,[r3]
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 746              	.LM36:
 747 000e FB1C     	 add r3,r7,#3
 748 0010 1A78     	 ldrb r2,[r3]
 749 0012 7B68     	 ldr r3,[r7,#4]
 750 0014 0432     	 add r2,r2,#4
 751 0016 9200     	 lsl r2,r2,#2
 752 0018 D158     	 ldr r1,[r2,r3]
 753 001a 0120     	 mov r0,#1
 754 001c 8143     	 bic r1,r0
 755 001e D150     	 str r1,[r2,r3]
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 757              	.LM37:
 758 0020 BD46     	 mov sp,r7
 759 0022 02B0     	 add sp,sp,#8
 760              	 
 761 0024 80BD     	 pop {r7,pc}
 763              	.Lscope9:
 765              	 .stabd 78,0,0
 766 0026 C046     	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 767              	 .align 2
 772              	 .global XMC_ERU_OGU_EnablePatternDetection
 773              	 .code 16
 774              	 .thumb_func
 776              	XMC_ERU_OGU_EnablePatternDetection:
 777              	 .stabd 46,0,0
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 779              	.LM38:
 780              	.LFBB10:
 781 0000 90B5     	 push {r4,r7,lr}
 782 0002 83B0     	 sub sp,sp,#12
 783 0004 00AF     	 add r7,sp,#0
 784 0006 7860     	 str r0,[r7,#4]
 785 0008 081C     	 mov r0,r1
 786 000a 111C     	 mov r1,r2
 787 000c FB1C     	 add r3,r7,#3
 788 000e 021C     	 add r2,r0,#0
 789 0010 1A70     	 strb r2,[r3]
 790 0012 BB1C     	 add r3,r7,#2
 791 0014 0A1C     	 add r2,r1,#0
 792 0016 1A70     	 strb r2,[r3]
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 794              	.LM39:
 795 0018 FB1C     	 add r3,r7,#3
 796 001a 1A78     	 ldrb r2,[r3]
 797 001c BB1C     	 add r3,r7,#2
 798 001e 1B78     	 ldrb r3,[r3]
 799 0020 0F21     	 mov r1,#15
 800 0022 0B40     	 and r3,r1
 801 0024 D9B2     	 uxtb r1,r3
 802 0026 7B68     	 ldr r3,[r7,#4]
 803 0028 0832     	 add r2,r2,#8
 804 002a 9200     	 lsl r2,r2,#2
 805 002c 0F20     	 mov r0,#15
 806 002e 0140     	 and r1,r0
 807 0030 0903     	 lsl r1,r1,#12
 808 0032 D058     	 ldr r0,[r2,r3]
 809 0034 074C     	 ldr r4,.L14
 810 0036 2040     	 and r0,r4
 811 0038 0143     	 orr r1,r0
 812 003a D150     	 str r1,[r2,r3]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 814              	.LM40:
 815 003c FB1C     	 add r3,r7,#3
 816 003e 1A78     	 ldrb r2,[r3]
 817 0040 7B68     	 ldr r3,[r7,#4]
 818 0042 0832     	 add r2,r2,#8
 819 0044 9200     	 lsl r2,r2,#2
 820 0046 D158     	 ldr r1,[r2,r3]
 821 0048 0420     	 mov r0,#4
 822 004a 0143     	 orr r1,r0
 823 004c D150     	 str r1,[r2,r3]
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 825              	.LM41:
 826 004e BD46     	 mov sp,r7
 827 0050 03B0     	 add sp,sp,#12
 828              	 
 829 0052 90BD     	 pop {r4,r7,pc}
 830              	.L15:
 831              	 .align 2
 832              	.L14:
 833 0054 FF0FFFFF 	 .word -61441
 835              	.Lscope10:
 837              	 .stabd 78,0,0
 838              	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 839              	 .align 2
 843              	 .global XMC_ERU_OGU_DisablePatternDetection
 844              	 .code 16
 845              	 .thumb_func
 847              	XMC_ERU_OGU_DisablePatternDetection:
 848              	 .stabd 46,0,0
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 850              	.LM42:
 851              	.LFBB11:
 852 0000 80B5     	 push {r7,lr}
 853 0002 82B0     	 sub sp,sp,#8
 854 0004 00AF     	 add r7,sp,#0
 855 0006 7860     	 str r0,[r7,#4]
 856 0008 0A1C     	 mov r2,r1
 857 000a FB1C     	 add r3,r7,#3
 858 000c 1A70     	 strb r2,[r3]
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 860              	.LM43:
 861 000e FB1C     	 add r3,r7,#3
 862 0010 1A78     	 ldrb r2,[r3]
 863 0012 7B68     	 ldr r3,[r7,#4]
 864 0014 0832     	 add r2,r2,#8
 865 0016 9200     	 lsl r2,r2,#2
 866 0018 D158     	 ldr r1,[r2,r3]
 867 001a 0420     	 mov r0,#4
 868 001c 8143     	 bic r1,r0
 869 001e D150     	 str r1,[r2,r3]
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 871              	.LM44:
 872 0020 BD46     	 mov sp,r7
 873 0022 02B0     	 add sp,sp,#8
 874              	 
 875 0024 80BD     	 pop {r7,pc}
 877              	.Lscope11:
 879              	 .stabd 78,0,0
 880 0026 C046     	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 881              	 .align 2
 886              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 887              	 .code 16
 888              	 .thumb_func
 890              	XMC_ERU_OGU_EnablePeripheralTrigger:
 891              	 .stabd 46,0,0
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 893              	.LM45:
 894              	.LFBB12:
 895 0000 90B5     	 push {r4,r7,lr}
 896 0002 83B0     	 sub sp,sp,#12
 897 0004 00AF     	 add r7,sp,#0
 898 0006 7860     	 str r0,[r7,#4]
 899 0008 081C     	 mov r0,r1
 900 000a 111C     	 mov r1,r2
 901 000c FB1C     	 add r3,r7,#3
 902 000e 021C     	 add r2,r0,#0
 903 0010 1A70     	 strb r2,[r3]
 904 0012 BB1C     	 add r3,r7,#2
 905 0014 0A1C     	 add r2,r1,#0
 906 0016 1A70     	 strb r2,[r3]
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 908              	.LM46:
 909 0018 FB1C     	 add r3,r7,#3
 910 001a 1A78     	 ldrb r2,[r3]
 911 001c BB1C     	 add r3,r7,#2
 912 001e 1B78     	 ldrb r3,[r3]
 913 0020 0321     	 mov r1,#3
 914 0022 0B40     	 and r3,r1
 915 0024 D9B2     	 uxtb r1,r3
 916 0026 7B68     	 ldr r3,[r7,#4]
 917 0028 0832     	 add r2,r2,#8
 918 002a 9200     	 lsl r2,r2,#2
 919 002c 0320     	 mov r0,#3
 920 002e 0140     	 and r1,r0
 921 0030 D058     	 ldr r0,[r2,r3]
 922 0032 0324     	 mov r4,#3
 923 0034 A043     	 bic r0,r4
 924 0036 0143     	 orr r1,r0
 925 0038 D150     	 str r1,[r2,r3]
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 927              	.LM47:
 928 003a BD46     	 mov sp,r7
 929 003c 03B0     	 add sp,sp,#12
 930              	 
 931 003e 90BD     	 pop {r4,r7,pc}
 933              	.Lscope12:
 935              	 .stabd 78,0,0
 936              	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 937              	 .align 2
 941              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 942              	 .code 16
 943              	 .thumb_func
 945              	XMC_ERU_OGU_DisablePeripheralTrigger:
 946              	 .stabd 46,0,0
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 948              	.LM48:
 949              	.LFBB13:
 950 0000 80B5     	 push {r7,lr}
 951 0002 82B0     	 sub sp,sp,#8
 952 0004 00AF     	 add r7,sp,#0
 953 0006 7860     	 str r0,[r7,#4]
 954 0008 0A1C     	 mov r2,r1
 955 000a FB1C     	 add r3,r7,#3
 956 000c 1A70     	 strb r2,[r3]
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 958              	.LM49:
 959 000e FB1C     	 add r3,r7,#3
 960 0010 1A78     	 ldrb r2,[r3]
 961 0012 7B68     	 ldr r3,[r7,#4]
 962 0014 0832     	 add r2,r2,#8
 963 0016 9200     	 lsl r2,r2,#2
 964 0018 D158     	 ldr r1,[r2,r3]
 965 001a 0320     	 mov r0,#3
 966 001c 8143     	 bic r1,r0
 967 001e D150     	 str r1,[r2,r3]
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 969              	.LM50:
 970 0020 BD46     	 mov sp,r7
 971 0022 02B0     	 add sp,sp,#8
 972              	 
 973 0024 80BD     	 pop {r7,pc}
 975              	.Lscope13:
 977              	 .stabd 78,0,0
 978 0026 C046     	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 979              	 .align 2
 984              	 .global XMC_ERU_OGU_SetServiceRequestMode
 985              	 .code 16
 986              	 .thumb_func
 988              	XMC_ERU_OGU_SetServiceRequestMode:
 989              	 .stabd 46,0,0
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 991              	.LM51:
 992              	.LFBB14:
 993 0000 90B5     	 push {r4,r7,lr}
 994 0002 83B0     	 sub sp,sp,#12
 995 0004 00AF     	 add r7,sp,#0
 996 0006 7860     	 str r0,[r7,#4]
 997 0008 081C     	 mov r0,r1
 998 000a 111C     	 mov r1,r2
 999 000c FB1C     	 add r3,r7,#3
 1000 000e 021C     	 add r2,r0,#0
 1001 0010 1A70     	 strb r2,[r3]
 1002 0012 BB1C     	 add r3,r7,#2
 1003 0014 0A1C     	 add r2,r1,#0
 1004 0016 1A70     	 strb r2,[r3]
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 1006              	.LM52:
 1007 0018 FB1C     	 add r3,r7,#3
 1008 001a 1A78     	 ldrb r2,[r3]
 1009 001c BB1C     	 add r3,r7,#2
 1010 001e 1B78     	 ldrb r3,[r3]
 1011 0020 0321     	 mov r1,#3
 1012 0022 0B40     	 and r3,r1
 1013 0024 D9B2     	 uxtb r1,r3
 1014 0026 7B68     	 ldr r3,[r7,#4]
 1015 0028 0832     	 add r2,r2,#8
 1016 002a 9200     	 lsl r2,r2,#2
 1017 002c 0320     	 mov r0,#3
 1018 002e 0140     	 and r1,r0
 1019 0030 0901     	 lsl r1,r1,#4
 1020 0032 D058     	 ldr r0,[r2,r3]
 1021 0034 3024     	 mov r4,#48
 1022 0036 A043     	 bic r0,r4
 1023 0038 0143     	 orr r1,r0
 1024 003a D150     	 str r1,[r2,r3]
 294:../Libraries/XMCLib/src/xmc_eru.c **** 
 295:../Libraries/XMCLib/src/xmc_eru.c **** }
 1026              	.LM53:
 1027 003c BD46     	 mov sp,r7
 1028 003e 03B0     	 add sp,sp,#12
 1029              	 
 1030 0040 90BD     	 pop {r4,r7,pc}
 1032              	.Lscope14:
 1034              	 .stabd 78,0,0
 1035 0042 C046     	 .text
 1037              	.Letext0:
 1038              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:233    .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:242    .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:316    .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:325    .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:366    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:376    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:437    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:446    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:492    .text.XMC_ERU_ETL_SetSource:00000044 $d
    {standard input}:498    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:507    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:555    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:563    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:600    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:609    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:657    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:666    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:725    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:733    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:767    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:776    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:833    .text.XMC_ERU_OGU_EnablePatternDetection:00000054 $d
    {standard input}:839    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:847    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:881    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:890    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:937    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:945    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:979    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:988    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode

UNDEFINED SYMBOLS
XMC_ERU_Enable
