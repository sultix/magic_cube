   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  16              	 .text
  17              	.Ltext0:
 233              	 .section .bss.event_handler_list,"aw",%nobits
 234              	 .align 2
 237              	event_handler_list:
 238 0000 00000000 	 .space 128
 238      00000000 
 238      00000000 
 238      00000000 
 238      00000000 
 239              	 .section .data.event_masks,"aw",%progbits
 240              	 .align 2
 243              	event_masks:
 244 0000 00001F00 	 .word 2031616
 245 0004 8F0060FF 	 .word -10485617
 246 0008 00000000 	 .word 0
 247              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
 248              	 .align 2
 251              	 .code 16
 252              	 .thumb_func
 254              	XMC_SCU_CalcTSEVAR:
 255              	 .stabd 46,0,0
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2016-04-15
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  69:../Libraries/XMCLib/src/xmc1_scu.c **** 
  70:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  77:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
  78:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  89:../Libraries/XMCLib/src/xmc1_scu.c **** 
  90:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  93:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
  94:../Libraries/XMCLib/src/xmc1_scu.c **** 
  95:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
  96:../Libraries/XMCLib/src/xmc1_scu.c **** 
  97:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  98:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 100:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 101:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 102:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 103:../Libraries/XMCLib/src/xmc1_scu.c **** 
 104:../Libraries/XMCLib/src/xmc1_scu.c **** 
 105:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 106:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 107:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 108:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 109:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 110:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 111:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 112:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 113:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 114:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 115:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 116:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 117:../Libraries/XMCLib/src/xmc1_scu.c **** 
 118:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 119:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 120:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 121:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 122:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 123:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 124:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 125:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 126:../Libraries/XMCLib/src/xmc1_scu.c **** 
 127:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 128:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 129:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 130:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 131:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 132:../Libraries/XMCLib/src/xmc1_scu.c **** 
 133:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 134:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 135:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 136:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 137:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 138:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 140:../Libraries/XMCLib/src/xmc1_scu.c **** 
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 142:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 143:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 144:../Libraries/XMCLib/src/xmc1_scu.c **** 
 145:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 146:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 147:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 148:../Libraries/XMCLib/src/xmc1_scu.c **** 
 149:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 150:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 152:../Libraries/XMCLib/src/xmc1_scu.c ****         
 153:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 154:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 155:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 156:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 157:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 158:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 159:../Libraries/XMCLib/src/xmc1_scu.c **** 
 160:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 161:../Libraries/XMCLib/src/xmc1_scu.c **** {
 162:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 163:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 164:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 165:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 166:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 167:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 168:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 169:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 170:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 171:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 172:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 173:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 174:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 175:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 176:../Libraries/XMCLib/src/xmc1_scu.c **** 
 177:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 178:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 179:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 180:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 181:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 182:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 183:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 184:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 185:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 186:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 187:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 188:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 189:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 190:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 191:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 193:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 194:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 195:../Libraries/XMCLib/src/xmc1_scu.c **** 
 196:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 197:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 199:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 200:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 203:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 204:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 205:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 206:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 207:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 208:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 211:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 213:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 214:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 215:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 216:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 217:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 218:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 219:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 220:../Libraries/XMCLib/src/xmc1_scu.c **** 
 221:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 222:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 223:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 224:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 225:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 226:../Libraries/XMCLib/src/xmc1_scu.c **** 
 227:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 228:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 229:../Libraries/XMCLib/src/xmc1_scu.c **** 
 230:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 231:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 232:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 233:../Libraries/XMCLib/src/xmc1_scu.c **** {
 257              	.LM0:
 258              	.LFBB1:
 259 0000 80B5     	 push {r7,lr}
 260 0002 84B0     	 sub sp,sp,#16
 261 0004 00AF     	 add r7,sp,#0
 262 0006 7860     	 str r0,[r7,#4]
 234:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 235:../Libraries/XMCLib/src/xmc1_scu.c **** 
 236:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 237:../Libraries/XMCLib/src/xmc1_scu.c **** 
 238:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
 264              	.LM1:
 265 0008 9023     	 mov r3,#144
 266 000a 5B00     	 lsl r3,r3,#1
 267 000c 1B68     	 ldr r3,[r3]
 268 000e 7A68     	 ldr r2,[r7,#4]
 269 0010 101C     	 mov r0,r2
 270 0012 9847     	 blx r3
 271 0014 031C     	 mov r3,r0
 272 0016 FB60     	 str r3,[r7,#12]
 239:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 274              	.LM2:
 275 0018 FB68     	 ldr r3,[r7,#12]
 276 001a 002B     	 cmp r3,#0
 277 001c 14D1     	 bne .L2
 240:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 241:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
 279              	.LM3:
 280 001e 9023     	 mov r3,#144
 281 0020 5B00     	 lsl r3,r3,#1
 282 0022 1B68     	 ldr r3,[r3]
 283 0024 7A68     	 ldr r2,[r7,#4]
 284 0026 0132     	 add r2,r2,#1
 285 0028 101C     	 mov r0,r2
 286 002a 9847     	 blx r3
 287 002c 031C     	 mov r3,r0
 288 002e FB60     	 str r3,[r7,#12]
 242:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
 290              	.LM4:
 291 0030 FB68     	 ldr r3,[r7,#12]
 292 0032 002B     	 cmp r3,#0
 293 0034 08D1     	 bne .L2
 243:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 244:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
 295              	.LM5:
 296 0036 9023     	 mov r3,#144
 297 0038 5B00     	 lsl r3,r3,#1
 298 003a 1B68     	 ldr r3,[r3]
 299 003c 7A68     	 ldr r2,[r7,#4]
 300 003e 013A     	 sub r2,r2,#1
 301 0040 101C     	 mov r0,r2
 302 0042 9847     	 blx r3
 303 0044 031C     	 mov r3,r0
 304 0046 FB60     	 str r3,[r7,#12]
 305              	.L2:
 245:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   
 248:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
 307              	.LM6:
 308 0048 FB68     	 ldr r3,[r7,#12]
 249:../Libraries/XMCLib/src/xmc1_scu.c **** }
 310              	.LM7:
 311 004a 181C     	 mov r0,r3
 312 004c BD46     	 mov sp,r7
 313 004e 04B0     	 add sp,sp,#16
 314              	 
 315 0050 80BD     	 pop {r7,pc}
 320              	.Lscope1:
 322              	 .stabd 78,0,0
 323 0052 C046     	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 324              	 .align 2
 327              	 .global XMC_SCU_INTERRUPT_EnableEvent
 328              	 .code 16
 329              	 .thumb_func
 331              	XMC_SCU_INTERRUPT_EnableEvent:
 332              	 .stabd 46,0,0
 250:../Libraries/XMCLib/src/xmc1_scu.c **** 
 251:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 252:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 253:../Libraries/XMCLib/src/xmc1_scu.c **** static void delay(uint32_t cycles)
 254:../Libraries/XMCLib/src/xmc1_scu.c **** {
 255:../Libraries/XMCLib/src/xmc1_scu.c ****   while(cycles > 0U)
 256:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 257:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 258:../Libraries/XMCLib/src/xmc1_scu.c ****     cycles--;
 259:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 260:../Libraries/XMCLib/src/xmc1_scu.c **** }
 261:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 262:../Libraries/XMCLib/src/xmc1_scu.c **** 
 263:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 264:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 265:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 266:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 267:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 268:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 269:../Libraries/XMCLib/src/xmc1_scu.c **** {
 270:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 271:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 272:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 273:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 274:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 275:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 276:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 277:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 278:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 279:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 280:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 281:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 282:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 283:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 284:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 285:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 286:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 287:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 288:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 289:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 290:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 291:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 292:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 293:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 294:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 295:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 296:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 297:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 298:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 299:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 302:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 303:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 304:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 307:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 308:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 311:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 318:../Libraries/XMCLib/src/xmc1_scu.c **** }
 319:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 320:../Libraries/XMCLib/src/xmc1_scu.c **** 
 321:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 322:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 323:../Libraries/XMCLib/src/xmc1_scu.c **** {
 334              	.LM8:
 335              	.LFBB2:
 336 0000 80B5     	 push {r7,lr}
 337 0002 82B0     	 sub sp,sp,#8
 338 0004 00AF     	 add r7,sp,#0
 339 0006 7860     	 str r0,[r7,#4]
 324:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 341              	.LM9:
 342 0008 044B     	 ldr r3,.L5
 343 000a 044A     	 ldr r2,.L5
 344 000c 5168     	 ldr r1,[r2,#4]
 345 000e 7A68     	 ldr r2,[r7,#4]
 346 0010 0A43     	 orr r2,r1
 347 0012 5A60     	 str r2,[r3,#4]
 325:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 326:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 327:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 328:../Libraries/XMCLib/src/xmc1_scu.c **** }
 349              	.LM10:
 350 0014 BD46     	 mov sp,r7
 351 0016 02B0     	 add sp,sp,#8
 352              	 
 353 0018 80BD     	 pop {r7,pc}
 354              	.L6:
 355 001a C046     	 .align 2
 356              	.L5:
 357 001c 38000140 	 .word 1073807416
 359              	.Lscope2:
 361              	 .stabd 78,0,0
 362              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 363              	 .align 2
 366              	 .global XMC_SCU_INTERRUPT_DisableEvent
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_SCU_INTERRUPT_DisableEvent:
 371              	 .stabd 46,0,0
 329:../Libraries/XMCLib/src/xmc1_scu.c **** 
 330:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 331:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 332:../Libraries/XMCLib/src/xmc1_scu.c **** {
 373              	.LM11:
 374              	.LFBB3:
 375 0000 80B5     	 push {r7,lr}
 376 0002 82B0     	 sub sp,sp,#8
 377 0004 00AF     	 add r7,sp,#0
 378 0006 7860     	 str r0,[r7,#4]
 333:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 380              	.LM12:
 381 0008 044B     	 ldr r3,.L8
 382 000a 044A     	 ldr r2,.L8
 383 000c 5268     	 ldr r2,[r2,#4]
 384 000e 7968     	 ldr r1,[r7,#4]
 385 0010 C943     	 mvn r1,r1
 386 0012 0A40     	 and r2,r1
 387 0014 5A60     	 str r2,[r3,#4]
 334:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 335:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 336:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 337:../Libraries/XMCLib/src/xmc1_scu.c **** }
 389              	.LM13:
 390 0016 BD46     	 mov sp,r7
 391 0018 02B0     	 add sp,sp,#8
 392              	 
 393 001a 80BD     	 pop {r7,pc}
 394              	.L9:
 395              	 .align 2
 396              	.L8:
 397 001c 38000140 	 .word 1073807416
 399              	.Lscope3:
 401              	 .stabd 78,0,0
 402              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 403              	 .align 2
 406              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 407              	 .code 16
 408              	 .thumb_func
 410              	XMC_SCU_INTERRUPT_TriggerEvent:
 411              	 .stabd 46,0,0
 338:../Libraries/XMCLib/src/xmc1_scu.c **** 
 339:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 340:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 341:../Libraries/XMCLib/src/xmc1_scu.c **** {
 413              	.LM14:
 414              	.LFBB4:
 415 0000 80B5     	 push {r7,lr}
 416 0002 82B0     	 sub sp,sp,#8
 417 0004 00AF     	 add r7,sp,#0
 418 0006 7860     	 str r0,[r7,#4]
 342:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 420              	.LM15:
 421 0008 044B     	 ldr r3,.L11
 422 000a 044A     	 ldr r2,.L11
 423 000c D168     	 ldr r1,[r2,#12]
 424 000e 7A68     	 ldr r2,[r7,#4]
 425 0010 0A43     	 orr r2,r1
 426 0012 DA60     	 str r2,[r3,#12]
 343:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 344:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 345:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 346:../Libraries/XMCLib/src/xmc1_scu.c **** }
 428              	.LM16:
 429 0014 BD46     	 mov sp,r7
 430 0016 02B0     	 add sp,sp,#8
 431              	 
 432 0018 80BD     	 pop {r7,pc}
 433              	.L12:
 434 001a C046     	 .align 2
 435              	.L11:
 436 001c 38000140 	 .word 1073807416
 438              	.Lscope4:
 440              	 .stabd 78,0,0
 441              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 442              	 .align 2
 444              	 .global XMC_SCU_INTERUPT_GetEventStatus
 445              	 .code 16
 446              	 .thumb_func
 448              	XMC_SCU_INTERUPT_GetEventStatus:
 449              	 .stabd 46,0,0
 347:../Libraries/XMCLib/src/xmc1_scu.c **** 
 348:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 349:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 350:../Libraries/XMCLib/src/xmc1_scu.c **** {
 451              	.LM17:
 452              	.LFBB5:
 453 0000 80B5     	 push {r7,lr}
 454 0002 82B0     	 sub sp,sp,#8
 455 0004 00AF     	 add r7,sp,#0
 351:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 352:../Libraries/XMCLib/src/xmc1_scu.c **** 
 353:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 457              	.LM18:
 458 0006 044B     	 ldr r3,.L15
 459 0008 1B68     	 ldr r3,[r3]
 460 000a 7B60     	 str r3,[r7,#4]
 354:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 355:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 356:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 357:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 462              	.LM19:
 463 000c 7B68     	 ldr r3,[r7,#4]
 358:../Libraries/XMCLib/src/xmc1_scu.c **** }
 465              	.LM20:
 466 000e 181C     	 mov r0,r3
 467 0010 BD46     	 mov sp,r7
 468 0012 02B0     	 add sp,sp,#8
 469              	 
 470 0014 80BD     	 pop {r7,pc}
 471              	.L16:
 472 0016 C046     	 .align 2
 473              	.L15:
 474 0018 38000140 	 .word 1073807416
 479              	.Lscope5:
 481              	 .stabd 78,0,0
 482              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 483              	 .align 2
 486              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 487              	 .code 16
 488              	 .thumb_func
 490              	XMC_SCU_INTERRUPT_ClearEventStatus:
 491              	 .stabd 46,0,0
 359:../Libraries/XMCLib/src/xmc1_scu.c **** 
 360:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 361:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 362:../Libraries/XMCLib/src/xmc1_scu.c **** {
 493              	.LM21:
 494              	.LFBB6:
 495 0000 80B5     	 push {r7,lr}
 496 0002 82B0     	 sub sp,sp,#8
 497 0004 00AF     	 add r7,sp,#0
 498 0006 7860     	 str r0,[r7,#4]
 363:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 500              	.LM22:
 501 0008 044B     	 ldr r3,.L18
 502 000a 044A     	 ldr r2,.L18
 503 000c 9168     	 ldr r1,[r2,#8]
 504 000e 7A68     	 ldr r2,[r7,#4]
 505 0010 0A43     	 orr r2,r1
 506 0012 9A60     	 str r2,[r3,#8]
 364:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 365:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 366:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 367:../Libraries/XMCLib/src/xmc1_scu.c **** }
 508              	.LM23:
 509 0014 BD46     	 mov sp,r7
 510 0016 02B0     	 add sp,sp,#8
 511              	 
 512 0018 80BD     	 pop {r7,pc}
 513              	.L19:
 514 001a C046     	 .align 2
 515              	.L18:
 516 001c 38000140 	 .word 1073807416
 518              	.Lscope6:
 520              	 .stabd 78,0,0
 521              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 522              	 .align 2
 524              	 .global XMC_SCU_LockProtectedBits
 525              	 .code 16
 526              	 .thumb_func
 528              	XMC_SCU_LockProtectedBits:
 529              	 .stabd 46,0,0
 368:../Libraries/XMCLib/src/xmc1_scu.c **** 
 369:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 370:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 371:../Libraries/XMCLib/src/xmc1_scu.c **** {
 531              	.LM24:
 532              	.LFBB7:
 533 0000 80B5     	 push {r7,lr}
 534 0002 00AF     	 add r7,sp,#0
 372:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 536              	.LM25:
 537 0004 024B     	 ldr r3,.L21
 538 0006 C322     	 mov r2,#195
 539 0008 5A62     	 str r2,[r3,#36]
 373:../Libraries/XMCLib/src/xmc1_scu.c **** }
 541              	.LM26:
 542 000a BD46     	 mov sp,r7
 543              	 
 544 000c 80BD     	 pop {r7,pc}
 545              	.L22:
 546 000e C046     	 .align 2
 547              	.L21:
 548 0010 00000140 	 .word 1073807360
 550              	.Lscope7:
 552              	 .stabd 78,0,0
 553              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 554              	 .align 2
 556              	 .global XMC_SCU_UnlockProtectedBits
 557              	 .code 16
 558              	 .thumb_func
 560              	XMC_SCU_UnlockProtectedBits:
 561              	 .stabd 46,0,0
 374:../Libraries/XMCLib/src/xmc1_scu.c **** 
 375:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 376:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 377:../Libraries/XMCLib/src/xmc1_scu.c **** {
 563              	.LM27:
 564              	.LFBB8:
 565 0000 80B5     	 push {r7,lr}
 566 0002 00AF     	 add r7,sp,#0
 378:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 568              	.LM28:
 569 0004 054B     	 ldr r3,.L25
 570 0006 C022     	 mov r2,#192
 571 0008 5A62     	 str r2,[r3,#36]
 379:../Libraries/XMCLib/src/xmc1_scu.c **** 
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 573              	.LM29:
 574 000a C046     	 mov r8,r8
 575              	.L24:
 577              	.LM30:
 578 000c 034B     	 ldr r3,.L25
 579 000e 5B6A     	 ldr r3,[r3,#36]
 580 0010 0422     	 mov r2,#4
 581 0012 1340     	 and r3,r2
 582 0014 FAD1     	 bne .L24
 381:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 382:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 383:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 384:../Libraries/XMCLib/src/xmc1_scu.c **** }
 584              	.LM31:
 585 0016 BD46     	 mov sp,r7
 586              	 
 587 0018 80BD     	 pop {r7,pc}
 588              	.L26:
 589 001a C046     	 .align 2
 590              	.L25:
 591 001c 00000140 	 .word 1073807360
 593              	.Lscope8:
 595              	 .stabd 78,0,0
 596              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 597              	 .align 2
 600              	 .global XMC_SCU_SupplyMonitorInit
 601              	 .code 16
 602              	 .thumb_func
 604              	XMC_SCU_SupplyMonitorInit:
 605              	 .stabd 46,0,0
 385:../Libraries/XMCLib/src/xmc1_scu.c **** 
 386:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 387:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 388:../Libraries/XMCLib/src/xmc1_scu.c **** {
 607              	.LM32:
 608              	.LFBB9:
 609 0000 80B5     	 push {r7,lr}
 610 0002 84B0     	 sub sp,sp,#16
 611 0004 00AF     	 add r7,sp,#0
 612 0006 7860     	 str r0,[r7,#4]
 389:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 390:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 391:../Libraries/XMCLib/src/xmc1_scu.c **** 
 392:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 614              	.LM33:
 615 0008 0023     	 mov r3,#0
 616 000a FB60     	 str r3,[r7,#12]
 393:../Libraries/XMCLib/src/xmc1_scu.c **** 
 394:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 618              	.LM34:
 619 000c 7B68     	 ldr r3,[r7,#4]
 620 000e 1B68     	 ldr r3,[r3]
 621 0010 FA68     	 ldr r2,[r7,#12]
 622 0012 1343     	 orr r3,r2
 623 0014 FB60     	 str r3,[r7,#12]
 395:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 625              	.LM35:
 626 0016 7B68     	 ldr r3,[r7,#4]
 627 0018 5B68     	 ldr r3,[r3,#4]
 628 001a 9B00     	 lsl r3,r3,#2
 629 001c FA68     	 ldr r2,[r7,#12]
 630 001e 1343     	 orr r3,r2
 631 0020 FB60     	 str r3,[r7,#12]
 396:../Libraries/XMCLib/src/xmc1_scu.c **** 
 397:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 633              	.LM36:
 634 0022 7B68     	 ldr r3,[r7,#4]
 635 0024 DB7A     	 ldrb r3,[r3,#11]
 636 0026 002B     	 cmp r3,#0
 637 0028 03D0     	 beq .L28
 398:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 399:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 639              	.LM37:
 640 002a FB68     	 ldr r3,[r7,#12]
 641 002c 1022     	 mov r2,#16
 642 002e 1343     	 orr r3,r2
 643 0030 FB60     	 str r3,[r7,#12]
 644              	.L28:
 400:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 401:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 646              	.LM38:
 647 0032 144A     	 ldr r2,.L32
 648 0034 FB68     	 ldr r3,[r7,#12]
 649 0036 99B2     	 uxth r1,r3
 650 0038 5023     	 mov r3,#80
 651 003a D152     	 strh r1,[r2,r3]
 402:../Libraries/XMCLib/src/xmc1_scu.c **** 
 403:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 653              	.LM39:
 654 003c 0023     	 mov r3,#0
 655 003e BB60     	 str r3,[r7,#8]
 404:../Libraries/XMCLib/src/xmc1_scu.c **** 
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 657              	.LM40:
 658 0040 7B68     	 ldr r3,[r7,#4]
 659 0042 1B7A     	 ldrb r3,[r3,#8]
 660 0044 002B     	 cmp r3,#0
 661 0046 03D0     	 beq .L29
 406:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 407:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 663              	.LM41:
 664 0048 BB68     	 ldr r3,[r7,#8]
 665 004a 0822     	 mov r2,#8
 666 004c 1343     	 orr r3,r2
 667 004e BB60     	 str r3,[r7,#8]
 668              	.L29:
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 409:../Libraries/XMCLib/src/xmc1_scu.c **** 
 410:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 670              	.LM42:
 671 0050 7B68     	 ldr r3,[r7,#4]
 672 0052 5B7A     	 ldrb r3,[r3,#9]
 673 0054 002B     	 cmp r3,#0
 674 0056 03D0     	 beq .L30
 411:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 412:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 676              	.LM43:
 677 0058 BB68     	 ldr r3,[r7,#8]
 678 005a 8022     	 mov r2,#128
 679 005c 1343     	 orr r3,r2
 680 005e BB60     	 str r3,[r7,#8]
 681              	.L30:
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 414:../Libraries/XMCLib/src/xmc1_scu.c **** 
 415:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 683              	.LM44:
 684 0060 7B68     	 ldr r3,[r7,#4]
 685 0062 9B7A     	 ldrb r3,[r3,#10]
 686 0064 002B     	 cmp r3,#0
 687 0066 04D0     	 beq .L31
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 417:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 689              	.LM45:
 690 0068 BB68     	 ldr r3,[r7,#8]
 691 006a 8022     	 mov r2,#128
 692 006c 9203     	 lsl r2,r2,#14
 693 006e 1343     	 orr r3,r2
 694 0070 BB60     	 str r3,[r7,#8]
 695              	.L31:
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 697              	.LM46:
 698 0072 054B     	 ldr r3,.L32+4
 699 0074 044A     	 ldr r2,.L32+4
 700 0076 5168     	 ldr r1,[r2,#4]
 701 0078 BA68     	 ldr r2,[r7,#8]
 702 007a 0A43     	 orr r2,r1
 703 007c 5A60     	 str r2,[r3,#4]
 420:../Libraries/XMCLib/src/xmc1_scu.c **** }
 705              	.LM47:
 706 007e BD46     	 mov sp,r7
 707 0080 04B0     	 add sp,sp,#16
 708              	 
 709 0082 80BD     	 pop {r7,pc}
 710              	.L33:
 711              	 .align 2
 712              	.L32:
 713 0084 00100140 	 .word 1073811456
 714 0088 38000140 	 .word 1073807416
 720              	.Lscope9:
 722              	 .stabd 78,0,0
 723              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 724              	 .align 2
 727              	 .global XMC_SCU_SetTempLowLimit
 728              	 .code 16
 729              	 .thumb_func
 731              	XMC_SCU_SetTempLowLimit:
 732              	 .stabd 46,0,0
 421:../Libraries/XMCLib/src/xmc1_scu.c **** 
 422:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 423:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 424:../Libraries/XMCLib/src/xmc1_scu.c **** {
 734              	.LM48:
 735              	.LFBB10:
 736 0000 80B5     	 push {r7,lr}
 737 0002 84B0     	 sub sp,sp,#16
 738 0004 00AF     	 add r7,sp,#0
 739 0006 7860     	 str r0,[r7,#4]
 425:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 741              	.LM49:
 742 0008 0F23     	 mov r3,#15
 743 000a FB18     	 add r3,r7,r3
 744 000c 0022     	 mov r2,#0
 745 000e 1A70     	 strb r2,[r3]
 426:../Libraries/XMCLib/src/xmc1_scu.c **** 
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 747              	.LM50:
 748 0010 7B68     	 ldr r3,[r7,#4]
 749 0012 181C     	 mov r0,r3
 750 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 751 0018 031C     	 mov r3,r0
 752 001a 7B60     	 str r3,[r7,#4]
 428:../Libraries/XMCLib/src/xmc1_scu.c **** 
 429:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 754              	.LM51:
 755 001c 7B68     	 ldr r3,[r7,#4]
 756 001e 002B     	 cmp r3,#0
 757 0020 04D0     	 beq .L35
 430:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 431:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 759              	.LM52:
 760 0022 084B     	 ldr r3,.L38
 761 0024 7A68     	 ldr r2,[r7,#4]
 762 0026 92B2     	 uxth r2,r2
 763 0028 9A86     	 strh r2,[r3,#52]
 764 002a 03E0     	 b .L36
 765              	.L35:
 432:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 434:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 435:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 767              	.LM53:
 768 002c 0F23     	 mov r3,#15
 769 002e FB18     	 add r3,r7,r3
 770 0030 0122     	 mov r2,#1
 771 0032 1A70     	 strb r2,[r3]
 772              	.L36:
 436:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 437:../Libraries/XMCLib/src/xmc1_scu.c **** 
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 774              	.LM54:
 775 0034 0F23     	 mov r3,#15
 776 0036 FB18     	 add r3,r7,r3
 777 0038 1B78     	 ldrb r3,[r3]
 439:../Libraries/XMCLib/src/xmc1_scu.c **** }
 779              	.LM55:
 780 003a 181C     	 mov r0,r3
 781 003c BD46     	 mov sp,r7
 782 003e 04B0     	 add sp,sp,#16
 783              	 
 784 0040 80BD     	 pop {r7,pc}
 785              	.L39:
 786 0042 C046     	 .align 2
 787              	.L38:
 788 0044 00100140 	 .word 1073811456
 793              	.Lscope10:
 795              	 .stabd 78,0,0
 796              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 797              	 .align 2
 800              	 .global XMC_SCU_SetTempHighLimit
 801              	 .code 16
 802              	 .thumb_func
 804              	XMC_SCU_SetTempHighLimit:
 805              	 .stabd 46,0,0
 440:../Libraries/XMCLib/src/xmc1_scu.c ****   
 441:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 442:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 443:../Libraries/XMCLib/src/xmc1_scu.c **** {
 807              	.LM56:
 808              	.LFBB11:
 809 0000 80B5     	 push {r7,lr}
 810 0002 84B0     	 sub sp,sp,#16
 811 0004 00AF     	 add r7,sp,#0
 812 0006 7860     	 str r0,[r7,#4]
 444:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 814              	.LM57:
 815 0008 0F23     	 mov r3,#15
 816 000a FB18     	 add r3,r7,r3
 817 000c 0022     	 mov r2,#0
 818 000e 1A70     	 strb r2,[r3]
 445:../Libraries/XMCLib/src/xmc1_scu.c **** 
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 820              	.LM58:
 821 0010 7B68     	 ldr r3,[r7,#4]
 822 0012 181C     	 mov r0,r3
 823 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 824 0018 031C     	 mov r3,r0
 825 001a 7B60     	 str r3,[r7,#4]
 447:../Libraries/XMCLib/src/xmc1_scu.c **** 
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 827              	.LM59:
 828 001c 7B68     	 ldr r3,[r7,#4]
 829 001e 002B     	 cmp r3,#0
 830 0020 04D0     	 beq .L41
 449:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 450:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 832              	.LM60:
 833 0022 084B     	 ldr r3,.L44
 834 0024 7A68     	 ldr r2,[r7,#4]
 835 0026 92B2     	 uxth r2,r2
 836 0028 1A86     	 strh r2,[r3,#48]
 837 002a 03E0     	 b .L42
 838              	.L41:
 451:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 453:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 454:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 840              	.LM61:
 841 002c 0F23     	 mov r3,#15
 842 002e FB18     	 add r3,r7,r3
 843 0030 0122     	 mov r2,#1
 844 0032 1A70     	 strb r2,[r3]
 845              	.L42:
 455:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 456:../Libraries/XMCLib/src/xmc1_scu.c **** 
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 847              	.LM62:
 848 0034 0F23     	 mov r3,#15
 849 0036 FB18     	 add r3,r7,r3
 850 0038 1B78     	 ldrb r3,[r3]
 458:../Libraries/XMCLib/src/xmc1_scu.c **** }
 852              	.LM63:
 853 003a 181C     	 mov r0,r3
 854 003c BD46     	 mov sp,r7
 855 003e 04B0     	 add sp,sp,#16
 856              	 
 857 0040 80BD     	 pop {r7,pc}
 858              	.L45:
 859 0042 C046     	 .align 2
 860              	.L44:
 861 0044 00100140 	 .word 1073811456
 866              	.Lscope11:
 868              	 .stabd 78,0,0
 869              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 870              	 .align 2
 874              	 .global XMC_SCU_SetRawTempLimits
 875              	 .code 16
 876              	 .thumb_func
 878              	XMC_SCU_SetRawTempLimits:
 879              	 .stabd 46,0,0
 459:../Libraries/XMCLib/src/xmc1_scu.c **** 
 460:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 461:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 462:../Libraries/XMCLib/src/xmc1_scu.c **** {
 881              	.LM64:
 882              	.LFBB12:
 883 0000 80B5     	 push {r7,lr}
 884 0002 82B0     	 sub sp,sp,#8
 885 0004 00AF     	 add r7,sp,#0
 886 0006 7860     	 str r0,[r7,#4]
 887 0008 3960     	 str r1,[r7]
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 889              	.LM65:
 890 000a 054B     	 ldr r3,.L47
 891 000c 3A68     	 ldr r2,[r7]
 892 000e 92B2     	 uxth r2,r2
 893 0010 1A86     	 strh r2,[r3,#48]
 464:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 895              	.LM66:
 896 0012 034B     	 ldr r3,.L47
 897 0014 7A68     	 ldr r2,[r7,#4]
 898 0016 92B2     	 uxth r2,r2
 899 0018 9A86     	 strh r2,[r3,#52]
 465:../Libraries/XMCLib/src/xmc1_scu.c **** }
 901              	.LM67:
 902 001a BD46     	 mov sp,r7
 903 001c 02B0     	 add sp,sp,#8
 904              	 
 905 001e 80BD     	 pop {r7,pc}
 906              	.L48:
 907              	 .align 2
 908              	.L47:
 909 0020 00100140 	 .word 1073811456
 911              	.Lscope12:
 913              	 .stabd 78,0,0
 914              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 915              	 .align 2
 917              	 .global XMC_SCU_StartTempMeasurement
 918              	 .code 16
 919              	 .thumb_func
 921              	XMC_SCU_StartTempMeasurement:
 922              	 .stabd 46,0,0
 466:../Libraries/XMCLib/src/xmc1_scu.c **** 
 467:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 468:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 469:../Libraries/XMCLib/src/xmc1_scu.c **** {
 924              	.LM68:
 925              	.LFBB13:
 926 0000 80B5     	 push {r7,lr}
 927 0002 00AF     	 add r7,sp,#0
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 929              	.LM69:
 930 0004 044A     	 ldr r2,.L50
 931 0006 044B     	 ldr r3,.L50
 932 0008 9B8C     	 ldrh r3,[r3,#36]
 933 000a 9BB2     	 uxth r3,r3
 934 000c 0121     	 mov r1,#1
 935 000e 0B43     	 orr r3,r1
 936 0010 9BB2     	 uxth r3,r3
 937 0012 9384     	 strh r3,[r2,#36]
 471:../Libraries/XMCLib/src/xmc1_scu.c **** }
 939              	.LM70:
 940 0014 BD46     	 mov sp,r7
 941              	 
 942 0016 80BD     	 pop {r7,pc}
 943              	.L51:
 944              	 .align 2
 945              	.L50:
 946 0018 00100140 	 .word 1073811456
 948              	.Lscope13:
 950              	 .stabd 78,0,0
 951              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 952              	 .align 2
 954              	 .global XMC_SCU_StopTempMeasurement
 955              	 .code 16
 956              	 .thumb_func
 958              	XMC_SCU_StopTempMeasurement:
 959              	 .stabd 46,0,0
 472:../Libraries/XMCLib/src/xmc1_scu.c **** 
 473:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 474:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 475:../Libraries/XMCLib/src/xmc1_scu.c **** {
 961              	.LM71:
 962              	.LFBB14:
 963 0000 80B5     	 push {r7,lr}
 964 0002 00AF     	 add r7,sp,#0
 476:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 966              	.LM72:
 967 0004 044A     	 ldr r2,.L53
 968 0006 044B     	 ldr r3,.L53
 969 0008 9B8C     	 ldrh r3,[r3,#36]
 970 000a 9BB2     	 uxth r3,r3
 971 000c 0121     	 mov r1,#1
 972 000e 8B43     	 bic r3,r1
 973 0010 9BB2     	 uxth r3,r3
 974 0012 9384     	 strh r3,[r2,#36]
 477:../Libraries/XMCLib/src/xmc1_scu.c **** }
 976              	.LM73:
 977 0014 BD46     	 mov sp,r7
 978              	 
 979 0016 80BD     	 pop {r7,pc}
 980              	.L54:
 981              	 .align 2
 982              	.L53:
 983 0018 00100140 	 .word 1073811456
 985              	.Lscope14:
 987              	 .stabd 78,0,0
 988              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 989              	 .align 2
 991              	 .global XMC_SCU_HighTemperature
 992              	 .code 16
 993              	 .thumb_func
 995              	XMC_SCU_HighTemperature:
 996              	 .stabd 46,0,0
 478:../Libraries/XMCLib/src/xmc1_scu.c **** 
 479:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 480:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 481:../Libraries/XMCLib/src/xmc1_scu.c **** {
 998              	.LM74:
 999              	.LFBB15:
 1000 0000 80B5     	 push {r7,lr}
 1001 0002 00AF     	 add r7,sp,#0
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 1003              	.LM75:
 1004 0004 054B     	 ldr r3,.L57
 1005 0006 1A68     	 ldr r2,[r3]
 1006 0008 8023     	 mov r3,#128
 1007 000a DB05     	 lsl r3,r3,#23
 1008 000c 1340     	 and r3,r2
 1009 000e 5A1E     	 sub r2,r3,#1
 1010 0010 9341     	 sbc r3,r3,r2
 1011 0012 DBB2     	 uxtb r3,r3
 483:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1013              	.LM76:
 1014 0014 181C     	 mov r0,r3
 1015 0016 BD46     	 mov sp,r7
 1016              	 
 1017 0018 80BD     	 pop {r7,pc}
 1018              	.L58:
 1019 001a C046     	 .align 2
 1020              	.L57:
 1021 001c 38000140 	 .word 1073807416
 1023              	.Lscope15:
 1025              	 .stabd 78,0,0
 1026              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 1027              	 .align 2
 1029              	 .global XMC_SCU_LowTemperature
 1030              	 .code 16
 1031              	 .thumb_func
 1033              	XMC_SCU_LowTemperature:
 1034              	 .stabd 46,0,0
 484:../Libraries/XMCLib/src/xmc1_scu.c **** 
 485:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 486:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 487:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1036              	.LM77:
 1037              	.LFBB16:
 1038 0000 80B5     	 push {r7,lr}
 1039 0002 00AF     	 add r7,sp,#0
 488:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 1041              	.LM78:
 1042 0004 034B     	 ldr r3,.L61
 1043 0006 1B68     	 ldr r3,[r3]
 1044 0008 DB0F     	 lsr r3,r3,#31
 1045 000a DBB2     	 uxtb r3,r3
 489:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1047              	.LM79:
 1048 000c 181C     	 mov r0,r3
 1049 000e BD46     	 mov sp,r7
 1050              	 
 1051 0010 80BD     	 pop {r7,pc}
 1052              	.L62:
 1053 0012 C046     	 .align 2
 1054              	.L61:
 1055 0014 38000140 	 .word 1073807416
 1057              	.Lscope16:
 1059              	 .stabd 78,0,0
 1060              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 1061              	 .align 2
 1063              	 .global XMC_SCU_GetTemperature
 1064              	 .code 16
 1065              	 .thumb_func
 1067              	XMC_SCU_GetTemperature:
 1068              	 .stabd 46,0,0
 490:../Libraries/XMCLib/src/xmc1_scu.c **** 
 491:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 492:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 493:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1070              	.LM80:
 1071              	.LFBB17:
 1072 0000 80B5     	 push {r7,lr}
 1073 0002 82B0     	 sub sp,sp,#8
 1074 0004 00AF     	 add r7,sp,#0
 494:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 495:../Libraries/XMCLib/src/xmc1_scu.c **** 
 496:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 1076              	.LM81:
 1077 0006 054A     	 ldr r2,.L65
 1078 0008 4023     	 mov r3,#64
 1079 000a D35A     	 ldrh r3,[r2,r3]
 1080 000c 9BB2     	 uxth r3,r3
 1081 000e 7B60     	 str r3,[r7,#4]
 497:../Libraries/XMCLib/src/xmc1_scu.c **** 
 498:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 1083              	.LM82:
 1084 0010 7B68     	 ldr r3,[r7,#4]
 499:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1086              	.LM83:
 1087 0012 181C     	 mov r0,r3
 1088 0014 BD46     	 mov sp,r7
 1089 0016 02B0     	 add sp,sp,#8
 1090              	 
 1091 0018 80BD     	 pop {r7,pc}
 1092              	.L66:
 1093 001a C046     	 .align 2
 1094              	.L65:
 1095 001c 00100140 	 .word 1073811456
 1100              	.Lscope17:
 1102              	 .stabd 78,0,0
 1103              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 1104              	 .align 2
 1106              	 .global XMC_SCU_CalcTemperature
 1107              	 .code 16
 1108              	 .thumb_func
 1110              	XMC_SCU_CalcTemperature:
 1111              	 .stabd 46,0,0
 500:../Libraries/XMCLib/src/xmc1_scu.c **** 
 501:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 502:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 503:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1113              	.LM84:
 1114              	.LFBB18:
 1115 0000 80B5     	 push {r7,lr}
 1116 0002 00AF     	 add r7,sp,#0
 504:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 1118              	.LM85:
 1119 0004 8623     	 mov r3,#134
 1120 0006 5B00     	 lsl r3,r3,#1
 1121 0008 1B68     	 ldr r3,[r3]
 1122 000a 9847     	 blx r3
 1123 000c 031C     	 mov r3,r0
 505:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1125              	.LM86:
 1126 000e 181C     	 mov r0,r3
 1127 0010 BD46     	 mov sp,r7
 1128              	 
 1129 0012 80BD     	 pop {r7,pc}
 1131              	.Lscope18:
 1133              	 .stabd 78,0,0
 1134              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1135              	 .align 2
 1138              	 .global XMC_SCU_CLOCK_Init
 1139              	 .code 16
 1140              	 .thumb_func
 1142              	XMC_SCU_CLOCK_Init:
 1143              	 .stabd 46,0,0
 506:../Libraries/XMCLib/src/xmc1_scu.c **** 
 507:../Libraries/XMCLib/src/xmc1_scu.c **** 
 508:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 509:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 510:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1145              	.LM87:
 1146              	.LFBB19:
 1147 0000 80B5     	 push {r7,lr}
 1148 0002 82B0     	 sub sp,sp,#8
 1149 0004 00AF     	 add r7,sp,#0
 1150 0006 7860     	 str r0,[r7,#4]
 511:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 512:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1152              	.LM88:
 1153 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 513:../Libraries/XMCLib/src/xmc1_scu.c **** 
 514:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 515:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 516:../Libraries/XMCLib/src/xmc1_scu.c **** 
 517:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 518:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 519:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 520:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 521:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 522:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 523:../Libraries/XMCLib/src/xmc1_scu.c **** 
 524:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 525:../Libraries/XMCLib/src/xmc1_scu.c ****                                  config->oschp_mode;
 526:../Libraries/XMCLib/src/xmc1_scu.c **** 
 527:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Enable OSC_HP oscillator watchdog*/
 528:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
 529:../Libraries/XMCLib/src/xmc1_scu.c **** 
 530:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 531:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 532:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Restart OSC_HP oscillator watchdog */
 533:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 534:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDRES_Msk;
 535:../Libraries/XMCLib/src/xmc1_scu.c **** 
 536:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a few DCO2 cycles for the update of the clock detection result */
 537:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2500);
 538:../Libraries/XMCLib/src/xmc1_scu.c **** 
 539:../Libraries/XMCLib/src/xmc1_scu.c ****       /* check clock is ok */
 540:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 541:../Libraries/XMCLib/src/xmc1_scu.c ****     while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 542:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 543:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 544:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 545:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 546:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 547:../Libraries/XMCLib/src/xmc1_scu.c **** 
 548:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 549:../Libraries/XMCLib/src/xmc1_scu.c **** 
 550:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 551:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 552:../Libraries/XMCLib/src/xmc1_scu.c **** 
 553:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 554:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 555:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 1155              	.LM89:
 1156 000c 0C4A     	 ldr r2,.L70
 1157 000e 0C4B     	 ldr r3,.L70
 1158 0010 1B68     	 ldr r3,[r3]
 1159 0012 0C49     	 ldr r1,.L70+4
 1160 0014 1940     	 and r1,r3
 556:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1162              	.LM90:
 1163 0016 7B68     	 ldr r3,[r7,#4]
 1164 0018 9B68     	 ldr r3,[r3,#8]
 555:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1166              	.LM91:
 1167 001a 1943     	 orr r1,r3
 557:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1169              	.LM92:
 1170 001c 7B68     	 ldr r3,[r7,#4]
 1171 001e 5B68     	 ldr r3,[r3,#4]
 556:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1173              	.LM93:
 1174 0020 0B43     	 orr r3,r1
 555:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1176              	.LM94:
 1177 0022 1360     	 str r3,[r2]
 558:../Libraries/XMCLib/src/xmc1_scu.c **** 
 559:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 560:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1179              	.LM95:
 1180 0024 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 561:../Libraries/XMCLib/src/xmc1_scu.c **** 
 562:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 1182              	.LM96:
 1183 0028 7B68     	 ldr r3,[r7,#4]
 1184 002a 5B78     	 ldrb r3,[r3,#1]
 1185 002c 1A1C     	 mov r2,r3
 1186 002e 7B68     	 ldr r3,[r7,#4]
 1187 0030 1B78     	 ldrb r3,[r3]
 1188 0032 101C     	 mov r0,r2
 1189 0034 191C     	 mov r1,r3
 1190 0036 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 564:../Libraries/XMCLib/src/xmc1_scu.c **** 
 565:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1192              	.LM97:
 1193 003a BD46     	 mov sp,r7
 1194 003c 02B0     	 add sp,sp,#8
 1195              	 
 1196 003e 80BD     	 pop {r7,pc}
 1197              	.L71:
 1198              	 .align 2
 1199              	.L70:
 1200 0040 00030140 	 .word 1073808128
 1201 0044 FFFFF0FF 	 .word -983041
 1203              	.Lscope19:
 1205              	 .stabd 78,0,0
 1206              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 1207              	 .align 2
 1210              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 1211              	 .code 16
 1212              	 .thumb_func
 1214              	XMC_SCU_CLOCK_SetRtcClockSource:
 1215              	 .stabd 46,0,0
 566:../Libraries/XMCLib/src/xmc1_scu.c **** 
 567:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 568:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 569:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1217              	.LM98:
 1218              	.LFBB20:
 1219 0000 80B5     	 push {r7,lr}
 1220 0002 82B0     	 sub sp,sp,#8
 1221 0004 00AF     	 add r7,sp,#0
 1222 0006 7860     	 str r0,[r7,#4]
 570:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 571:../Libraries/XMCLib/src/xmc1_scu.c **** 
 572:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1224              	.LM99:
 1225 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 574:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 1227              	.LM100:
 1228 000c 064B     	 ldr r3,.L73
 1229 000e 064A     	 ldr r2,.L73
 1230 0010 1268     	 ldr r2,[r2]
 1231 0012 0649     	 ldr r1,.L73+4
 1232 0014 1140     	 and r1,r2
 1233 0016 7A68     	 ldr r2,[r7,#4]
 1234 0018 0A43     	 orr r2,r1
 1235 001a 1A60     	 str r2,[r3]
 575:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 576:../Libraries/XMCLib/src/xmc1_scu.c **** 
 577:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1237              	.LM101:
 1238 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 578:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1240              	.LM102:
 1241 0020 BD46     	 mov sp,r7
 1242 0022 02B0     	 add sp,sp,#8
 1243              	 
 1244 0024 80BD     	 pop {r7,pc}
 1245              	.L74:
 1246 0026 C046     	 .align 2
 1247              	.L73:
 1248 0028 00030140 	 .word 1073808128
 1249 002c FFFFF1FF 	 .word -917505
 1251              	.Lscope20:
 1253              	 .stabd 78,0,0
 1254              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 1255              	 .align 2
 1258              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 1259              	 .code 16
 1260              	 .thumb_func
 1262              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 1263              	 .stabd 46,0,0
 579:../Libraries/XMCLib/src/xmc1_scu.c **** 
 580:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 581:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 582:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1265              	.LM103:
 1266              	.LFBB21:
 1267 0000 80B5     	 push {r7,lr}
 1268 0002 82B0     	 sub sp,sp,#8
 1269 0004 00AF     	 add r7,sp,#0
 1270 0006 7860     	 str r0,[r7,#4]
 583:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1272              	.LM104:
 1273 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 584:../Libraries/XMCLib/src/xmc1_scu.c **** 
 585:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 1275              	.LM105:
 1276 000c 064B     	 ldr r3,.L76
 1277 000e 064A     	 ldr r2,.L76
 1278 0010 1268     	 ldr r2,[r2]
 1279 0012 0649     	 ldr r1,.L76+4
 1280 0014 1140     	 and r1,r2
 1281 0016 7A68     	 ldr r2,[r7,#4]
 1282 0018 0A43     	 orr r2,r1
 1283 001a 1A60     	 str r2,[r3]
 586:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 587:../Libraries/XMCLib/src/xmc1_scu.c **** 
 588:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1285              	.LM106:
 1286 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 589:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1288              	.LM107:
 1289 0020 BD46     	 mov sp,r7
 1290 0022 02B0     	 add sp,sp,#8
 1291              	 
 1292 0024 80BD     	 pop {r7,pc}
 1293              	.L77:
 1294 0026 C046     	 .align 2
 1295              	.L76:
 1296 0028 00030140 	 .word 1073808128
 1297 002c FFFFFEFF 	 .word -65537
 1299              	.Lscope21:
 1301              	 .stabd 78,0,0
 1302              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 1303              	 .align 2
 1306              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 1307              	 .code 16
 1308              	 .thumb_func
 1310              	XMC_SCU_CLOCK_GatePeripheralClock:
 1311              	 .stabd 46,0,0
 590:../Libraries/XMCLib/src/xmc1_scu.c **** 
 591:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 592:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 593:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1313              	.LM108:
 1314              	.LFBB22:
 1315 0000 80B5     	 push {r7,lr}
 1316 0002 82B0     	 sub sp,sp,#8
 1317 0004 00AF     	 add r7,sp,#0
 1318 0006 021C     	 mov r2,r0
 1319 0008 BB1D     	 add r3,r7,#6
 1320 000a 1A80     	 strh r2,[r3]
 594:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1322              	.LM109:
 1323 000c FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 595:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 1325              	.LM110:
 1326 0010 054B     	 ldr r3,.L79
 1327 0012 054A     	 ldr r2,.L79
 1328 0014 D168     	 ldr r1,[r2,#12]
 1329 0016 BA1D     	 add r2,r7,#6
 1330 0018 1288     	 ldrh r2,[r2]
 1331 001a 0A43     	 orr r2,r1
 1332 001c DA60     	 str r2,[r3,#12]
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1334              	.LM111:
 1335 001e FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 597:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1337              	.LM112:
 1338 0022 BD46     	 mov sp,r7
 1339 0024 02B0     	 add sp,sp,#8
 1340              	 
 1341 0026 80BD     	 pop {r7,pc}
 1342              	.L80:
 1343              	 .align 2
 1344              	.L79:
 1345 0028 00030140 	 .word 1073808128
 1347              	.Lscope22:
 1349              	 .stabd 78,0,0
 1350              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 1351              	 .align 2
 1354              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 1355              	 .code 16
 1356              	 .thumb_func
 1358              	XMC_SCU_CLOCK_UngatePeripheralClock:
 1359              	 .stabd 46,0,0
 598:../Libraries/XMCLib/src/xmc1_scu.c **** 
 599:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 600:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 601:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1361              	.LM113:
 1362              	.LFBB23:
 1363 0000 80B5     	 push {r7,lr}
 1364 0002 82B0     	 sub sp,sp,#8
 1365 0004 00AF     	 add r7,sp,#0
 1366 0006 021C     	 mov r2,r0
 1367 0008 BB1D     	 add r3,r7,#6
 1368 000a 1A80     	 strh r2,[r3]
 602:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1370              	.LM114:
 1371 000c FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 1373              	.LM115:
 1374 0010 094B     	 ldr r3,.L83
 1375 0012 094A     	 ldr r2,.L83
 1376 0014 1169     	 ldr r1,[r2,#16]
 1377 0016 BA1D     	 add r2,r7,#6
 1378 0018 1288     	 ldrh r2,[r2]
 1379 001a 0A43     	 orr r2,r1
 1380 001c 1A61     	 str r2,[r3,#16]
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1382              	.LM116:
 1383 001e C046     	 mov r8,r8
 1384              	.L82:
 1386              	.LM117:
 1387 0020 054B     	 ldr r3,.L83
 1388 0022 1A68     	 ldr r2,[r3]
 1389 0024 8023     	 mov r3,#128
 1390 0026 DB05     	 lsl r3,r3,#23
 1391 0028 1340     	 and r3,r2
 1392 002a F9D1     	 bne .L82
 605:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 606:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 607:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 608:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1394              	.LM118:
 1395 002c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 609:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1397              	.LM119:
 1398 0030 BD46     	 mov sp,r7
 1399 0032 02B0     	 add sp,sp,#8
 1400              	 
 1401 0034 80BD     	 pop {r7,pc}
 1402              	.L84:
 1403 0036 C046     	 .align 2
 1404              	.L83:
 1405 0038 00030140 	 .word 1073808128
 1407              	.Lscope23:
 1409              	 .stabd 78,0,0
 1410              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 1411              	 .align 2
 1414              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 1415              	 .code 16
 1416              	 .thumb_func
 1418              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 1419              	 .stabd 46,0,0
 610:../Libraries/XMCLib/src/xmc1_scu.c **** 
 611:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 612:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 613:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1421              	.LM120:
 1422              	.LFBB24:
 1423 0000 80B5     	 push {r7,lr}
 1424 0002 82B0     	 sub sp,sp,#8
 1425 0004 00AF     	 add r7,sp,#0
 1426 0006 021C     	 mov r2,r0
 1427 0008 BB1D     	 add r3,r7,#6
 1428 000a 1A80     	 strh r2,[r3]
 614:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 1430              	.LM121:
 1431 000c 054B     	 ldr r3,.L87
 1432 000e 9B68     	 ldr r3,[r3,#8]
 1433 0010 BA1D     	 add r2,r7,#6
 1434 0012 1288     	 ldrh r2,[r2]
 1435 0014 1340     	 and r3,r2
 1436 0016 5A1E     	 sub r2,r3,#1
 1437 0018 9341     	 sbc r3,r3,r2
 1438 001a DBB2     	 uxtb r3,r3
 615:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1440              	.LM122:
 1441 001c 181C     	 mov r0,r3
 1442 001e BD46     	 mov sp,r7
 1443 0020 02B0     	 add sp,sp,#8
 1444              	 
 1445 0022 80BD     	 pop {r7,pc}
 1446              	.L88:
 1447              	 .align 2
 1448              	.L87:
 1449 0024 00030140 	 .word 1073808128
 1451              	.Lscope24:
 1453              	 .stabd 78,0,0
 1454              	 .global __aeabi_uidiv
 1455              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1456              	 .align 2
 1459              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1460              	 .code 16
 1461              	 .thumb_func
 1463              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1464              	 .stabd 46,0,0
 616:../Libraries/XMCLib/src/xmc1_scu.c **** 
 617:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 618:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 619:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1466              	.LM123:
 1467              	.LFBB25:
 1468 0000 80B5     	 push {r7,lr}
 1469 0002 86B0     	 sub sp,sp,#24
 1470 0004 00AF     	 add r7,sp,#0
 1471 0006 7860     	 str r0,[r7,#4]
 620:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 621:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 623:../Libraries/XMCLib/src/xmc1_scu.c **** 
 624:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 625:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 626:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 627:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 630:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 631:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 632:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 633:../Libraries/XMCLib/src/xmc1_scu.c **** 
 634:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 635:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 636:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 637:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 638:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 639:../Libraries/XMCLib/src/xmc1_scu.c **** 
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 641:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 642:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 643:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 1473              	.LM124:
 1474 0008 FA23     	 mov r3,#250
 1475 000a D803     	 lsl r0,r3,#15
 1476 000c 7968     	 ldr r1,[r7,#4]
 1477 000e FFF7FEFF 	 bl __aeabi_uidiv
 1478 0012 031C     	 mov r3,r0
 1479 0014 7B61     	 str r3,[r7,#20]
 644:../Libraries/XMCLib/src/xmc1_scu.c **** 
 645:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 646:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 1481              	.LM125:
 1482 0016 7B69     	 ldr r3,[r7,#20]
 1483 0018 0A4A     	 ldr r2,.L91
 1484 001a 9342     	 cmp r3,r2
 1485 001c 01D9     	 bls .L90
 647:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 648:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 1487              	.LM126:
 1488 001e 094B     	 ldr r3,.L91
 1489 0020 7B61     	 str r3,[r7,#20]
 1490              	.L90:
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 650:../Libraries/XMCLib/src/xmc1_scu.c **** 
 651:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 1492              	.LM127:
 1493 0022 7B69     	 ldr r3,[r7,#20]
 1494 0024 1B0A     	 lsr r3,r3,#8
 1495 0026 3B61     	 str r3,[r7,#16]
 652:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 1497              	.LM128:
 1498 0028 7B69     	 ldr r3,[r7,#20]
 1499 002a FF22     	 mov r2,#255
 1500 002c 1340     	 and r3,r2
 1501 002e FB60     	 str r3,[r7,#12]
 653:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 654:../Libraries/XMCLib/src/xmc1_scu.c **** 
 655:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 1503              	.LM129:
 1504 0030 3A69     	 ldr r2,[r7,#16]
 1505 0032 FB68     	 ldr r3,[r7,#12]
 1506 0034 101C     	 mov r0,r2
 1507 0036 191C     	 mov r1,r3
 1508 0038 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 656:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1510              	.LM130:
 1511 003c BD46     	 mov sp,r7
 1512 003e 06B0     	 add sp,sp,#24
 1513              	 
 1514 0040 80BD     	 pop {r7,pc}
 1515              	.L92:
 1516 0042 C046     	 .align 2
 1517              	.L91:
 1518 0044 FFFF0000 	 .word 65535
 1525              	.Lscope25:
 1527              	 .stabd 78,0,0
 1528              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 1529              	 .align 2
 1533              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 1534              	 .code 16
 1535              	 .thumb_func
 1537              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 1538              	 .stabd 46,0,0
 657:../Libraries/XMCLib/src/xmc1_scu.c **** 
 658:../Libraries/XMCLib/src/xmc1_scu.c **** 
 659:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 660:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 661:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1540              	.LM131:
 1541              	.LFBB26:
 1542 0000 80B5     	 push {r7,lr}
 1543 0002 84B0     	 sub sp,sp,#16
 1544 0004 00AF     	 add r7,sp,#0
 1545 0006 7860     	 str r0,[r7,#4]
 1546 0008 3960     	 str r1,[r7]
 662:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 663:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 664:../Libraries/XMCLib/src/xmc1_scu.c **** 
 665:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1548              	.LM132:
 1549 000a FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 666:../Libraries/XMCLib/src/xmc1_scu.c **** 
 667:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 668:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 1551              	.LM133:
 1552 000e 214B     	 ldr r3,.L98
 1553 0010 1A68     	 ldr r2,[r3]
 1554 0012 FF23     	 mov r3,#255
 1555 0014 1B02     	 lsl r3,r3,#8
 1556 0016 1340     	 and r3,r2
 1557 0018 1B0A     	 lsr r3,r3,#8
 1558 001a FB60     	 str r3,[r7,#12]
 669:../Libraries/XMCLib/src/xmc1_scu.c **** 
 670:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 672:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 673:../Libraries/XMCLib/src/xmc1_scu.c **** 
 674:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 675:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 676:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 677:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 678:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1560              	.LM134:
 1561 001c 1D4B     	 ldr r3,.L98
 1562 001e 1D4A     	 ldr r2,.L98
 1563 0020 1268     	 ldr r2,[r2]
 1564 0022 1D49     	 ldr r1,.L98+4
 1565 0024 1140     	 and r1,r2
 1566 0026 3A68     	 ldr r2,[r7]
 1567 0028 0A43     	 orr r2,r1
 679:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 1569              	.LM135:
 1570 002a 1C49     	 ldr r1,.L98+8
 1571 002c 0A43     	 orr r2,r1
 678:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 1573              	.LM136:
 1574 002e 1A60     	 str r2,[r3]
 680:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 681:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 682:../Libraries/XMCLib/src/xmc1_scu.c **** 
 683:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1576              	.LM137:
 1577 0030 C046     	 mov r8,r8
 1578              	.L94:
 1580              	.LM138:
 1581 0032 184B     	 ldr r3,.L98
 1582 0034 1A68     	 ldr r2,[r3]
 1583 0036 8023     	 mov r3,#128
 1584 0038 DB05     	 lsl r3,r3,#23
 1585 003a 1340     	 and r3,r2
 1586 003c F9D1     	 bne .L94
 684:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 685:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 687:../Libraries/XMCLib/src/xmc1_scu.c **** 
 688:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 1588              	.LM139:
 1589 003e FA68     	 ldr r2,[r7,#12]
 1590 0040 7B68     	 ldr r3,[r7,#4]
 1591 0042 9A42     	 cmp r2,r3
 1592 0044 06D8     	 bhi .L95
 689:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 690:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 691:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 1594              	.LM140:
 1595 0046 FA68     	 ldr r2,[r7,#12]
 1596 0048 7B68     	 ldr r3,[r7,#4]
 1597 004a 101C     	 mov r0,r2
 1598 004c 191C     	 mov r1,r3
 1599 004e FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyDownScaling
 1600 0052 05E0     	 b .L96
 1601              	.L95:
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 693:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 695:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 696:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 1603              	.LM141:
 1604 0054 FA68     	 ldr r2,[r7,#12]
 1605 0056 7B68     	 ldr r3,[r7,#4]
 1606 0058 101C     	 mov r0,r2
 1607 005a 191C     	 mov r1,r3
 1608 005c FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyUpScaling
 1609              	.L96:
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 698:../Libraries/XMCLib/src/xmc1_scu.c **** 
 699:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1611              	.LM142:
 1612 0060 0C4B     	 ldr r3,.L98
 1613 0062 0C4A     	 ldr r2,.L98
 1614 0064 1268     	 ldr r2,[r2]
 1615 0066 0E49     	 ldr r1,.L98+12
 1616 0068 1140     	 and r1,r2
 700:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1618              	.LM143:
 1619 006a 7A68     	 ldr r2,[r7,#4]
 1620 006c 1202     	 lsl r2,r2,#8
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1622              	.LM144:
 1623 006e 0A43     	 orr r2,r1
 1625              	.LM145:
 1626 0070 0A49     	 ldr r1,.L98+8
 1627 0072 0A43     	 orr r2,r1
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1629              	.LM146:
 1630 0074 1A60     	 str r2,[r3]
 701:../Libraries/XMCLib/src/xmc1_scu.c **** 
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1632              	.LM147:
 1633 0076 C046     	 mov r8,r8
 1634              	.L97:
 1636              	.LM148:
 1637 0078 064B     	 ldr r3,.L98
 1638 007a 1A68     	 ldr r2,[r3]
 1639 007c 8023     	 mov r3,#128
 1640 007e DB05     	 lsl r3,r3,#23
 1641 0080 1340     	 and r3,r2
 1642 0082 F9D1     	 bne .L97
 703:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 704:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 705:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 706:../Libraries/XMCLib/src/xmc1_scu.c **** 
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1644              	.LM149:
 1645 0084 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 709:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 1647              	.LM150:
 1648 0088 FFF7FEFF 	 bl SystemCoreClockUpdate
 710:../Libraries/XMCLib/src/xmc1_scu.c **** 
 711:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1650              	.LM151:
 1651 008c BD46     	 mov sp,r7
 1652 008e 04B0     	 add sp,sp,#16
 1653              	 
 1654 0090 80BD     	 pop {r7,pc}
 1655              	.L99:
 1656 0092 C046     	 .align 2
 1657              	.L98:
 1658 0094 00030140 	 .word 1073808128
 1659 0098 00FF0FC0 	 .word -1072693504
 1660 009c 0000F03F 	 .word 1072693248
 1661 00a0 FF000FC0 	 .word -1072758529
 1666              	.Lscope26:
 1668              	 .stabd 78,0,0
 1669              	 .section .text.XMC_SCU_CLOCK_lFrequencyUpScaling,"ax",%progbits
 1670              	 .align 2
 1674              	 .code 16
 1675              	 .thumb_func
 1677              	XMC_SCU_CLOCK_lFrequencyUpScaling:
 1678              	 .stabd 46,0,0
 712:../Libraries/XMCLib/src/xmc1_scu.c **** 
 713:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 714:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 715:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1680              	.LM152:
 1681              	.LFBB27:
 1682 0000 80B5     	 push {r7,lr}
 1683 0002 82B0     	 sub sp,sp,#8
 1684 0004 00AF     	 add r7,sp,#0
 1685 0006 7860     	 str r0,[r7,#4]
 1686 0008 3960     	 str r1,[r7]
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 1688              	.LM153:
 1689 000a 14E0     	 b .L101
 1690              	.L103:
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 718:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 1692              	.LM154:
 1693 000c 7B68     	 ldr r3,[r7,#4]
 1694 000e 9B08     	 lsr r3,r3,#2
 1695 0010 7B60     	 str r3,[r7,#4]
 719:../Libraries/XMCLib/src/xmc1_scu.c **** 
 720:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1697              	.LM155:
 1698 0012 0D4B     	 ldr r3,.L104
 1699 0014 0C4A     	 ldr r2,.L104
 1700 0016 1268     	 ldr r2,[r2]
 1701 0018 0C49     	 ldr r1,.L104+4
 1702 001a 1140     	 and r1,r2
 721:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1704              	.LM156:
 1705 001c 7A68     	 ldr r2,[r7,#4]
 1706 001e 1202     	 lsl r2,r2,#8
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1708              	.LM157:
 1709 0020 0A43     	 orr r2,r1
 1711              	.LM158:
 1712 0022 0B49     	 ldr r1,.L104+8
 1713 0024 0A43     	 orr r2,r1
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1715              	.LM159:
 1716 0026 1A60     	 str r2,[r3]
 722:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 723:../Libraries/XMCLib/src/xmc1_scu.c **** 
 724:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1718              	.LM160:
 1719 0028 C046     	 mov r8,r8
 1720              	.L102:
 1722              	.LM161:
 1723 002a 074B     	 ldr r3,.L104
 1724 002c 1A68     	 ldr r2,[r3]
 1725 002e 8023     	 mov r3,#128
 1726 0030 DB05     	 lsl r3,r3,#23
 1727 0032 1340     	 and r3,r2
 1728 0034 F9D1     	 bne .L102
 1729              	.L101:
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1731              	.LM162:
 1732 0036 3B68     	 ldr r3,[r7]
 1733 0038 9A00     	 lsl r2,r3,#2
 1734 003a 7B68     	 ldr r3,[r7,#4]
 1735 003c 9A42     	 cmp r2,r3
 1736 003e E5D3     	 bcc .L103
 725:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 726:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 727:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 728:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 729:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1738              	.LM163:
 1739 0040 BD46     	 mov sp,r7
 1740 0042 02B0     	 add sp,sp,#8
 1741              	 
 1742 0044 80BD     	 pop {r7,pc}
 1743              	.L105:
 1744 0046 C046     	 .align 2
 1745              	.L104:
 1746 0048 00030140 	 .word 1073808128
 1747 004c FF000FC0 	 .word -1072758529
 1748 0050 0000F03F 	 .word 1072693248
 1750              	.Lscope27:
 1752              	 .stabd 78,0,0
 1753              	 .section .text.XMC_SCU_CLOCK_lFrequencyDownScaling,"ax",%progbits
 1754              	 .align 2
 1758              	 .code 16
 1759              	 .thumb_func
 1761              	XMC_SCU_CLOCK_lFrequencyDownScaling:
 1762              	 .stabd 46,0,0
 730:../Libraries/XMCLib/src/xmc1_scu.c **** 
 731:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 732:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 733:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1764              	.LM164:
 1765              	.LFBB28:
 1766 0000 80B5     	 push {r7,lr}
 1767 0002 82B0     	 sub sp,sp,#8
 1768 0004 00AF     	 add r7,sp,#0
 1769 0006 7860     	 str r0,[r7,#4]
 1770 0008 3960     	 str r1,[r7]
 734:../Libraries/XMCLib/src/xmc1_scu.c **** 
 735:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 1772              	.LM165:
 1773 000a 19E0     	 b .L107
 1774              	.L110:
 736:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 737:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 1776              	.LM166:
 1777 000c 7B68     	 ldr r3,[r7,#4]
 1778 000e 002B     	 cmp r3,#0
 1779 0010 01D1     	 bne .L108
 738:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 739:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 1781              	.LM167:
 1782 0012 0123     	 mov r3,#1
 1783 0014 7B60     	 str r3,[r7,#4]
 1784              	.L108:
 740:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 741:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 1786              	.LM168:
 1787 0016 7B68     	 ldr r3,[r7,#4]
 1788 0018 9B00     	 lsl r3,r3,#2
 1789 001a 7B60     	 str r3,[r7,#4]
 742:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1791              	.LM169:
 1792 001c 0C4B     	 ldr r3,.L111
 1793 001e 0C4A     	 ldr r2,.L111
 1794 0020 1268     	 ldr r2,[r2]
 1795 0022 0C49     	 ldr r1,.L111+4
 1796 0024 1140     	 and r1,r2
 743:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1798              	.LM170:
 1799 0026 7A68     	 ldr r2,[r7,#4]
 1800 0028 1202     	 lsl r2,r2,#8
 742:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1802              	.LM171:
 1803 002a 0A43     	 orr r2,r1
 1805              	.LM172:
 1806 002c 0A49     	 ldr r1,.L111+8
 1807 002e 0A43     	 orr r2,r1
 742:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1809              	.LM173:
 1810 0030 1A60     	 str r2,[r3]
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 745:../Libraries/XMCLib/src/xmc1_scu.c **** 
 746:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1812              	.LM174:
 1813 0032 C046     	 mov r8,r8
 1814              	.L109:
 1816              	.LM175:
 1817 0034 064B     	 ldr r3,.L111
 1818 0036 1A68     	 ldr r2,[r3]
 1819 0038 8023     	 mov r3,#128
 1820 003a DB05     	 lsl r3,r3,#23
 1821 003c 1340     	 and r3,r2
 1822 003e F9D1     	 bne .L109
 1823              	.L107:
 735:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1825              	.LM176:
 1826 0040 7B68     	 ldr r3,[r7,#4]
 1827 0042 9A00     	 lsl r2,r3,#2
 1828 0044 3B68     	 ldr r3,[r7]
 1829 0046 9A42     	 cmp r2,r3
 1830 0048 E0D3     	 bcc .L110
 747:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 748:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 750:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 751:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1832              	.LM177:
 1833 004a BD46     	 mov sp,r7
 1834 004c 02B0     	 add sp,sp,#8
 1835              	 
 1836 004e 80BD     	 pop {r7,pc}
 1837              	.L112:
 1838              	 .align 2
 1839              	.L111:
 1840 0050 00030140 	 .word 1073808128
 1841 0054 FF000FC0 	 .word -1072758529
 1842 0058 0000F03F 	 .word 1072693248
 1844              	.Lscope28:
 1846              	 .stabd 78,0,0
 1847              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1848              	 .align 2
 1850              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1851              	 .code 16
 1852              	 .thumb_func
 1854              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1855              	 .stabd 46,0,0
 752:../Libraries/XMCLib/src/xmc1_scu.c **** 
 753:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 754:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 755:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 756:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 757:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1857              	.LM178:
 1858              	.LFBB29:
 1859 0000 80B5     	 push {r7,lr}
 1860 0002 00AF     	 add r7,sp,#0
 758:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1862              	.LM179:
 1863 0004 024B     	 ldr r3,.L115
 1864 0006 1B68     	 ldr r3,[r3]
 759:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1866              	.LM180:
 1867 0008 181C     	 mov r0,r3
 1868 000a BD46     	 mov sp,r7
 1869              	 
 1870 000c 80BD     	 pop {r7,pc}
 1871              	.L116:
 1872 000e C046     	 .align 2
 1873              	.L115:
 1874 0010 00000000 	 .word SystemCoreClock
 1876              	.Lscope29:
 1878              	 .stabd 78,0,0
 1879              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1880              	 .align 2
 1882              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1883              	 .code 16
 1884              	 .thumb_func
 1886              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1887              	 .stabd 46,0,0
 760:../Libraries/XMCLib/src/xmc1_scu.c **** 
 761:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 762:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 763:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1889              	.LM181:
 1890              	.LFBB30:
 1891 0000 80B5     	 push {r7,lr}
 1892 0002 00AF     	 add r7,sp,#0
 764:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1894              	.LM182:
 1895 0004 064B     	 ldr r3,.L119
 1896 0006 1A68     	 ldr r2,[r3]
 1897 0008 064B     	 ldr r3,.L119+4
 1898 000a 1968     	 ldr r1,[r3]
 1899 000c 8023     	 mov r3,#128
 1900 000e 5B02     	 lsl r3,r3,#9
 1901 0010 0B40     	 and r3,r1
 1902 0012 1B0C     	 lsr r3,r3,#16
 1903 0014 9A40     	 lsl r2,r2,r3
 1904 0016 131C     	 mov r3,r2
 765:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1906              	.LM183:
 1907 0018 181C     	 mov r0,r3
 1908 001a BD46     	 mov sp,r7
 1909              	 
 1910 001c 80BD     	 pop {r7,pc}
 1911              	.L120:
 1912 001e C046     	 .align 2
 1913              	.L119:
 1914 0020 00000000 	 .word SystemCoreClock
 1915 0024 00030140 	 .word 1073808128
 1917              	.Lscope30:
 1919              	 .stabd 78,0,0
 1920              	 .global __aeabi_idiv
 1921              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1922              	 .align 2
 1925              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1926              	 .code 16
 1927              	 .thumb_func
 1929              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1930              	 .stabd 46,0,0
 766:../Libraries/XMCLib/src/xmc1_scu.c **** 
 767:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 768:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 769:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1932              	.LM184:
 1933              	.LFBB31:
 1934 0000 80B5     	 push {r7,lr}
 1935 0002 88B0     	 sub sp,sp,#32
 1936 0004 00AF     	 add r7,sp,#0
 1937 0006 7860     	 str r0,[r7,#4]
 770:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 771:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 772:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 773:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 774:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 775:../Libraries/XMCLib/src/xmc1_scu.c **** 
 776:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 1939              	.LM185:
 1940 0008 174B     	 ldr r3,.L122
 1941 000a 1B78     	 ldrb r3,[r3]
 1942 000c FB61     	 str r3,[r7,#28]
 777:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1944              	.LM186:
 1945 000e 174B     	 ldr r3,.L122+4
 1946 0010 1B78     	 ldrb r3,[r3]
 1947 0012 BB61     	 str r3,[r7,#24]
 778:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1949              	.LM187:
 1950 0014 164B     	 ldr r3,.L122+8
 1951 0016 1B78     	 ldrb r3,[r3]
 1952 0018 7B61     	 str r3,[r7,#20]
 779:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 1954              	.LM188:
 1955 001a 164B     	 ldr r3,.L122+12
 1956 001c 1B78     	 ldrb r3,[r3]
 1957 001e 3B61     	 str r3,[r7,#16]
 780:../Libraries/XMCLib/src/xmc1_scu.c **** 
 781:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 1959              	.LM189:
 1960 0020 FA69     	 ldr r2,[r7,#28]
 1961 0022 BB69     	 ldr r3,[r7,#24]
 1962 0024 D31A     	 sub r3,r2,r3
 1963 0026 7968     	 ldr r1,[r7,#4]
 1964 0028 7A69     	 ldr r2,[r7,#20]
 1965 002a 8A1A     	 sub r2,r1,r2
 1966 002c 5A43     	 mul r2,r3
 1967 002e 111C     	 mov r1,r2
 1968 0030 3A69     	 ldr r2,[r7,#16]
 1969 0032 7B69     	 ldr r3,[r7,#20]
 1970 0034 D31A     	 sub r3,r2,r3
 1971 0036 081C     	 mov r0,r1
 1972 0038 191C     	 mov r1,r3
 1973 003a FFF7FEFF 	 bl __aeabi_idiv
 1974 003e 031C     	 mov r3,r0
 1975 0040 1A1C     	 mov r2,r3
 1976 0042 BB69     	 ldr r3,[r7,#24]
 1977 0044 D318     	 add r3,r2,r3
 1978 0046 FB60     	 str r3,[r7,#12]
 782:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1980              	.LM190:
 1981 0048 FB68     	 ldr r3,[r7,#12]
 1982 004a 0F22     	 mov r2,#15
 1983 004c 1340     	 and r3,r2
 1984 004e FB60     	 str r3,[r7,#12]
 783:../Libraries/XMCLib/src/xmc1_scu.c **** 
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1986              	.LM191:
 1987 0050 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 785:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1989              	.LM192:
 1990 0054 084A     	 ldr r2,.L122+16
 1991 0056 FB68     	 ldr r3,[r7,#12]
 1992 0058 99B2     	 uxth r1,r3
 1993 005a 6C23     	 mov r3,#108
 1994 005c D152     	 strh r1,[r2,r3]
 786:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1996              	.LM193:
 1997 005e FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 787:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1999              	.LM194:
 2000 0062 BD46     	 mov sp,r7
 2001 0064 08B0     	 add sp,sp,#32
 2002              	 
 2003 0066 80BD     	 pop {r7,pc}
 2004              	.L123:
 2005              	 .align 2
 2006              	.L122:
 2007 0068 330F0010 	 .word 268439347
 2008 006c 320F0010 	 .word 268439346
 2009 0070 300F0010 	 .word 268439344
 2010 0074 310F0010 	 .word 268439345
 2011 0078 00100140 	 .word 1073811456
 2020              	.Lscope31:
 2022              	 .stabd 78,0,0
 2023              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 2024              	 .align 2
 2028              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 2029              	 .code 16
 2030              	 .thumb_func
 2032              	XMC_SCU_INTERRUPT_SetEventHandler:
 2033              	 .stabd 46,0,0
 788:../Libraries/XMCLib/src/xmc1_scu.c **** 
 789:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 790:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 791:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 792:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 793:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2035              	.LM195:
 2036              	.LFBB32:
 2037 0000 80B5     	 push {r7,lr}
 2038 0002 84B0     	 sub sp,sp,#16
 2039 0004 00AF     	 add r7,sp,#0
 2040 0006 7860     	 str r0,[r7,#4]
 2041 0008 3960     	 str r1,[r7]
 794:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 795:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 796:../Libraries/XMCLib/src/xmc1_scu.c **** 
 797:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 798:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 799:../Libraries/XMCLib/src/xmc1_scu.c **** 
 800:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2043              	.LM196:
 2044 000a 0023     	 mov r3,#0
 2045 000c FB60     	 str r3,[r7,#12]
 801:../Libraries/XMCLib/src/xmc1_scu.c **** 
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 2047              	.LM197:
 2048 000e 02E0     	 b .L125
 2049              	.L127:
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 804:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2051              	.LM198:
 2052 0010 FB68     	 ldr r3,[r7,#12]
 2053 0012 0133     	 add r3,r3,#1
 2054 0014 FB60     	 str r3,[r7,#12]
 2055              	.L125:
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2057              	.LM199:
 2058 0016 FB68     	 ldr r3,[r7,#12]
 2059 0018 7A68     	 ldr r2,[r7,#4]
 2060 001a DA40     	 lsr r2,r2,r3
 2061 001c 131C     	 mov r3,r2
 2062 001e 0122     	 mov r2,#1
 2063 0020 1340     	 and r3,r2
 2064 0022 02D1     	 bne .L126
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2066              	.LM200:
 2067 0024 FB68     	 ldr r3,[r7,#12]
 2068 0026 1F2B     	 cmp r3,#31
 2069 0028 F2D9     	 bls .L127
 2070              	.L126:
 805:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 806:../Libraries/XMCLib/src/xmc1_scu.c **** 
 807:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 2072              	.LM201:
 2073 002a FB68     	 ldr r3,[r7,#12]
 2074 002c 202B     	 cmp r3,#32
 2075 002e 04D1     	 bne .L128
 808:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 809:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 2077              	.LM202:
 2078 0030 0B23     	 mov r3,#11
 2079 0032 FB18     	 add r3,r7,r3
 2080 0034 0122     	 mov r2,#1
 2081 0036 1A70     	 strb r2,[r3]
 2082 0038 08E0     	 b .L129
 2083              	.L128:
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 811:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 812:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 813:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 2085              	.LM203:
 2086 003a 084B     	 ldr r3,.L131
 2087 003c FA68     	 ldr r2,[r7,#12]
 2088 003e 9200     	 lsl r2,r2,#2
 2089 0040 3968     	 ldr r1,[r7]
 2090 0042 D150     	 str r1,[r2,r3]
 814:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 2092              	.LM204:
 2093 0044 0B23     	 mov r3,#11
 2094 0046 FB18     	 add r3,r7,r3
 2095 0048 0022     	 mov r2,#0
 2096 004a 1A70     	 strb r2,[r3]
 2097              	.L129:
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 816:../Libraries/XMCLib/src/xmc1_scu.c **** 
 817:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 2099              	.LM205:
 2100 004c 0B23     	 mov r3,#11
 2101 004e FB18     	 add r3,r7,r3
 2102 0050 1B78     	 ldrb r3,[r3]
 818:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2104              	.LM206:
 2105 0052 181C     	 mov r0,r3
 2106 0054 BD46     	 mov sp,r7
 2107 0056 04B0     	 add sp,sp,#16
 2108              	 
 2109 0058 80BD     	 pop {r7,pc}
 2110              	.L132:
 2111 005a C046     	 .align 2
 2112              	.L131:
 2113 005c 00000000 	 .word event_handler_list
 2119              	.Lscope32:
 2121              	 .stabd 78,0,0
 2122              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 2123              	 .align 2
 2126              	 .global XMC_SCU_IRQHandler
 2127              	 .code 16
 2128              	 .thumb_func
 2130              	XMC_SCU_IRQHandler:
 2131              	 .stabd 46,0,0
 819:../Libraries/XMCLib/src/xmc1_scu.c **** 
 820:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 821:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 822:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 823:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 824:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2133              	.LM207:
 2134              	.LFBB33:
 2135 0000 80B5     	 push {r7,lr}
 2136 0002 86B0     	 sub sp,sp,#24
 2137 0004 00AF     	 add r7,sp,#0
 2138 0006 7860     	 str r0,[r7,#4]
 825:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 826:../Libraries/XMCLib/src/xmc1_scu.c **** 
 827:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 828:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 829:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 830:../Libraries/XMCLib/src/xmc1_scu.c **** 
 831:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2140              	.LM208:
 2141 0008 0023     	 mov r3,#0
 2142 000a 7B61     	 str r3,[r7,#20]
 832:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 2144              	.LM209:
 2145 000c FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 2146 0010 011C     	 mov r1,r0
 2147 0012 184B     	 ldr r3,.L138
 2148 0014 7A68     	 ldr r2,[r7,#4]
 2149 0016 9200     	 lsl r2,r2,#2
 2150 0018 D358     	 ldr r3,[r2,r3]
 2151 001a 0B40     	 and r3,r1
 2152 001c 3B61     	 str r3,[r7,#16]
 833:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 2154              	.LM210:
 2155 001e 3B69     	 ldr r3,[r7,#16]
 2156 0020 181C     	 mov r0,r3
 2157 0022 FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
 834:../Libraries/XMCLib/src/xmc1_scu.c **** 
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 2159              	.LM211:
 2160 0026 1BE0     	 b .L134
 2161              	.L137:
 836:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 837:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 2163              	.LM212:
 2164 0028 7B69     	 ldr r3,[r7,#20]
 2165 002a 3A69     	 ldr r2,[r7,#16]
 2166 002c DA40     	 lsr r2,r2,r3
 2167 002e 131C     	 mov r3,r2
 2168 0030 0122     	 mov r2,#1
 2169 0032 1340     	 and r3,r2
 2170 0034 11D0     	 beq .L135
 838:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 839:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 2172              	.LM213:
 2173 0036 7B69     	 ldr r3,[r7,#20]
 2174 0038 0122     	 mov r2,#1
 2175 003a 9A40     	 lsl r2,r2,r3
 2176 003c 131C     	 mov r3,r2
 2177 003e DA43     	 mvn r2,r3
 2178 0040 3B69     	 ldr r3,[r7,#16]
 2179 0042 1340     	 and r3,r2
 2180 0044 3B61     	 str r3,[r7,#16]
 840:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 2182              	.LM214:
 2183 0046 0C4B     	 ldr r3,.L138+4
 2184 0048 7A69     	 ldr r2,[r7,#20]
 2185 004a 9200     	 lsl r2,r2,#2
 2186 004c D358     	 ldr r3,[r2,r3]
 2187 004e FB60     	 str r3,[r7,#12]
 841:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 2189              	.LM215:
 2190 0050 FB68     	 ldr r3,[r7,#12]
 2191 0052 002B     	 cmp r3,#0
 2192 0054 01D0     	 beq .L135
 842:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 843:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 2194              	.LM216:
 2195 0056 FB68     	 ldr r3,[r7,#12]
 2196 0058 9847     	 blx r3
 2197              	.L135:
 844:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 845:../Libraries/XMCLib/src/xmc1_scu.c **** 
 846:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 847:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 848:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2199              	.LM217:
 2200 005a 7B69     	 ldr r3,[r7,#20]
 2201 005c 0133     	 add r3,r3,#1
 2202 005e 7B61     	 str r3,[r7,#20]
 2203              	.L134:
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2205              	.LM218:
 2206 0060 3B69     	 ldr r3,[r7,#16]
 2207 0062 002B     	 cmp r3,#0
 2208 0064 02D0     	 beq .L133
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2210              	.LM219:
 2211 0066 7B69     	 ldr r3,[r7,#20]
 2212 0068 1F2B     	 cmp r3,#31
 2213 006a DDD9     	 bls .L137
 2214              	.L133:
 849:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 850:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2216              	.LM220:
 2217 006c BD46     	 mov sp,r7
 2218 006e 06B0     	 add sp,sp,#24
 2219              	 
 2220 0070 80BD     	 pop {r7,pc}
 2221              	.L139:
 2222 0072 C046     	 .align 2
 2223              	.L138:
 2224 0074 00000000 	 .word event_masks
 2225 0078 00000000 	 .word event_handler_list
 2232              	.Lscope33:
 2234              	 .stabd 78,0,0
 2237              	 .text
 2239              	.Letext0:
 2240              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:234    .bss.event_handler_list:00000000 $d
    {standard input}:237    .bss.event_handler_list:00000000 event_handler_list
    {standard input}:240    .data.event_masks:00000000 $d
    {standard input}:243    .data.event_masks:00000000 event_masks
    {standard input}:248    .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:254    .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:324    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:331    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:357    .text.XMC_SCU_INTERRUPT_EnableEvent:0000001c $d
    {standard input}:363    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:370    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:397    .text.XMC_SCU_INTERRUPT_DisableEvent:0000001c $d
    {standard input}:403    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:410    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:436    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000001c $d
    {standard input}:442    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:448    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:474    .text.XMC_SCU_INTERUPT_GetEventStatus:00000018 $d
    {standard input}:483    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:490    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:516    .text.XMC_SCU_INTERRUPT_ClearEventStatus:0000001c $d
    {standard input}:522    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:528    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:548    .text.XMC_SCU_LockProtectedBits:00000010 $d
    {standard input}:554    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:560    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:591    .text.XMC_SCU_UnlockProtectedBits:0000001c $d
    {standard input}:597    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:604    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:713    .text.XMC_SCU_SupplyMonitorInit:00000084 $d
    {standard input}:724    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:731    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:788    .text.XMC_SCU_SetTempLowLimit:00000044 $d
    {standard input}:797    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:804    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:861    .text.XMC_SCU_SetTempHighLimit:00000044 $d
    {standard input}:870    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:878    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:909    .text.XMC_SCU_SetRawTempLimits:00000020 $d
    {standard input}:915    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:921    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:946    .text.XMC_SCU_StartTempMeasurement:00000018 $d
    {standard input}:952    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:958    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:983    .text.XMC_SCU_StopTempMeasurement:00000018 $d
    {standard input}:989    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:995    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:1021   .text.XMC_SCU_HighTemperature:0000001c $d
    {standard input}:1027   .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:1033   .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:1055   .text.XMC_SCU_LowTemperature:00000014 $d
    {standard input}:1061   .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:1067   .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:1095   .text.XMC_SCU_GetTemperature:0000001c $d
    {standard input}:1104   .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:1110   .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:1135   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1142   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1537   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1200   .text.XMC_SCU_CLOCK_Init:00000040 $d
    {standard input}:1207   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:1214   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:1248   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000028 $d
    {standard input}:1255   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:1262   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:1296   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000028 $d
    {standard input}:1303   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:1310   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:1345   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000028 $d
    {standard input}:1351   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:1358   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:1405   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000038 $d
    {standard input}:1411   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:1418   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:1449   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000024 $d
    {standard input}:1456   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1463   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1518   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000044 $d
    {standard input}:1529   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:1761   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 XMC_SCU_CLOCK_lFrequencyDownScaling
    {standard input}:1677   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 XMC_SCU_CLOCK_lFrequencyUpScaling
    {standard input}:1658   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000094 $d
    {standard input}:1670   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 $t
    {standard input}:1746   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000048 $d
    {standard input}:1754   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 $t
    {standard input}:1840   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000050 $d
    {standard input}:1848   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1854   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1874   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000010 $d
    {standard input}:1880   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1886   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1914   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000020 $d
    {standard input}:1922   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1929   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:2007   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000068 $d
    {standard input}:2024   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:2032   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:2113   .text.XMC_SCU_INTERRUPT_SetEventHandler:0000005c $d
    {standard input}:2123   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:2130   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:2224   .text.XMC_SCU_IRQHandler:00000074 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClockUpdate
SystemCoreClock
__aeabi_idiv
