   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "syscalls.c"
  16              	 .text
  17              	.Ltext0:
 197              	 .weak __dso_handle
 198              	 .section .bss.__dso_handle,"aw",%nobits
 199              	 .align 2
 202              	__dso_handle:
 203 0000 00000000 	 .space 4
 204              	 .section .text._sbrk,"ax",%progbits
 205              	 .align 2
 208              	 .global _sbrk
 209              	 .code 16
 210              	 .thumb_func
 212              	_sbrk:
 213              	 .stabd 46,0,0
   1:../Libraries/Newlib/syscalls.c **** /**************************************************************************************************
   2:../Libraries/Newlib/syscalls.c ****  * @file     syscalls.c
   3:../Libraries/Newlib/syscalls.c ****  * @brief    Newlib stubs
   4:../Libraries/Newlib/syscalls.c ****  * @version  V1.5
   5:../Libraries/Newlib/syscalls.c ****  * @date     09 Mar 2016
   6:../Libraries/Newlib/syscalls.c ****  *
   7:../Libraries/Newlib/syscalls.c ****  * @cond
   8:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
   9:../Libraries/Newlib/syscalls.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/Newlib/syscalls.c ****  * All rights reserved.
  11:../Libraries/Newlib/syscalls.c ****  *
  12:../Libraries/Newlib/syscalls.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/Newlib/syscalls.c ****  * following conditions are met:
  14:../Libraries/Newlib/syscalls.c ****  *
  15:../Libraries/Newlib/syscalls.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/Newlib/syscalls.c ****  * disclaimer.
  17:../Libraries/Newlib/syscalls.c ****  *
  18:../Libraries/Newlib/syscalls.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/Newlib/syscalls.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/Newlib/syscalls.c ****  *
  21:../Libraries/Newlib/syscalls.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/Newlib/syscalls.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/Newlib/syscalls.c ****  *
  24:../Libraries/Newlib/syscalls.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/Newlib/syscalls.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/Newlib/syscalls.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/Newlib/syscalls.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/Newlib/syscalls.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/Newlib/syscalls.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/Newlib/syscalls.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/Newlib/syscalls.c ****  *
  32:../Libraries/Newlib/syscalls.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/Newlib/syscalls.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
  35:../Libraries/Newlib/syscalls.c ****  *
  36:../Libraries/Newlib/syscalls.c ****  * *************************** Change history ********************************
  37:../Libraries/Newlib/syscalls.c ****  * V0.1                  : Initial version
  38:../Libraries/Newlib/syscalls.c ****  * V0.2                  : Label updates
  39:../Libraries/Newlib/syscalls.c ****  * V1.0                  : Made _sbrk device agnostic
  40:../Libraries/Newlib/syscalls.c ****  * V1.1                  : C++ support
  41:../Libraries/Newlib/syscalls.c ****  * V1.2                  : Restored compatibility with old project files
  42:../Libraries/Newlib/syscalls.c ****  * V1.3    Jan 2014, PKB : Encapsulating everything in this file for use only with GCC
  43:../Libraries/Newlib/syscalls.c ****  * V1.4 11 Dec 2015, JFT : Fix heap overflow
  44:../Libraries/Newlib/syscalls.c ****  * V1.5 09 Mar 2016, JFT : Add dso_handle to support destructors call at exit 
  45:../Libraries/Newlib/syscalls.c ****  * @endcond
  46:../Libraries/Newlib/syscalls.c ****  */
  47:../Libraries/Newlib/syscalls.c **** 
  48:../Libraries/Newlib/syscalls.c **** /*
  49:../Libraries/Newlib/syscalls.c ****  * This file contains stubs for standard C library functionality that must
  50:../Libraries/Newlib/syscalls.c ****  * typically be provided for the underlying platform.
  51:../Libraries/Newlib/syscalls.c ****  *
  52:../Libraries/Newlib/syscalls.c ****  */
  53:../Libraries/Newlib/syscalls.c **** #if defined ( __GNUC__ )
  54:../Libraries/Newlib/syscalls.c **** 
  55:../Libraries/Newlib/syscalls.c **** #include <stdint.h>
  56:../Libraries/Newlib/syscalls.c **** #include <errno.h>
  57:../Libraries/Newlib/syscalls.c **** #include <sys/types.h>
  58:../Libraries/Newlib/syscalls.c **** 
  59:../Libraries/Newlib/syscalls.c **** /* c++ destructor dynamic shared object needed if -fuse-cxa-atexit is used*/
  60:../Libraries/Newlib/syscalls.c **** void *__dso_handle __attribute__ ((weak));
  61:../Libraries/Newlib/syscalls.c **** 
  62:../Libraries/Newlib/syscalls.c **** // defined in linker script
  63:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_Start;
  64:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_End;
  65:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes)
  66:../Libraries/Newlib/syscalls.c **** {
 215              	.LM0:
 216              	.LFBB1:
 217 0000 80B5     	 push {r7,lr}
 218 0002 84B0     	 sub sp,sp,#16
 219 0004 00AF     	 add r7,sp,#0
 220 0006 7860     	 str r0,[r7,#4]
  67:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  68:../Libraries/Newlib/syscalls.c ****   caddr_t base;
  69:../Libraries/Newlib/syscalls.c **** 
  70:../Libraries/Newlib/syscalls.c ****   if (heap_ptr == NULL) {
 222              	.LM1:
 223 0008 144B     	 ldr r3,.L5
 224 000a 1B68     	 ldr r3,[r3]
 225 000c 002B     	 cmp r3,#0
 226 000e 02D1     	 bne .L2
  71:../Libraries/Newlib/syscalls.c ****     heap_ptr = (caddr_t)&Heap_Bank1_Start;
 228              	.LM2:
 229 0010 124B     	 ldr r3,.L5
 230 0012 134A     	 ldr r2,.L5+4
 231 0014 1A60     	 str r2,[r3]
 232              	.L2:
  72:../Libraries/Newlib/syscalls.c ****   }
  73:../Libraries/Newlib/syscalls.c **** 
  74:../Libraries/Newlib/syscalls.c ****   base = heap_ptr;
 234              	.LM3:
 235 0016 114B     	 ldr r3,.L5
 236 0018 1B68     	 ldr r3,[r3]
 237 001a FB60     	 str r3,[r7,#12]
  75:../Libraries/Newlib/syscalls.c **** 
  76:../Libraries/Newlib/syscalls.c ****   /* heap word alignment */
  77:../Libraries/Newlib/syscalls.c ****   nbytes = (nbytes + 3) & ~0x3U;
 239              	.LM4:
 240 001c 7B68     	 ldr r3,[r7,#4]
 241 001e 0333     	 add r3,r3,#3
 242 0020 0322     	 mov r2,#3
 243 0022 9343     	 bic r3,r2
 244 0024 7B60     	 str r3,[r7,#4]
  78:../Libraries/Newlib/syscalls.c ****   if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 246              	.LM5:
 247 0026 0D4B     	 ldr r3,.L5
 248 0028 1A68     	 ldr r2,[r3]
 249 002a 7B68     	 ldr r3,[r7,#4]
 250 002c D218     	 add r2,r2,r3
 251 002e 0D4B     	 ldr r3,.L5+8
 252 0030 9A42     	 cmp r2,r3
 253 0032 07D2     	 bcs .L3
  79:../Libraries/Newlib/syscalls.c ****   {
  80:../Libraries/Newlib/syscalls.c ****     heap_ptr += nbytes;
 255              	.LM6:
 256 0034 094B     	 ldr r3,.L5
 257 0036 1A68     	 ldr r2,[r3]
 258 0038 7B68     	 ldr r3,[r7,#4]
 259 003a D218     	 add r2,r2,r3
 260 003c 074B     	 ldr r3,.L5
 261 003e 1A60     	 str r2,[r3]
  81:../Libraries/Newlib/syscalls.c ****     return (base);
 263              	.LM7:
 264 0040 FB68     	 ldr r3,[r7,#12]
 265 0042 06E0     	 b .L4
 266              	.L3:
  82:../Libraries/Newlib/syscalls.c ****   }
  83:../Libraries/Newlib/syscalls.c ****   else
  84:../Libraries/Newlib/syscalls.c ****   {
  85:../Libraries/Newlib/syscalls.c ****     /* Heap overflow */
  86:../Libraries/Newlib/syscalls.c ****     errno = ENOMEM;
 268              	.LM8:
 269 0044 FFF7FEFF 	 bl __errno
 270 0048 031C     	 mov r3,r0
 271 004a 0C22     	 mov r2,#12
 272 004c 1A60     	 str r2,[r3]
  87:../Libraries/Newlib/syscalls.c ****     return ((caddr_t)-1);
 274              	.LM9:
 275 004e 0123     	 mov r3,#1
 276 0050 5B42     	 neg r3,r3
 277              	.L4:
  88:../Libraries/Newlib/syscalls.c ****   }
  89:../Libraries/Newlib/syscalls.c **** }
 279              	.LM10:
 280 0052 181C     	 mov r0,r3
 281 0054 BD46     	 mov sp,r7
 282 0056 04B0     	 add sp,sp,#16
 283              	 
 284 0058 80BD     	 pop {r7,pc}
 285              	.L6:
 286 005a C046     	 .align 2
 287              	.L5:
 288 005c 00000000 	 .word heap_ptr.4327
 289 0060 00000000 	 .word Heap_Bank1_Start
 290 0064 00000000 	 .word Heap_Bank1_End
 296              	.Lscope1:
 298              	 .stabd 78,0,0
 299              	 .section .text._init,"ax",%progbits
 300              	 .align 2
 302              	 .global _init
 303              	 .code 16
 304              	 .thumb_func
 306              	_init:
 307              	 .stabd 46,0,0
  90:../Libraries/Newlib/syscalls.c **** 
  91:../Libraries/Newlib/syscalls.c **** /* Init */
  92:../Libraries/Newlib/syscalls.c **** void _init(void)
  93:../Libraries/Newlib/syscalls.c **** {}
 309              	.LM11:
 310              	.LFBB2:
 311 0000 80B5     	 push {r7,lr}
 312 0002 00AF     	 add r7,sp,#0
 314              	.LM12:
 315 0004 BD46     	 mov sp,r7
 316              	 
 317 0006 80BD     	 pop {r7,pc}
 319              	.Lscope2:
 321              	 .stabd 78,0,0
 322              	 .section .bss.heap_ptr.4327,"aw",%nobits
 323              	 .align 2
 326              	heap_ptr.4327:
 327 0000 00000000 	 .space 4
 329              	 .text
 331              	.Letext0:
 332              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
    {standard input}:202    .bss.__dso_handle:00000000 __dso_handle
    {standard input}:199    .bss.__dso_handle:00000000 $d
    {standard input}:205    .text._sbrk:00000000 $t
    {standard input}:212    .text._sbrk:00000000 _sbrk
    {standard input}:288    .text._sbrk:0000005c $d
    {standard input}:326    .bss.heap_ptr.4327:00000000 heap_ptr.4327
    {standard input}:300    .text._init:00000000 $t
    {standard input}:306    .text._init:00000000 _init
    {standard input}:323    .bss.heap_ptr.4327:00000000 $d

UNDEFINED SYMBOLS
__errno
Heap_Bank1_Start
Heap_Bank1_End
