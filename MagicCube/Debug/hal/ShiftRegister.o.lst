   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "ShiftRegister.cpp"
  16              	 .text
  17              	.Ltext0:
 242              	 .section .text._ZN13ShiftRegisterC2EP13__AccessPoint,"ax",%progbits
 243              	 .align 2
 247              	 .global _ZN13ShiftRegisterC2EP13__AccessPoint
 248              	 .code 16
 249              	 .thumb_func
 251              	_ZN13ShiftRegisterC2EP13__AccessPoint:
 252              	 .stabd 46,0,0
   1:../hal/ShiftRegister.cpp **** /*
   2:../hal/ShiftRegister.cpp ****  * ShiftRegister.cpp
   3:../hal/ShiftRegister.cpp ****  *
   4:../hal/ShiftRegister.cpp ****  *  Created on: Dec 30, 2016
   5:../hal/ShiftRegister.cpp ****  *      Author: alex
   6:../hal/ShiftRegister.cpp ****  */
   7:../hal/ShiftRegister.cpp **** 
   8:../hal/ShiftRegister.cpp **** #include <hal/ShiftRegister.h>
   9:../hal/ShiftRegister.cpp **** 
  10:../hal/ShiftRegister.cpp **** ShiftRegister::ShiftRegister(AccessPoint* clk) : clk_(clk) {
 254              	.LM0:
 255              	.LFBB1:
 256 0000 80B5     	 push {r7,lr}
 257 0002 82B0     	 sub sp,sp,#8
 258 0004 00AF     	 add r7,sp,#0
 259 0006 7860     	 str r0,[r7,#4]
 260 0008 3960     	 str r1,[r7]
 261              	.LBB2:
 263              	.LM1:
 264 000a 7B68     	 ldr r3,[r7,#4]
 265 000c 044A     	 ldr r2,.L4
 266 000e 1A60     	 str r2,[r3]
 267 0010 7B68     	 ldr r3,[r7,#4]
 268 0012 3A68     	 ldr r2,[r7]
 269 0014 5A60     	 str r2,[r3,#4]
 270              	.LBE2:
  11:../hal/ShiftRegister.cpp **** }
 272              	.LM2:
 273 0016 7B68     	 ldr r3,[r7,#4]
 274 0018 181C     	 mov r0,r3
 275 001a BD46     	 mov sp,r7
 276 001c 02B0     	 add sp,sp,#8
 277              	 
 278 001e 80BD     	 pop {r7,pc}
 279              	.L5:
 280              	 .align 2
 281              	.L4:
 282 0020 08000000 	 .word _ZTV13ShiftRegister+8
 284              	.Lscope1:
 286              	 .stabd 78,0,0
 287              	 .global _ZN13ShiftRegisterC1EP13__AccessPoint
 288              	 .thumb_set _ZN13ShiftRegisterC1EP13__AccessPoint,_ZN13ShiftRegisterC2EP13__AccessPoint
 289              	 .section .text._ZN13ShiftRegisterC2EP13__AccessPointS1_,"ax",%progbits
 290              	 .align 2
 295              	 .global _ZN13ShiftRegisterC2EP13__AccessPointS1_
 296              	 .code 16
 297              	 .thumb_func
 299              	_ZN13ShiftRegisterC2EP13__AccessPointS1_:
 300              	 .stabd 46,0,0
  12:../hal/ShiftRegister.cpp **** 
  13:../hal/ShiftRegister.cpp **** ShiftRegister::ShiftRegister(AccessPoint* clk, AccessPoint* data) : clk_(clk), data_(data) {
 302              	.LM3:
 303              	.LFBB2:
 304 0000 80B5     	 push {r7,lr}
 305 0002 84B0     	 sub sp,sp,#16
 306 0004 00AF     	 add r7,sp,#0
 307 0006 F860     	 str r0,[r7,#12]
 308 0008 B960     	 str r1,[r7,#8]
 309 000a 7A60     	 str r2,[r7,#4]
 310              	.LBB3:
 312              	.LM4:
 313 000c FB68     	 ldr r3,[r7,#12]
 314 000e 064A     	 ldr r2,.L9
 315 0010 1A60     	 str r2,[r3]
 316 0012 FB68     	 ldr r3,[r7,#12]
 317 0014 BA68     	 ldr r2,[r7,#8]
 318 0016 5A60     	 str r2,[r3,#4]
 319 0018 FB68     	 ldr r3,[r7,#12]
 320 001a 7A68     	 ldr r2,[r7,#4]
 321 001c 9A60     	 str r2,[r3,#8]
 322              	.LBE3:
  14:../hal/ShiftRegister.cpp **** }
 324              	.LM5:
 325 001e FB68     	 ldr r3,[r7,#12]
 326 0020 181C     	 mov r0,r3
 327 0022 BD46     	 mov sp,r7
 328 0024 04B0     	 add sp,sp,#16
 329              	 
 330 0026 80BD     	 pop {r7,pc}
 331              	.L10:
 332              	 .align 2
 333              	.L9:
 334 0028 08000000 	 .word _ZTV13ShiftRegister+8
 336              	.Lscope2:
 338              	 .stabd 78,0,0
 339              	 .global _ZN13ShiftRegisterC1EP13__AccessPointS1_
 340              	 .thumb_set _ZN13ShiftRegisterC1EP13__AccessPointS1_,_ZN13ShiftRegisterC2EP13__AccessPointS1_
 341              	 .section .text._ZN13ShiftRegisterD2Ev,"ax",%progbits
 342              	 .align 2
 345              	 .global _ZN13ShiftRegisterD2Ev
 346              	 .code 16
 347              	 .thumb_func
 349              	_ZN13ShiftRegisterD2Ev:
 350              	 .stabd 46,0,0
  15:../hal/ShiftRegister.cpp **** 
  16:../hal/ShiftRegister.cpp **** ShiftRegister::~ShiftRegister() {
 352              	.LM6:
 353              	.LFBB3:
 354 0000 80B5     	 push {r7,lr}
 355 0002 82B0     	 sub sp,sp,#8
 356 0004 00AF     	 add r7,sp,#0
 357 0006 7860     	 str r0,[r7,#4]
 358              	.LBB4:
 360              	.LM7:
 361 0008 7B68     	 ldr r3,[r7,#4]
 362 000a 074A     	 ldr r2,.L15
 363 000c 1A60     	 str r2,[r3]
 364              	.LBE4:
  17:../hal/ShiftRegister.cpp **** }
 366              	.LM8:
 367 000e 0023     	 mov r3,#0
 368 0010 002B     	 cmp r3,#0
 369 0012 03D0     	 beq .L13
 371              	.LM9:
 372 0014 7B68     	 ldr r3,[r7,#4]
 373 0016 181C     	 mov r0,r3
 374 0018 FFF7FEFF 	 bl _ZdlPv
 375              	.L13:
 377              	.LM10:
 378 001c 7B68     	 ldr r3,[r7,#4]
 379 001e 181C     	 mov r0,r3
 380 0020 BD46     	 mov sp,r7
 381 0022 02B0     	 add sp,sp,#8
 382              	 
 383 0024 80BD     	 pop {r7,pc}
 384              	.L16:
 385 0026 C046     	 .align 2
 386              	.L15:
 387 0028 08000000 	 .word _ZTV13ShiftRegister+8
 389              	.Lscope3:
 391              	 .stabd 78,0,0
 392              	 .global _ZN13ShiftRegisterD1Ev
 393              	 .thumb_set _ZN13ShiftRegisterD1Ev,_ZN13ShiftRegisterD2Ev
 394              	 .section .text._ZN13ShiftRegisterD0Ev,"ax",%progbits
 395              	 .align 2
 398              	 .global _ZN13ShiftRegisterD0Ev
 399              	 .code 16
 400              	 .thumb_func
 402              	_ZN13ShiftRegisterD0Ev:
 403              	 .stabd 46,0,0
  16:../hal/ShiftRegister.cpp **** }
 405              	.LM11:
 406              	.LFBB4:
 407 0000 80B5     	 push {r7,lr}
 408 0002 82B0     	 sub sp,sp,#8
 409 0004 00AF     	 add r7,sp,#0
 410 0006 7860     	 str r0,[r7,#4]
 412              	.LM12:
 413 0008 7B68     	 ldr r3,[r7,#4]
 414 000a 181C     	 mov r0,r3
 415 000c FFF7FEFF 	 bl _ZN13ShiftRegisterD2Ev
 416 0010 7B68     	 ldr r3,[r7,#4]
 417 0012 181C     	 mov r0,r3
 418 0014 FFF7FEFF 	 bl _ZdlPv
 419 0018 7B68     	 ldr r3,[r7,#4]
 420 001a 181C     	 mov r0,r3
 421 001c BD46     	 mov sp,r7
 422 001e 02B0     	 add sp,sp,#8
 423              	 
 424 0020 80BD     	 pop {r7,pc}
 426              	.Lscope4:
 428              	 .stabd 78,0,0
 429 0022 C046     	 .section .text._ZN13ShiftRegister4pushEh,"ax",%progbits
 430              	 .align 2
 434              	 .global _ZN13ShiftRegister4pushEh
 435              	 .code 16
 436              	 .thumb_func
 438              	_ZN13ShiftRegister4pushEh:
 439              	 .stabd 46,0,0
  18:../hal/ShiftRegister.cpp **** 
  19:../hal/ShiftRegister.cpp **** void ShiftRegister::push(uint8_t value){
 441              	.LM13:
 442              	.LFBB5:
 443 0000 80B5     	 push {r7,lr}
 444 0002 84B0     	 sub sp,sp,#16
 445 0004 00AF     	 add r7,sp,#0
 446 0006 7860     	 str r0,[r7,#4]
 447 0008 0A1C     	 mov r2,r1
 448 000a FB1C     	 add r3,r7,#3
 449 000c 1A70     	 strb r2,[r3]
 450              	.LBB5:
 451              	.LBB6:
  20:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 453              	.LM14:
 454 000e 0023     	 mov r3,#0
 455 0010 FB60     	 str r3,[r7,#12]
 456 0012 14E0     	 b .L21
 457              	.L22:
  21:../hal/ShiftRegister.cpp **** 		push(((value >> i) & 0x01) == 0);
 459              	.LM15:
 460 0014 7B68     	 ldr r3,[r7,#4]
 461 0016 1B68     	 ldr r3,[r3]
 462 0018 0C33     	 add r3,r3,#12
 463 001a 1B68     	 ldr r3,[r3]
 464 001c FA1C     	 add r2,r7,#3
 465 001e 1178     	 ldrb r1,[r2]
 466 0020 FA68     	 ldr r2,[r7,#12]
 467 0022 1141     	 asr r1,r1,r2
 468 0024 0A1C     	 mov r2,r1
 469 0026 0121     	 mov r1,#1
 470 0028 0A40     	 and r2,r1
 471 002a 5142     	 neg r1,r2
 472 002c 4A41     	 adc r2,r2,r1
 473 002e D2B2     	 uxtb r2,r2
 474 0030 7968     	 ldr r1,[r7,#4]
 475 0032 081C     	 mov r0,r1
 476 0034 111C     	 mov r1,r2
 477 0036 9847     	 blx r3
  20:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 479              	.LM16:
 480 0038 FB68     	 ldr r3,[r7,#12]
 481 003a 0133     	 add r3,r3,#1
 482 003c FB60     	 str r3,[r7,#12]
 483              	.L21:
  20:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 485              	.LM17:
 486 003e FB68     	 ldr r3,[r7,#12]
 487 0040 072B     	 cmp r3,#7
 488 0042 E7DD     	 ble .L22
 489              	.LBE6:
 490              	.LBE5:
  22:../hal/ShiftRegister.cpp **** 	}
  23:../hal/ShiftRegister.cpp **** }
 492              	.LM18:
 493 0044 BD46     	 mov sp,r7
 494 0046 04B0     	 add sp,sp,#16
 495              	 
 496 0048 80BD     	 pop {r7,pc}
 501              	.Lscope5:
 503              	 .stabd 78,0,0
 504 004a C046     	 .section .text._ZN13ShiftRegister4pushEb,"ax",%progbits
 505              	 .align 2
 509              	 .global _ZN13ShiftRegister4pushEb
 510              	 .code 16
 511              	 .thumb_func
 513              	_ZN13ShiftRegister4pushEb:
 514              	 .stabd 46,0,0
  24:../hal/ShiftRegister.cpp **** 
  25:../hal/ShiftRegister.cpp **** void ShiftRegister::push(bool value){
 516              	.LM19:
 517              	.LFBB6:
 518 0000 80B5     	 push {r7,lr}
 519 0002 82B0     	 sub sp,sp,#8
 520 0004 00AF     	 add r7,sp,#0
 521 0006 7860     	 str r0,[r7,#4]
 522 0008 0A1C     	 mov r2,r1
 523 000a FB1C     	 add r3,r7,#3
 524 000c 1A70     	 strb r2,[r3]
  26:../hal/ShiftRegister.cpp **** 	if(value){
 526              	.LM20:
 527 000e FB1C     	 add r3,r7,#3
 528 0010 1B78     	 ldrb r3,[r3]
 529 0012 002B     	 cmp r3,#0
 530 0014 0FD0     	 beq .L24
  27:../hal/ShiftRegister.cpp **** 		SET_BIT(*data_->port, data_->pin);
 532              	.LM21:
 533 0016 7B68     	 ldr r3,[r7,#4]
 534 0018 9B68     	 ldr r3,[r3,#8]
 535 001a 1B68     	 ldr r3,[r3]
 536 001c 7A68     	 ldr r2,[r7,#4]
 537 001e 9268     	 ldr r2,[r2,#8]
 538 0020 1268     	 ldr r2,[r2]
 539 0022 1168     	 ldr r1,[r2]
 540 0024 7A68     	 ldr r2,[r7,#4]
 541 0026 9268     	 ldr r2,[r2,#8]
 542 0028 5268     	 ldr r2,[r2,#4]
 543 002a 101C     	 mov r0,r2
 544 002c 0122     	 mov r2,#1
 545 002e 8240     	 lsl r2,r2,r0
 546 0030 0A43     	 orr r2,r1
 547 0032 1A60     	 str r2,[r3]
 548 0034 0FE0     	 b .L23
 549              	.L24:
  28:../hal/ShiftRegister.cpp **** 	} else {
  29:../hal/ShiftRegister.cpp **** 		CLR_BIT(*data_->port, data_->pin);
 551              	.LM22:
 552 0036 7B68     	 ldr r3,[r7,#4]
 553 0038 9B68     	 ldr r3,[r3,#8]
 554 003a 1B68     	 ldr r3,[r3]
 555 003c 7A68     	 ldr r2,[r7,#4]
 556 003e 9268     	 ldr r2,[r2,#8]
 557 0040 1268     	 ldr r2,[r2]
 558 0042 1168     	 ldr r1,[r2]
 559 0044 7A68     	 ldr r2,[r7,#4]
 560 0046 9268     	 ldr r2,[r2,#8]
 561 0048 5268     	 ldr r2,[r2,#4]
 562 004a 101C     	 mov r0,r2
 563 004c 0122     	 mov r2,#1
 564 004e 8240     	 lsl r2,r2,r0
 565 0050 D243     	 mvn r2,r2
 566 0052 0A40     	 and r2,r1
 567 0054 1A60     	 str r2,[r3]
 568              	.L23:
  30:../hal/ShiftRegister.cpp **** 	}
  31:../hal/ShiftRegister.cpp **** }
 570              	.LM23:
 571 0056 BD46     	 mov sp,r7
 572 0058 02B0     	 add sp,sp,#8
 573              	 
 574 005a 80BD     	 pop {r7,pc}
 576              	.Lscope6:
 578              	 .stabd 78,0,0
 579              	 .section .text._ZN13ShiftRegister5cpushEh,"ax",%progbits
 580              	 .align 2
 584              	 .global _ZN13ShiftRegister5cpushEh
 585              	 .code 16
 586              	 .thumb_func
 588              	_ZN13ShiftRegister5cpushEh:
 589              	 .stabd 46,0,0
  32:../hal/ShiftRegister.cpp **** 
  33:../hal/ShiftRegister.cpp **** void ShiftRegister::cpush(uint8_t value){
 591              	.LM24:
 592              	.LFBB7:
 593 0000 80B5     	 push {r7,lr}
 594 0002 84B0     	 sub sp,sp,#16
 595 0004 00AF     	 add r7,sp,#0
 596 0006 7860     	 str r0,[r7,#4]
 597 0008 0A1C     	 mov r2,r1
 598 000a FB1C     	 add r3,r7,#3
 599 000c 1A70     	 strb r2,[r3]
 600              	.LBB7:
 601              	.LBB8:
  34:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 603              	.LM25:
 604 000e 0023     	 mov r3,#0
 605 0010 FB60     	 str r3,[r7,#12]
 606 0012 14E0     	 b .L27
 607              	.L28:
  35:../hal/ShiftRegister.cpp **** 		cpush(((value >> i) & 0x01) == 0);
 609              	.LM26:
 610 0014 7B68     	 ldr r3,[r7,#4]
 611 0016 1B68     	 ldr r3,[r3]
 612 0018 1433     	 add r3,r3,#20
 613 001a 1B68     	 ldr r3,[r3]
 614 001c FA1C     	 add r2,r7,#3
 615 001e 1178     	 ldrb r1,[r2]
 616 0020 FA68     	 ldr r2,[r7,#12]
 617 0022 1141     	 asr r1,r1,r2
 618 0024 0A1C     	 mov r2,r1
 619 0026 0121     	 mov r1,#1
 620 0028 0A40     	 and r2,r1
 621 002a 5142     	 neg r1,r2
 622 002c 4A41     	 adc r2,r2,r1
 623 002e D2B2     	 uxtb r2,r2
 624 0030 7968     	 ldr r1,[r7,#4]
 625 0032 081C     	 mov r0,r1
 626 0034 111C     	 mov r1,r2
 627 0036 9847     	 blx r3
  34:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 629              	.LM27:
 630 0038 FB68     	 ldr r3,[r7,#12]
 631 003a 0133     	 add r3,r3,#1
 632 003c FB60     	 str r3,[r7,#12]
 633              	.L27:
  34:../hal/ShiftRegister.cpp **** 	for(int i = 0; i < 8; i++){
 635              	.LM28:
 636 003e FB68     	 ldr r3,[r7,#12]
 637 0040 072B     	 cmp r3,#7
 638 0042 E7DD     	 ble .L28
 639              	.LBE8:
 640              	.LBE7:
  36:../hal/ShiftRegister.cpp **** 	}
  37:../hal/ShiftRegister.cpp **** }
 642              	.LM29:
 643 0044 BD46     	 mov sp,r7
 644 0046 04B0     	 add sp,sp,#16
 645              	 
 646 0048 80BD     	 pop {r7,pc}
 651              	.Lscope7:
 653              	 .stabd 78,0,0
 654 004a C046     	 .section .text._ZN13ShiftRegister5cpushEb,"ax",%progbits
 655              	 .align 2
 659              	 .global _ZN13ShiftRegister5cpushEb
 660              	 .code 16
 661              	 .thumb_func
 663              	_ZN13ShiftRegister5cpushEb:
 664              	 .stabd 46,0,0
  38:../hal/ShiftRegister.cpp **** 
  39:../hal/ShiftRegister.cpp **** void ShiftRegister::cpush(bool value){
 666              	.LM30:
 667              	.LFBB8:
 668 0000 80B5     	 push {r7,lr}
 669 0002 82B0     	 sub sp,sp,#8
 670 0004 00AF     	 add r7,sp,#0
 671 0006 7860     	 str r0,[r7,#4]
 672 0008 0A1C     	 mov r2,r1
 673 000a FB1C     	 add r3,r7,#3
 674 000c 1A70     	 strb r2,[r3]
  40:../hal/ShiftRegister.cpp **** 	clkLow();
 676              	.LM31:
 677 000e 7B68     	 ldr r3,[r7,#4]
 678 0010 181C     	 mov r0,r3
 679 0012 FFF7FEFF 	 bl _ZN13ShiftRegister6clkLowEv
  41:../hal/ShiftRegister.cpp **** 	push(value);
 681              	.LM32:
 682 0016 7B68     	 ldr r3,[r7,#4]
 683 0018 1B68     	 ldr r3,[r3]
 684 001a 0C33     	 add r3,r3,#12
 685 001c 1B68     	 ldr r3,[r3]
 686 001e 7968     	 ldr r1,[r7,#4]
 687 0020 FA1C     	 add r2,r7,#3
 688 0022 1278     	 ldrb r2,[r2]
 689 0024 081C     	 mov r0,r1
 690 0026 111C     	 mov r1,r2
 691 0028 9847     	 blx r3
  42:../hal/ShiftRegister.cpp **** 	clkHigh();
 693              	.LM33:
 694 002a 7B68     	 ldr r3,[r7,#4]
 695 002c 181C     	 mov r0,r3
 696 002e FFF7FEFF 	 bl _ZN13ShiftRegister7clkHighEv
  43:../hal/ShiftRegister.cpp **** }
 698              	.LM34:
 699 0032 BD46     	 mov sp,r7
 700 0034 02B0     	 add sp,sp,#8
 701              	 
 702 0036 80BD     	 pop {r7,pc}
 704              	.Lscope8:
 706              	 .stabd 78,0,0
 707              	 .section .text._ZN13ShiftRegister7clkHighEv,"ax",%progbits
 708              	 .align 2
 711              	 .global _ZN13ShiftRegister7clkHighEv
 712              	 .code 16
 713              	 .thumb_func
 715              	_ZN13ShiftRegister7clkHighEv:
 716              	 .stabd 46,0,0
  44:../hal/ShiftRegister.cpp **** 
  45:../hal/ShiftRegister.cpp **** void ShiftRegister::clkHigh(void){
 718              	.LM35:
 719              	.LFBB9:
 720 0000 80B5     	 push {r7,lr}
 721 0002 82B0     	 sub sp,sp,#8
 722 0004 00AF     	 add r7,sp,#0
 723 0006 7860     	 str r0,[r7,#4]
  46:../hal/ShiftRegister.cpp **** 	SET_BIT(PORT1->OUT, 0);
 725              	.LM36:
 726 0008 134B     	 ldr r3,.L31
 727 000a 134A     	 ldr r2,.L31
 728 000c 1268     	 ldr r2,[r2]
 729 000e 0121     	 mov r1,#1
 730 0010 0A43     	 orr r2,r1
 731 0012 1A60     	 str r2,[r3]
  47:../hal/ShiftRegister.cpp **** 	delay(DELAY_TIME);
 733              	.LM37:
 734 0014 7B68     	 ldr r3,[r7,#4]
 735 0016 181C     	 mov r0,r3
 736 0018 0021     	 mov r1,#0
 737 001a FFF7FEFF 	 bl _ZN13ShiftRegister5delayEj
  48:../hal/ShiftRegister.cpp **** 	CLR_BIT(PORT1->OUT, 0);
 739              	.LM38:
 740 001e 0E4B     	 ldr r3,.L31
 741 0020 0D4A     	 ldr r2,.L31
 742 0022 1268     	 ldr r2,[r2]
 743 0024 0121     	 mov r1,#1
 744 0026 8A43     	 bic r2,r1
 745 0028 1A60     	 str r2,[r3]
  49:../hal/ShiftRegister.cpp **** 
  50:../hal/ShiftRegister.cpp **** 	SET_BIT(*clk_->port,clk_->pin);
 747              	.LM39:
 748 002a 7B68     	 ldr r3,[r7,#4]
 749 002c 5B68     	 ldr r3,[r3,#4]
 750 002e 1B68     	 ldr r3,[r3]
 751 0030 7A68     	 ldr r2,[r7,#4]
 752 0032 5268     	 ldr r2,[r2,#4]
 753 0034 1268     	 ldr r2,[r2]
 754 0036 1168     	 ldr r1,[r2]
 755 0038 7A68     	 ldr r2,[r7,#4]
 756 003a 5268     	 ldr r2,[r2,#4]
 757 003c 5268     	 ldr r2,[r2,#4]
 758 003e 101C     	 mov r0,r2
 759 0040 0122     	 mov r2,#1
 760 0042 8240     	 lsl r2,r2,r0
 761 0044 0A43     	 orr r2,r1
 762 0046 1A60     	 str r2,[r3]
  51:../hal/ShiftRegister.cpp **** 
  52:../hal/ShiftRegister.cpp **** 	delay(DELAY_TIME);
 764              	.LM40:
 765 0048 7B68     	 ldr r3,[r7,#4]
 766 004a 181C     	 mov r0,r3
 767 004c 0021     	 mov r1,#0
 768 004e FFF7FEFF 	 bl _ZN13ShiftRegister5delayEj
  53:../hal/ShiftRegister.cpp **** }
 770              	.LM41:
 771 0052 BD46     	 mov sp,r7
 772 0054 02B0     	 add sp,sp,#8
 773              	 
 774 0056 80BD     	 pop {r7,pc}
 775              	.L32:
 776              	 .align 2
 777              	.L31:
 778 0058 00010440 	 .word 1074004224
 780              	.Lscope9:
 782              	 .stabd 78,0,0
 783              	 .section .text._ZN13ShiftRegister6clkLowEv,"ax",%progbits
 784              	 .align 2
 787              	 .global _ZN13ShiftRegister6clkLowEv
 788              	 .code 16
 789              	 .thumb_func
 791              	_ZN13ShiftRegister6clkLowEv:
 792              	 .stabd 46,0,0
  54:../hal/ShiftRegister.cpp **** 
  55:../hal/ShiftRegister.cpp **** void ShiftRegister::clkLow(void){
 794              	.LM42:
 795              	.LFBB10:
 796 0000 80B5     	 push {r7,lr}
 797 0002 82B0     	 sub sp,sp,#8
 798 0004 00AF     	 add r7,sp,#0
 799 0006 7860     	 str r0,[r7,#4]
  56:../hal/ShiftRegister.cpp **** 	delay(DELAY_TIME);
 801              	.LM43:
 802 0008 7B68     	 ldr r3,[r7,#4]
 803 000a 181C     	 mov r0,r3
 804 000c 0021     	 mov r1,#0
 805 000e FFF7FEFF 	 bl _ZN13ShiftRegister5delayEj
  57:../hal/ShiftRegister.cpp **** 	CLR_BIT(*clk_->port,clk_->pin);
 807              	.LM44:
 808 0012 7B68     	 ldr r3,[r7,#4]
 809 0014 5B68     	 ldr r3,[r3,#4]
 810 0016 1B68     	 ldr r3,[r3]
 811 0018 7A68     	 ldr r2,[r7,#4]
 812 001a 5268     	 ldr r2,[r2,#4]
 813 001c 1268     	 ldr r2,[r2]
 814 001e 1168     	 ldr r1,[r2]
 815 0020 7A68     	 ldr r2,[r7,#4]
 816 0022 5268     	 ldr r2,[r2,#4]
 817 0024 5268     	 ldr r2,[r2,#4]
 818 0026 101C     	 mov r0,r2
 819 0028 0122     	 mov r2,#1
 820 002a 8240     	 lsl r2,r2,r0
 821 002c D243     	 mvn r2,r2
 822 002e 0A40     	 and r2,r1
 823 0030 1A60     	 str r2,[r3]
  58:../hal/ShiftRegister.cpp **** 	delay(DELAY_TIME);
 825              	.LM45:
 826 0032 7B68     	 ldr r3,[r7,#4]
 827 0034 181C     	 mov r0,r3
 828 0036 0021     	 mov r1,#0
 829 0038 FFF7FEFF 	 bl _ZN13ShiftRegister5delayEj
  59:../hal/ShiftRegister.cpp **** }
 831              	.LM46:
 832 003c BD46     	 mov sp,r7
 833 003e 02B0     	 add sp,sp,#8
 834              	 
 835 0040 80BD     	 pop {r7,pc}
 837              	.Lscope10:
 839              	 .stabd 78,0,0
 840 0042 C046     	 .section .text._ZN13ShiftRegister11getDataPortEv,"ax",%progbits
 841              	 .align 2
 844              	 .global _ZN13ShiftRegister11getDataPortEv
 845              	 .code 16
 846              	 .thumb_func
 848              	_ZN13ShiftRegister11getDataPortEv:
 849              	 .stabd 46,0,0
  60:../hal/ShiftRegister.cpp **** 
  61:../hal/ShiftRegister.cpp **** volatile uint32_t* ShiftRegister::getDataPort(void){
 851              	.LM47:
 852              	.LFBB11:
 853 0000 80B5     	 push {r7,lr}
 854 0002 82B0     	 sub sp,sp,#8
 855 0004 00AF     	 add r7,sp,#0
 856 0006 7860     	 str r0,[r7,#4]
  62:../hal/ShiftRegister.cpp **** 	return data_->port;
 858              	.LM48:
 859 0008 7B68     	 ldr r3,[r7,#4]
 860 000a 9B68     	 ldr r3,[r3,#8]
 861 000c 1B68     	 ldr r3,[r3]
  63:../hal/ShiftRegister.cpp **** }
 863              	.LM49:
 864 000e 181C     	 mov r0,r3
 865 0010 BD46     	 mov sp,r7
 866 0012 02B0     	 add sp,sp,#8
 867              	 
 868 0014 80BD     	 pop {r7,pc}
 870              	.Lscope11:
 872              	 .stabd 78,0,0
 873 0016 C046     	 .section .text._ZN13ShiftRegister10getDataPinEv,"ax",%progbits
 874              	 .align 2
 877              	 .global _ZN13ShiftRegister10getDataPinEv
 878              	 .code 16
 879              	 .thumb_func
 881              	_ZN13ShiftRegister10getDataPinEv:
 882              	 .stabd 46,0,0
  64:../hal/ShiftRegister.cpp **** 
  65:../hal/ShiftRegister.cpp **** uint32_t ShiftRegister::getDataPin(void){
 884              	.LM50:
 885              	.LFBB12:
 886 0000 80B5     	 push {r7,lr}
 887 0002 82B0     	 sub sp,sp,#8
 888 0004 00AF     	 add r7,sp,#0
 889 0006 7860     	 str r0,[r7,#4]
  66:../hal/ShiftRegister.cpp **** 	return data_->pin;
 891              	.LM51:
 892 0008 7B68     	 ldr r3,[r7,#4]
 893 000a 9B68     	 ldr r3,[r3,#8]
 894 000c 5B68     	 ldr r3,[r3,#4]
  67:../hal/ShiftRegister.cpp **** }
 896              	.LM52:
 897 000e 181C     	 mov r0,r3
 898 0010 BD46     	 mov sp,r7
 899 0012 02B0     	 add sp,sp,#8
 900              	 
 901 0014 80BD     	 pop {r7,pc}
 903              	.Lscope12:
 905              	 .stabd 78,0,0
 906 0016 C046     	 .section .text._ZN13ShiftRegister9delay_1msEv,"ax",%progbits
 907              	 .align 2
 910              	 .global _ZN13ShiftRegister9delay_1msEv
 911              	 .code 16
 912              	 .thumb_func
 914              	_ZN13ShiftRegister9delay_1msEv:
 915              	 .stabd 46,0,0
  68:../hal/ShiftRegister.cpp **** 
  69:../hal/ShiftRegister.cpp **** 
  70:../hal/ShiftRegister.cpp **** volatile void ShiftRegister::delay_1ms(void){
 917              	.LM53:
 918              	.LFBB13:
 919 0000 80B5     	 push {r7,lr}
 920 0002 84B0     	 sub sp,sp,#16
 921 0004 00AF     	 add r7,sp,#0
 922 0006 7860     	 str r0,[r7,#4]
 923              	.LBB9:
 924              	.LBB10:
  71:../hal/ShiftRegister.cpp **** 	for(int i= 0; i < DELAY_MS_LENGTH * 100; i++){
 926              	.LM54:
 927 0008 0023     	 mov r3,#0
 928 000a FB60     	 str r3,[r7,#12]
 929 000c 02E0     	 b .L39
 930              	.L40:
 932              	.LM55:
 933 000e FB68     	 ldr r3,[r7,#12]
 934 0010 0133     	 add r3,r3,#1
 935 0012 FB60     	 str r3,[r7,#12]
 936              	.L39:
 938              	.LM56:
 939 0014 FB68     	 ldr r3,[r7,#12]
 940 0016 034A     	 ldr r2,.L41
 941 0018 9342     	 cmp r3,r2
 942 001a F8DD     	 ble .L40
 943              	.LBE10:
 944              	.LBE9:
  72:../hal/ShiftRegister.cpp **** 	}
  73:../hal/ShiftRegister.cpp **** }
 946              	.LM57:
 947 001c BD46     	 mov sp,r7
 948 001e 04B0     	 add sp,sp,#16
 949              	 
 950 0020 80BD     	 pop {r7,pc}
 951              	.L42:
 952 0022 C046     	 .align 2
 953              	.L41:
 954 0024 FFD33000 	 .word 3199999
 959              	.Lscope13:
 961              	 .stabd 78,0,0
 962              	 .section .text._ZN13ShiftRegister5delayEj,"ax",%progbits
 963              	 .align 2
 967              	 .global _ZN13ShiftRegister5delayEj
 968              	 .code 16
 969              	 .thumb_func
 971              	_ZN13ShiftRegister5delayEj:
 972              	 .stabd 46,0,0
  74:../hal/ShiftRegister.cpp **** 
  75:../hal/ShiftRegister.cpp **** void ShiftRegister::delay(unsigned len)
  76:../hal/ShiftRegister.cpp **** {
 974              	.LM58:
 975              	.LFBB14:
 976 0000 80B5     	 push {r7,lr}
 977 0002 82B0     	 sub sp,sp,#8
 978 0004 00AF     	 add r7,sp,#0
 979 0006 7860     	 str r0,[r7,#4]
 980 0008 3960     	 str r1,[r7]
 981              	.L44:
  77:../hal/ShiftRegister.cpp **** 	while(len--);
 983              	.LM59:
 984 000a 3B68     	 ldr r3,[r7]
 985 000c 5A1E     	 sub r2,r3,#1
 986 000e 3A60     	 str r2,[r7]
 987 0010 5A1E     	 sub r2,r3,#1
 988 0012 9341     	 sbc r3,r3,r2
 989 0014 DBB2     	 uxtb r3,r3
 990 0016 002B     	 cmp r3,#0
 991 0018 F7D1     	 bne .L44
  78:../hal/ShiftRegister.cpp **** }
 993              	.LM60:
 994 001a BD46     	 mov sp,r7
 995 001c 02B0     	 add sp,sp,#8
 996              	 
 997 001e 80BD     	 pop {r7,pc}
 999              	.Lscope14:
 1001              	 .stabd 78,0,0
 1002              	 .global _ZTV13ShiftRegister
 1003              	 .section .rodata._ZTV13ShiftRegister,"a",%progbits
 1004              	 .align 3
 1007              	_ZTV13ShiftRegister:
 1008 0000 00000000 	 .word 0
 1009 0004 00000000 	 .word 0
 1010 0008 00000000 	 .word _ZN13ShiftRegisterD1Ev
 1011 000c 00000000 	 .word _ZN13ShiftRegisterD0Ev
 1012 0010 00000000 	 .word _ZN13ShiftRegister4pushEh
 1013 0014 00000000 	 .word _ZN13ShiftRegister4pushEb
 1014 0018 00000000 	 .word _ZN13ShiftRegister5cpushEh
 1015 001c 00000000 	 .word _ZN13ShiftRegister5cpushEb
 1016              	 .text
 1018              	.Letext0:
 1019              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 ShiftRegister.cpp
    {standard input}:243    .text._ZN13ShiftRegisterC2EP13__AccessPoint:00000000 $t
    {standard input}:251    .text._ZN13ShiftRegisterC2EP13__AccessPoint:00000000 _ZN13ShiftRegisterC2EP13__AccessPoint
    {standard input}:282    .text._ZN13ShiftRegisterC2EP13__AccessPoint:00000020 $d
    {standard input}:1007   .rodata._ZTV13ShiftRegister:00000000 _ZTV13ShiftRegister
    {standard input}:251    .text._ZN13ShiftRegisterC2EP13__AccessPoint:00000000 _ZN13ShiftRegisterC1EP13__AccessPoint
    {standard input}:290    .text._ZN13ShiftRegisterC2EP13__AccessPointS1_:00000000 $t
    {standard input}:299    .text._ZN13ShiftRegisterC2EP13__AccessPointS1_:00000000 _ZN13ShiftRegisterC2EP13__AccessPointS1_
    {standard input}:334    .text._ZN13ShiftRegisterC2EP13__AccessPointS1_:00000028 $d
    {standard input}:299    .text._ZN13ShiftRegisterC2EP13__AccessPointS1_:00000000 _ZN13ShiftRegisterC1EP13__AccessPointS1_
    {standard input}:342    .text._ZN13ShiftRegisterD2Ev:00000000 $t
    {standard input}:349    .text._ZN13ShiftRegisterD2Ev:00000000 _ZN13ShiftRegisterD2Ev
    {standard input}:387    .text._ZN13ShiftRegisterD2Ev:00000028 $d
    {standard input}:349    .text._ZN13ShiftRegisterD2Ev:00000000 _ZN13ShiftRegisterD1Ev
    {standard input}:395    .text._ZN13ShiftRegisterD0Ev:00000000 $t
    {standard input}:402    .text._ZN13ShiftRegisterD0Ev:00000000 _ZN13ShiftRegisterD0Ev
    {standard input}:430    .text._ZN13ShiftRegister4pushEh:00000000 $t
    {standard input}:438    .text._ZN13ShiftRegister4pushEh:00000000 _ZN13ShiftRegister4pushEh
    {standard input}:505    .text._ZN13ShiftRegister4pushEb:00000000 $t
    {standard input}:513    .text._ZN13ShiftRegister4pushEb:00000000 _ZN13ShiftRegister4pushEb
    {standard input}:580    .text._ZN13ShiftRegister5cpushEh:00000000 $t
    {standard input}:588    .text._ZN13ShiftRegister5cpushEh:00000000 _ZN13ShiftRegister5cpushEh
    {standard input}:655    .text._ZN13ShiftRegister5cpushEb:00000000 $t
    {standard input}:663    .text._ZN13ShiftRegister5cpushEb:00000000 _ZN13ShiftRegister5cpushEb
    {standard input}:791    .text._ZN13ShiftRegister6clkLowEv:00000000 _ZN13ShiftRegister6clkLowEv
    {standard input}:715    .text._ZN13ShiftRegister7clkHighEv:00000000 _ZN13ShiftRegister7clkHighEv
    {standard input}:708    .text._ZN13ShiftRegister7clkHighEv:00000000 $t
    {standard input}:971    .text._ZN13ShiftRegister5delayEj:00000000 _ZN13ShiftRegister5delayEj
    {standard input}:778    .text._ZN13ShiftRegister7clkHighEv:00000058 $d
    {standard input}:784    .text._ZN13ShiftRegister6clkLowEv:00000000 $t
    {standard input}:841    .text._ZN13ShiftRegister11getDataPortEv:00000000 $t
    {standard input}:848    .text._ZN13ShiftRegister11getDataPortEv:00000000 _ZN13ShiftRegister11getDataPortEv
    {standard input}:874    .text._ZN13ShiftRegister10getDataPinEv:00000000 $t
    {standard input}:881    .text._ZN13ShiftRegister10getDataPinEv:00000000 _ZN13ShiftRegister10getDataPinEv
    {standard input}:907    .text._ZN13ShiftRegister9delay_1msEv:00000000 $t
    {standard input}:914    .text._ZN13ShiftRegister9delay_1msEv:00000000 _ZN13ShiftRegister9delay_1msEv
    {standard input}:954    .text._ZN13ShiftRegister9delay_1msEv:00000024 $d
    {standard input}:963    .text._ZN13ShiftRegister5delayEj:00000000 $t
    {standard input}:1004   .rodata._ZTV13ShiftRegister:00000000 $d

UNDEFINED SYMBOLS
_ZdlPv
