   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "ShiftRegisterArray.cpp"
  16              	 .text
  17              	.Ltext0:
 411              	 .section .text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
 412              	 .align 2
 415              	 .weak _ZnwjPv
 416              	 .code 16
 417              	 .thumb_func
 419              	_ZnwjPv:
 420              	 .stabd 46,0,0
 422              	.Ltext1:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // The -*- C++ -*- dynamic memory management header.
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // Copyright (C) 1994-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // This file is part of GCC.
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** //
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // GCC is free software; you can redistribute it and/or modify
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // it under the terms of the GNU General Public License as published by
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // the Free Software Foundation; either version 3, or (at your option)
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // any later version.
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // 
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // GCC is distributed in the hope that it will be useful,
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // GNU General Public License for more details.
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // 
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // Under Section 7 of GPL version 3, you are granted additional
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // permissions described in the GCC Runtime Library Exception, version
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // 3.1, as published by the Free Software Foundation.
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // You should have received a copy of the GNU General Public License and
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // <http://www.gnu.org/licenses/>.
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** /** @file new
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  This is a Standard C++ Library header.
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  handling memory allocation errors; see
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  */
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #ifndef _NEW
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #define _NEW
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #pragma GCC system_header
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #include <bits/c++config.h>
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #include <exception>
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #pragma GCC visibility push(default)
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** extern "C++" {
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** namespace std 
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** {
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   /**
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *  @brief  Exception possibly thrown by @c new.
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *  @ingroup exceptions
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *  errors from the throwing forms of @c new.  */
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   class bad_alloc : public exception 
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   {
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   public:
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     bad_alloc() throw() { }
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // This declaration is not useless:
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual ~bad_alloc() throw();
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // See comment in eh_exception.cc.
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual const char* what() const throw();
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   };
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #if __cplusplus >= 201103L
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   class bad_array_new_length : public bad_alloc
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   {
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   public:
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     bad_array_new_length() throw() { };
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // This declaration is not useless:
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual ~bad_array_new_length() throw();
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // See comment in eh_exception.cc.
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual const char* what() const throw();
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   };
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #endif
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   // We throw this exception for GNU VLAs of negative length in all C++
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   // dialects, so declare it if we aren't in strict conformance mode.
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #if __cplusplus > 201103L || !defined(__STRICT_ANSI__)
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   class bad_array_length : public bad_alloc
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   {
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   public:
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     bad_array_length() throw() { };
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // This declaration is not useless:
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual ~bad_array_length() throw();
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     // See comment in eh_exception.cc.
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****     virtual const char* what() const throw();
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   };
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #endif
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   struct nothrow_t { };
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   extern const nothrow_t nothrow;
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   /** If you write your own error handler to be called by @c new, it must
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****    *  be of this type.  */
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   typedef void (*new_handler)();
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   /// Takes a replacement handler as the argument, returns the
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   /// previous handler.
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   new_handler set_new_handler(new_handler) throw();
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #if __cplusplus >= 201103L
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   /// Return the current new handler.
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   new_handler get_new_handler() noexcept;
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** #endif
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** } // namespace std
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** //@{
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** /** These are replaceable signatures:
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  - normal array new and delete (same)
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *    @c NULL on error)
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  - @c nothrow array new and delete (same)
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  Placement new and delete signatures (take a memory address argument,
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****  *  does nothing) may not be replaced by a user's program.
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** */
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new ****   __attribute__((__externally_visible__));
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** 
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** // Default placement versions of operator new.
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\new **** { return __p; }
 424              	.LM0:
 425              	.LFBB1:
 426 0000 80B5     	 push {r7,lr}
 427 0002 82B0     	 sub sp,sp,#8
 428 0004 00AF     	 add r7,sp,#0
 429 0006 7860     	 str r0,[r7,#4]
 430 0008 3960     	 str r1,[r7]
 432              	.LM1:
 433 000a 3B68     	 ldr r3,[r7]
 434 000c 181C     	 mov r0,r3
 435 000e BD46     	 mov sp,r7
 436 0010 02B0     	 add sp,sp,#8
 437              	 
 438 0012 80BD     	 pop {r7,pc}
 440              	.Lscope1:
 442              	 .stabd 78,0,0
 443              	 .section .text._ZN18ShiftRegisterArrayC2EP13__AccessPoint,"ax",%progbits
 444              	 .align 2
 448              	 .global _ZN18ShiftRegisterArrayC2EP13__AccessPoint
 449              	 .code 16
 450              	 .thumb_func
 452              	_ZN18ShiftRegisterArrayC2EP13__AccessPoint:
 453              	 .stabd 46,0,0
 455              	.Ltext2:
   1:../hal/ShiftRegisterArray.cpp **** /*
   2:../hal/ShiftRegisterArray.cpp ****  * ShiftRegisterArray.cpp
   3:../hal/ShiftRegisterArray.cpp ****  *
   4:../hal/ShiftRegisterArray.cpp ****  *  Created on: Dec 30, 2016
   5:../hal/ShiftRegisterArray.cpp ****  *      Author: alex
   6:../hal/ShiftRegisterArray.cpp ****  */
   7:../hal/ShiftRegisterArray.cpp **** 
   8:../hal/ShiftRegisterArray.cpp **** #include <hal/ShiftRegisterArray.h>
   9:../hal/ShiftRegisterArray.cpp **** 
  10:../hal/ShiftRegisterArray.cpp **** ShiftRegisterArray::ShiftRegisterArray(AccessPoint* clk) :
 457              	.LM2:
 458              	.LFBB2:
 459 0000 80B5     	 push {r7,lr}
 460 0002 82B0     	 sub sp,sp,#8
 461 0004 00AF     	 add r7,sp,#0
 462 0006 7860     	 str r0,[r7,#4]
 463 0008 3960     	 str r1,[r7]
 464              	.LBB2:
  11:../hal/ShiftRegisterArray.cpp **** 		ShiftRegister(clk) {
 466              	.LM3:
 467 000a 7A68     	 ldr r2,[r7,#4]
 468 000c 3B68     	 ldr r3,[r7]
 469 000e 101C     	 mov r0,r2
 470 0010 191C     	 mov r1,r3
 471 0012 FFF7FEFF 	 bl _ZN13ShiftRegisterC2EP13__AccessPoint
 472 0016 7B68     	 ldr r3,[r7,#4]
 473 0018 054A     	 ldr r2,.L6
 474 001a 1A60     	 str r2,[r3]
 475 001c 7B68     	 ldr r3,[r7,#4]
 476 001e 0C33     	 add r3,r3,#12
 477 0020 181C     	 mov r0,r3
 478 0022 FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC1Ev
 479              	.LBE2:
  12:../hal/ShiftRegisterArray.cpp **** }
 481              	.LM4:
 482 0026 7B68     	 ldr r3,[r7,#4]
 483 0028 181C     	 mov r0,r3
 484 002a BD46     	 mov sp,r7
 485 002c 02B0     	 add sp,sp,#8
 486              	 
 487 002e 80BD     	 pop {r7,pc}
 488              	.L7:
 489              	 .align 2
 490              	.L6:
 491 0030 08000000 	 .word _ZTV18ShiftRegisterArray+8
 493              	.Lscope2:
 495              	 .stabd 78,0,0
 496              	 .global _ZN18ShiftRegisterArrayC1EP13__AccessPoint
 497              	 .thumb_set _ZN18ShiftRegisterArrayC1EP13__AccessPoint,_ZN18ShiftRegisterArrayC2EP13__AccessPoint
 498              	 .section .text._ZN18ShiftRegisterArrayD2Ev,"ax",%progbits
 499              	 .align 2
 502              	 .global _ZN18ShiftRegisterArrayD2Ev
 503              	 .code 16
 504              	 .thumb_func
 506              	_ZN18ShiftRegisterArrayD2Ev:
 507              	 .stabd 46,0,0
  13:../hal/ShiftRegisterArray.cpp **** 
  14:../hal/ShiftRegisterArray.cpp **** ShiftRegisterArray::~ShiftRegisterArray() {
 509              	.LM5:
 510              	.LFBB3:
 511 0000 80B5     	 push {r7,lr}
 512 0002 82B0     	 sub sp,sp,#8
 513 0004 00AF     	 add r7,sp,#0
 514 0006 7860     	 str r0,[r7,#4]
 515              	.LBB3:
 517              	.LM6:
 518 0008 7B68     	 ldr r3,[r7,#4]
 519 000a 0B4A     	 ldr r2,.L12
 520 000c 1A60     	 str r2,[r3]
 521 000e 7B68     	 ldr r3,[r7,#4]
 522 0010 0C33     	 add r3,r3,#12
 523 0012 181C     	 mov r0,r3
 524 0014 FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EED1Ev
 525 0018 7B68     	 ldr r3,[r7,#4]
 526 001a 181C     	 mov r0,r3
 527 001c FFF7FEFF 	 bl _ZN13ShiftRegisterD2Ev
 528              	.LBE3:
  15:../hal/ShiftRegisterArray.cpp **** }
 530              	.LM7:
 531 0020 0023     	 mov r3,#0
 532 0022 002B     	 cmp r3,#0
 533 0024 03D0     	 beq .L10
 535              	.LM8:
 536 0026 7B68     	 ldr r3,[r7,#4]
 537 0028 181C     	 mov r0,r3
 538 002a FFF7FEFF 	 bl _ZdlPv
 539              	.L10:
 541              	.LM9:
 542 002e 7B68     	 ldr r3,[r7,#4]
 543 0030 181C     	 mov r0,r3
 544 0032 BD46     	 mov sp,r7
 545 0034 02B0     	 add sp,sp,#8
 546              	 
 547 0036 80BD     	 pop {r7,pc}
 548              	.L13:
 549              	 .align 2
 550              	.L12:
 551 0038 08000000 	 .word _ZTV18ShiftRegisterArray+8
 553              	.Lscope3:
 555              	 .stabd 78,0,0
 556              	 .global _ZN18ShiftRegisterArrayD1Ev
 557              	 .thumb_set _ZN18ShiftRegisterArrayD1Ev,_ZN18ShiftRegisterArrayD2Ev
 558              	 .section .text._ZN18ShiftRegisterArrayD0Ev,"ax",%progbits
 559              	 .align 2
 562              	 .global _ZN18ShiftRegisterArrayD0Ev
 563              	 .code 16
 564              	 .thumb_func
 566              	_ZN18ShiftRegisterArrayD0Ev:
 567              	 .stabd 46,0,0
  14:../hal/ShiftRegisterArray.cpp **** }
 569              	.LM10:
 570              	.LFBB4:
 571 0000 80B5     	 push {r7,lr}
 572 0002 82B0     	 sub sp,sp,#8
 573 0004 00AF     	 add r7,sp,#0
 574 0006 7860     	 str r0,[r7,#4]
 576              	.LM11:
 577 0008 7B68     	 ldr r3,[r7,#4]
 578 000a 181C     	 mov r0,r3
 579 000c FFF7FEFF 	 bl _ZN18ShiftRegisterArrayD2Ev
 580 0010 7B68     	 ldr r3,[r7,#4]
 581 0012 181C     	 mov r0,r3
 582 0014 FFF7FEFF 	 bl _ZdlPv
 583 0018 7B68     	 ldr r3,[r7,#4]
 584 001a 181C     	 mov r0,r3
 585 001c BD46     	 mov sp,r7
 586 001e 02B0     	 add sp,sp,#8
 587              	 
 588 0020 80BD     	 pop {r7,pc}
 590              	.Lscope4:
 592              	 .stabd 78,0,0
 593 0022 C046     	 .section .text._ZN18ShiftRegisterArray4pushEh,"ax",%progbits
 594              	 .align 2
 598              	 .global _ZN18ShiftRegisterArray4pushEh
 599              	 .code 16
 600              	 .thumb_func
 602              	_ZN18ShiftRegisterArray4pushEh:
 603              	 .stabd 46,0,0
  16:../hal/ShiftRegisterArray.cpp **** 
  17:../hal/ShiftRegisterArray.cpp **** void ShiftRegisterArray::push(uint8_t value) {
 605              	.LM12:
 606              	.LFBB5:
 607 0000 80B5     	 push {r7,lr}
 608 0002 84B0     	 sub sp,sp,#16
 609 0004 00AF     	 add r7,sp,#0
 610 0006 7860     	 str r0,[r7,#4]
 611 0008 0A1C     	 mov r2,r1
 612 000a FB1C     	 add r3,r7,#3
 613 000c 1A70     	 strb r2,[r3]
 614              	.LBB4:
 615              	.LBB5:
  18:../hal/ShiftRegisterArray.cpp **** 	for(int i = 0; i < 8; i++){
 617              	.LM13:
 618 000e 0023     	 mov r3,#0
 619 0010 FB60     	 str r3,[r7,#12]
 620 0012 36E0     	 b .L18
 621              	.L21:
 622              	.LBB6:
  19:../hal/ShiftRegisterArray.cpp **** 		clkLow();
 624              	.LM14:
 625 0014 7B68     	 ldr r3,[r7,#4]
 626 0016 181C     	 mov r0,r3
 627 0018 FFF7FEFF 	 bl _ZN13ShiftRegister6clkLowEv
 628              	.LBB7:
  20:../hal/ShiftRegisterArray.cpp **** 		for(unsigned int regNum = 0; regNum < registers_.size(); regNum++){
 630              	.LM15:
 631 001c 0023     	 mov r3,#0
 632 001e BB60     	 str r3,[r7,#8]
 633 0020 1BE0     	 b .L19
 634              	.L20:
  21:../hal/ShiftRegisterArray.cpp **** 			registers_[regNum]->push(((value >> i) & 0x01) == 0);
 636              	.LM16:
 637 0022 7B68     	 ldr r3,[r7,#4]
 638 0024 0C33     	 add r3,r3,#12
 639 0026 1A1C     	 mov r2,r3
 640 0028 BB68     	 ldr r3,[r7,#8]
 641 002a 101C     	 mov r0,r2
 642 002c 191C     	 mov r1,r3
 643 002e FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj
 644 0032 031C     	 mov r3,r0
 645 0034 1B68     	 ldr r3,[r3]
 646 0036 1A68     	 ldr r2,[r3]
 647 0038 0C32     	 add r2,r2,#12
 648 003a 1268     	 ldr r2,[r2]
 649 003c F91C     	 add r1,r7,#3
 650 003e 0878     	 ldrb r0,[r1]
 651 0040 F968     	 ldr r1,[r7,#12]
 652 0042 0841     	 asr r0,r0,r1
 653 0044 011C     	 mov r1,r0
 654 0046 0120     	 mov r0,#1
 655 0048 0140     	 and r1,r0
 656 004a 4842     	 neg r0,r1
 657 004c 4141     	 adc r1,r1,r0
 658 004e C9B2     	 uxtb r1,r1
 659 0050 181C     	 mov r0,r3
 660 0052 9047     	 blx r2
  20:../hal/ShiftRegisterArray.cpp **** 		for(unsigned int regNum = 0; regNum < registers_.size(); regNum++){
 662              	.LM17:
 663 0054 BB68     	 ldr r3,[r7,#8]
 664 0056 0133     	 add r3,r3,#1
 665 0058 BB60     	 str r3,[r7,#8]
 666              	.L19:
  20:../hal/ShiftRegisterArray.cpp **** 		for(unsigned int regNum = 0; regNum < registers_.size(); regNum++){
 668              	.LM18:
 669 005a 7B68     	 ldr r3,[r7,#4]
 670 005c 0C33     	 add r3,r3,#12
 671 005e 181C     	 mov r0,r3
 672 0060 FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 673 0064 021C     	 mov r2,r0
 674 0066 BB68     	 ldr r3,[r7,#8]
 675 0068 9342     	 cmp r3,r2
 676 006a 9B41     	 sbc r3,r3,r3
 677 006c 5B42     	 neg r3,r3
 678 006e DBB2     	 uxtb r3,r3
 679 0070 002B     	 cmp r3,#0
 680 0072 D6D1     	 bne .L20
 681              	.LBE7:
  22:../hal/ShiftRegisterArray.cpp **** 		}
  23:../hal/ShiftRegisterArray.cpp **** 		clkHigh();
 683              	.LM19:
 684 0074 7B68     	 ldr r3,[r7,#4]
 685 0076 181C     	 mov r0,r3
 686 0078 FFF7FEFF 	 bl _ZN13ShiftRegister7clkHighEv
 687              	.LBE6:
  18:../hal/ShiftRegisterArray.cpp **** 		clkLow();
 689              	.LM20:
 690 007c FB68     	 ldr r3,[r7,#12]
 691 007e 0133     	 add r3,r3,#1
 692 0080 FB60     	 str r3,[r7,#12]
 693              	.L18:
  18:../hal/ShiftRegisterArray.cpp **** 		clkLow();
 695              	.LM21:
 696 0082 FB68     	 ldr r3,[r7,#12]
 697 0084 072B     	 cmp r3,#7
 698 0086 C5DD     	 ble .L21
 699              	.LBE5:
 700              	.LBE4:
  24:../hal/ShiftRegisterArray.cpp **** 	}
  25:../hal/ShiftRegisterArray.cpp **** }
 702              	.LM22:
 703 0088 BD46     	 mov sp,r7
 704 008a 04B0     	 add sp,sp,#16
 705              	 
 706 008c 80BD     	 pop {r7,pc}
 714              	.Lscope5:
 716              	 .stabd 78,0,0
 717 008e C046     	 .section .text._ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister,"ax",%progbits
 718              	 .align 2
 722              	 .global _ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister
 723              	 .code 16
 724              	 .thumb_func
 726              	_ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister:
 727              	 .stabd 46,0,0
  26:../hal/ShiftRegisterArray.cpp **** 
  27:../hal/ShiftRegisterArray.cpp **** void ShiftRegisterArray::addShiftRegister(ShiftRegister* shiftRegister){
 729              	.LM23:
 730              	.LFBB6:
 731 0000 80B5     	 push {r7,lr}
 732 0002 82B0     	 sub sp,sp,#8
 733 0004 00AF     	 add r7,sp,#0
 734 0006 7860     	 str r0,[r7,#4]
 735 0008 3960     	 str r1,[r7]
  28:../hal/ShiftRegisterArray.cpp **** 	registers_.push_back(shiftRegister);
 737              	.LM24:
 738 000a 7B68     	 ldr r3,[r7,#4]
 739 000c 0C33     	 add r3,r3,#12
 740 000e 1A1C     	 mov r2,r3
 741 0010 3B1C     	 mov r3,r7
 742 0012 101C     	 mov r0,r2
 743 0014 191C     	 mov r1,r3
 744 0016 FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_
  29:../hal/ShiftRegisterArray.cpp **** }
 746              	.LM25:
 747 001a BD46     	 mov sp,r7
 748 001c 02B0     	 add sp,sp,#8
 749              	 
 750 001e 80BD     	 pop {r7,pc}
 752              	.Lscope6:
 754              	 .stabd 78,0,0
 755              	 .section .text._ZN18ShiftRegisterArray5beginEv,"ax",%progbits
 756              	 .align 2
 759              	 .global _ZN18ShiftRegisterArray5beginEv
 760              	 .code 16
 761              	 .thumb_func
 763              	_ZN18ShiftRegisterArray5beginEv:
 764              	 .stabd 46,0,0
  30:../hal/ShiftRegisterArray.cpp **** 
  31:../hal/ShiftRegisterArray.cpp **** void ShiftRegisterArray::begin(void){
 766              	.LM26:
 767              	.LFBB7:
 768 0000 80B5     	 push {r7,lr}
 769 0002 82B0     	 sub sp,sp,#8
 770 0004 00AF     	 add r7,sp,#0
 771 0006 7860     	 str r0,[r7,#4]
  32:../hal/ShiftRegisterArray.cpp **** 	clkLow();
 773              	.LM27:
 774 0008 7B68     	 ldr r3,[r7,#4]
 775 000a 181C     	 mov r0,r3
 776 000c FFF7FEFF 	 bl _ZN13ShiftRegister6clkLowEv
  33:../hal/ShiftRegisterArray.cpp **** }
 778              	.LM28:
 779 0010 BD46     	 mov sp,r7
 780 0012 02B0     	 add sp,sp,#8
 781              	 
 782 0014 80BD     	 pop {r7,pc}
 784              	.Lscope7:
 786              	 .stabd 78,0,0
 787 0016 C046     	 .section .text._ZN18ShiftRegisterArray3endEv,"ax",%progbits
 788              	 .align 2
 791              	 .global _ZN18ShiftRegisterArray3endEv
 792              	 .code 16
 793              	 .thumb_func
 795              	_ZN18ShiftRegisterArray3endEv:
 796              	 .stabd 46,0,0
  34:../hal/ShiftRegisterArray.cpp **** 
  35:../hal/ShiftRegisterArray.cpp **** void ShiftRegisterArray::end(void){
 798              	.LM29:
 799              	.LFBB8:
 800 0000 80B5     	 push {r7,lr}
 801 0002 82B0     	 sub sp,sp,#8
 802 0004 00AF     	 add r7,sp,#0
 803 0006 7860     	 str r0,[r7,#4]
  36:../hal/ShiftRegisterArray.cpp **** 	clkHigh();
 805              	.LM30:
 806 0008 7B68     	 ldr r3,[r7,#4]
 807 000a 181C     	 mov r0,r3
 808 000c FFF7FEFF 	 bl _ZN13ShiftRegister7clkHighEv
  37:../hal/ShiftRegisterArray.cpp **** }
 810              	.LM31:
 811 0010 BD46     	 mov sp,r7
 812 0012 02B0     	 add sp,sp,#8
 813              	 
 814 0014 80BD     	 pop {r7,pc}
 816              	.Lscope8:
 818              	 .stabd 78,0,0
 819 0016 C046     	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EEC5Ev,comdat
 820              	 .align 2
 823              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev
 824              	 .code 16
 825              	 .thumb_func
 827              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev:
 828              	 .stabd 46,0,0
 830              	.Ltext3:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Copyright (c) 1996
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****  */
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #include <bits/functexcept.h>
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #include <bits/concept_check.h>
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #include <initializer_list>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** {
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     struct _Vector_base
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     {
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        	pointer;
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       struct _Vector_impl 
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : public _Tp_alloc_type
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	pointer _M_start;
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	pointer _M_finish;
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	pointer _M_end_of_storage;
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_Vector_impl()
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	{ }
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	{ }
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	{ }
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	{
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       };
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     public:
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef _Alloc allocator_type;
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Tp_alloc_type&
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const _Tp_alloc_type&
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       allocator_type
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base()
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl() { }
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl(__a) { }
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(size_t __n)
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl()
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_create_storage(__n); }
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl(__a)
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_create_storage(__n); }
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl(__a)
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	else
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  {
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    _M_create_storage(__n);
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  }
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     public:
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Vector_impl _M_impl;
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       pointer
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_allocate(size_t __n)
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__p)
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     private:
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_create_storage(size_t __n)
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     };
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****   /**
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  individual elements in any order.
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  @ingroup sequences
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****    *  also provided as with C-style arrays.
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****   */
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     {
 216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Concept requirements.
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       
 221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     public:
 226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef _Tp					 value_type;
 227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_iterator;
 234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef size_t					 size_type;
 237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     protected:
 241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       using _Base::_M_allocate;
 242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       using _Base::_M_deallocate;
 243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       using _Base::_M_impl;
 244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     public:
 247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector()
 832              	.LM32:
 833              	.LFBB9:
 834 0000 80B5     	 push {r7,lr}
 835 0002 82B0     	 sub sp,sp,#8
 836 0004 00AF     	 add r7,sp,#0
 837 0006 7860     	 str r0,[r7,#4]
 838              	.LBB8:
 254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base() { }
 840              	.LM33:
 841 0008 7B68     	 ldr r3,[r7,#4]
 842 000a 181C     	 mov r0,r3
 843 000c FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev
 844              	.LBE8:
 845 0010 7B68     	 ldr r3,[r7,#4]
 846 0012 181C     	 mov r0,r3
 847 0014 BD46     	 mov sp,r7
 848 0016 02B0     	 add sp,sp,#8
 849              	 
 850 0018 80BD     	 pop {r7,pc}
 852              	.Lscope9:
 854              	 .stabd 78,0,0
 855              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC1Ev
 856              	 .thumb_set _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC1Ev,_ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev
 857 001a C046     	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EED5Ev,comdat
 858              	 .align 2
 861              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev
 862              	 .code 16
 863              	 .thumb_func
 865              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev:
 866              	 .stabd 46,0,0
 258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator object.
 262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       explicit
 264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__a) { }
 266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator.
 272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  constructed elements.
 275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       explicit
 277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__n, __a)
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_default_initialize(__n); }
 280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator.
 286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__n, __a)
 292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator.
 299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       explicit
 303:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__n, __a)
 306:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 308:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 309:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 310:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 313:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  but any extra memory in
 316:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 318:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(const vector& __x)
 319:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__x.size(),
 320:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { this->_M_impl._M_finish =
 322:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 324:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 325:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 326:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 327:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 328:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 329:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 330:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 335:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(vector&& __x) noexcept
 336:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(std::move(__x)) { }
 337:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 338:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 339:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__x.size(), __a)
 341:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { this->_M_impl._M_finish =
 342:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 344:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 345:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 346:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 347:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /// Move constructor with alternative allocator
 348:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 352:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  {
 354:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 355:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					  this->_M_impl._M_start,
 357:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 358:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    __rv.clear();
 359:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  }
 360:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 362:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 363:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 365:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator.
 366:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 367:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  initializer_list @a __l.
 369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 373:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _Base(__a)
 376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			    random_access_iterator_tag());
 379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 381:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 382:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 383:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __last  An input iterator.
 386:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __a  An allocator.
 387:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 388:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  [first,last).
 390:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 391:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 398:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 399:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator,
 400:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Base(__a)
 404:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 406:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
 407:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Base(__a)
 410:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
 411:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
 415:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 416:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 417:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 418:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  responsibility.
 422:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 423:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 868              	.LM34:
 869              	.LFBB10:
 870 0000 B0B5     	 push {r4,r5,r7,lr}
 871 0002 82B0     	 sub sp,sp,#8
 872 0004 00AF     	 add r7,sp,#0
 873 0006 7860     	 str r0,[r7,#4]
 874              	.LBB9:
 424:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 		      _M_get_Tp_allocator()); }
 876              	.LM35:
 877 0008 7B68     	 ldr r3,[r7,#4]
 878 000a 1D68     	 ldr r5,[r3]
 879 000c 7B68     	 ldr r3,[r7,#4]
 880 000e 5C68     	 ldr r4,[r3,#4]
 881 0010 7B68     	 ldr r3,[r7,#4]
 882 0012 181C     	 mov r0,r3
 883 0014 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 884 0018 031C     	 mov r3,r0
 424:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 886              	.LM36:
 887 001a 281C     	 mov r0,r5
 888 001c 211C     	 mov r1,r4
 889 001e 1A1C     	 mov r2,r3
 890 0020 FFF7FEFF 	 bl _ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E
 892              	.LM37:
 893 0024 7B68     	 ldr r3,[r7,#4]
 894 0026 181C     	 mov r0,r3
 895 0028 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev
 896              	.LBE9:
 897 002c 7B68     	 ldr r3,[r7,#4]
 898 002e 181C     	 mov r0,r3
 899 0030 BD46     	 mov sp,r7
 900 0032 02B0     	 add sp,sp,#8
 901              	 
 902 0034 B0BD     	 pop {r4,r5,r7,pc}
 904              	.Lscope10:
 906              	 .stabd 78,0,0
 907              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EED1Ev
 908              	 .thumb_set _ZNSt6vectorIP13ShiftRegisterSaIS1_EED1Ev,_ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev
 909 0036 C046     	 .section .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv,"axG",%progbits,_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv,comdat
 910              	 .align 2
 913              	 .weak _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 914              	 .code 16
 915              	 .thumb_func
 917              	_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv:
 918              	 .stabd 46,0,0
 426:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 427:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 428:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 431:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 435:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector&
 436:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       operator=(const vector& __x);
 437:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 438:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 439:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 440:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 443:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  if the allocators permit it).
 445:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 447:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector&
 448:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 450:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         constexpr bool __move_storage =
 451:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_move_assign(std::move(__x),
 454:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return *this;
 456:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 457:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 458:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 459:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 461:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 462:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  initializer list @a __l.
 464:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 465:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 469:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       vector&
 470:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 472:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return *this;
 474:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 475:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 476:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 477:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 478:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 482:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 487:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 488:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 491:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 492:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 493:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 494:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __last   An input iterator.
 495:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 496:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  range [__first,__last).
 498:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 499:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 503:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 504:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator,
 505:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
 507:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 510:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
 511:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
 512:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
 514:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
 518:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 519:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 520:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 521:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 522:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 524:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 525:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  initializer list @a __l.
 527:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 528:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 532:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 533:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 536:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 537:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       using _Base::get_allocator;
 539:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 540:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // iterators
 541:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 542:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element order.
 545:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 546:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
 547:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 550:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 551:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element order.
 554:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 555:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_iterator
 556:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 557:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 558:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 559:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 560:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element order.
 563:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 564:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
 565:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 568:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 569:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  ordinary element order.
 572:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 573:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_iterator
 574:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 575:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 576:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 577:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 578:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 579:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 580:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element order.
 581:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 582:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reverse_iterator
 583:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 584:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return reverse_iterator(end()); }
 585:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 586:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 587:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 588:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 589:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  reverse element order.
 590:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 591:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reverse_iterator
 592:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 593:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 594:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 595:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 596:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 597:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 598:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  in reverse element order.
 599:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 600:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reverse_iterator
 601:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 602:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return reverse_iterator(begin()); }
 603:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 604:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 605:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 606:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 607:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  is done in reverse element order.
 608:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 609:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reverse_iterator
 610:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 611:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 612:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 613:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 614:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 615:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 616:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 617:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element order.
 618:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 619:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_iterator
 620:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       cbegin() const noexcept
 621:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 622:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 623:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 624:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 625:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 626:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  ordinary element order.
 627:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 628:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_iterator
 629:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       cend() const noexcept
 630:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 631:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 632:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 633:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 635:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  reverse element order.
 636:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 637:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reverse_iterator
 638:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       crbegin() const noexcept
 639:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 640:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 641:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 642:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 643:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 644:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  is done in reverse element order.
 645:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 646:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reverse_iterator
 647:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       crend() const noexcept
 648:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 649:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 650:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 651:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // [23.2.4.2] capacity
 652:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 653:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       size_type
 654:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 920              	.LM38:
 921              	.LFBB11:
 922 0000 80B5     	 push {r7,lr}
 923 0002 82B0     	 sub sp,sp,#8
 924 0004 00AF     	 add r7,sp,#0
 925 0006 7860     	 str r0,[r7,#4]
 655:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 927              	.LM39:
 928 0008 7B68     	 ldr r3,[r7,#4]
 929 000a 5B68     	 ldr r3,[r3,#4]
 930 000c 1A1C     	 mov r2,r3
 931 000e 7B68     	 ldr r3,[r7,#4]
 932 0010 1B68     	 ldr r3,[r3]
 933 0012 D31A     	 sub r3,r2,r3
 934 0014 9B10     	 asr r3,r3,#2
 935 0016 181C     	 mov r0,r3
 936 0018 BD46     	 mov sp,r7
 937 001a 02B0     	 add sp,sp,#8
 938              	 
 939 001c 80BD     	 pop {r7,pc}
 941              	.Lscope11:
 943              	 .stabd 78,0,0
 944 001e C046     	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj,comdat
 945              	 .align 2
 949              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj
 950              	 .code 16
 951              	 .thumb_func
 953              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj:
 954              	 .stabd 46,0,0
 656:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 657:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 658:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       size_type
 659:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 660:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 661:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 662:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 663:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 664:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 665:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 666:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 667:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 668:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 669:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 670:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  default constructed elements are appended.
 671:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 672:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 673:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       resize(size_type __new_size)
 674:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 675:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__new_size > size())
 676:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_default_append(__new_size - size());
 677:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	else if (__new_size < size())
 678:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 679:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 680:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 681:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 682:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 683:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 684:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 685:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 686:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 687:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 688:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 689:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 690:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  given data.
 691:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 692:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 693:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 694:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 695:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__new_size > size())
 696:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 697:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	else if (__new_size < size())
 698:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 699:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 700:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 701:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 702:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 703:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 704:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 705:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 706:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 707:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 708:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 709:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 710:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  given data.
 711:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 712:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 713:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 714:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 715:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__new_size > size())
 716:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 717:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	else if (__new_size < size())
 718:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 719:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 720:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 721:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 722:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 723:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 724:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 725:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       shrink_to_fit()
 726:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_shrink_to_fit(); }
 727:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 728:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 729:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 730:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns the total number of elements that the %vector can
 731:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  hold before needing to allocate more memory.
 732:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 733:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       size_type
 734:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 735:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 736:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
 737:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 738:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 739:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 740:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  equal end().)
 741:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 742:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       bool
 743:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 744:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return begin() == end(); }
 745:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 746:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 747:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 748:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *          elements.
 749:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  Number of elements required.
 750:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 751:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 752:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function attempts to reserve enough memory for the
 753:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 754:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  number requested is more than max_size(), length_error is
 755:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  thrown.
 756:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 757:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 758:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  necessity and the user can determine the number of elements
 759:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  that will be required, the user can reserve the memory in
 760:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 761:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  and copying of %vector data.
 762:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 763:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 764:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reserve(size_type __n);
 765:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 766:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // element access
 767:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 768:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 769:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
 770:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  accessed.
 771:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  Read/write reference to data.
 772:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 773:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 774:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
 775:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 776:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  see at().)
 777:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 778:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reference
 779:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 956              	.LM40:
 957              	.LFBB12:
 958 0000 80B5     	 push {r7,lr}
 959 0002 82B0     	 sub sp,sp,#8
 960 0004 00AF     	 add r7,sp,#0
 961 0006 7860     	 str r0,[r7,#4]
 962 0008 3960     	 str r1,[r7]
 780:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 964              	.LM41:
 965 000a 7B68     	 ldr r3,[r7,#4]
 966 000c 1A68     	 ldr r2,[r3]
 967 000e 3B68     	 ldr r3,[r7]
 968 0010 9B00     	 lsl r3,r3,#2
 969 0012 D318     	 add r3,r2,r3
 970 0014 181C     	 mov r0,r3
 971 0016 BD46     	 mov sp,r7
 972 0018 02B0     	 add sp,sp,#8
 973              	 
 974 001a 80BD     	 pop {r7,pc}
 976              	.Lscope12:
 978              	 .stabd 78,0,0
 979              	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_,comdat
 980              	 .align 2
 984              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_
 985              	 .code 16
 986              	 .thumb_func
 988              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_:
 989              	 .stabd 46,0,0
 781:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 782:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 783:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 784:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
 785:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  accessed.
 786:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 787:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 788:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 789:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
 790:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 791:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  see at().)
 792:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 793:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reference
 794:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 795:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 796:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 797:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     protected:
 798:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /// Safety check used only from at().
 799:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 800:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_range_check(size_type __n) const
 801:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 802:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (__n >= this->size())
 803:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 804:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				       "(which is %zu) >= this->size() "
 805:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				       "(which is %zu)"),
 806:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				   __n, this->size());
 807:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 808:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 809:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     public:
 810:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 811:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 812:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
 813:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  accessed.
 814:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  Read/write reference to data.
 815:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 816:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 817:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
 818:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 819:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
 820:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 821:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reference
 822:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       at(size_type __n)
 823:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 824:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_M_range_check(__n);
 825:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return (*this)[__n]; 
 826:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 827:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 828:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 829:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 830:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
 831:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  accessed.
 832:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 833:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 834:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 835:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
 836:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 837:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
 838:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 839:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reference
 840:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       at(size_type __n) const
 841:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 842:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_M_range_check(__n);
 843:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return (*this)[__n];
 844:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 845:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 846:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 847:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the first
 848:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element of the %vector.
 849:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 850:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reference
 851:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 852:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *begin(); }
 853:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 854:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 855:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 856:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element of the %vector.
 857:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 858:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reference
 859:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 860:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *begin(); }
 861:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 862:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 863:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the last
 864:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element of the %vector.
 865:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 866:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       reference
 867:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 868:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *(end() - 1); }
 869:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       
 870:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 871:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 872:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  last element of the %vector.
 873:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 874:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_reference
 875:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 876:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *(end() - 1); }
 877:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 878:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 879:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 880:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // data access
 881:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 882:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 883:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 884:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 885:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 886:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _Tp*
 887:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 888:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       pointer
 889:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 890:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 891:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 892:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 893:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 894:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const _Tp*
 895:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 896:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       const_pointer
 897:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 898:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 899:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 900:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 901:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // [23.2.4.3] modifiers
 902:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 903:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 904:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be added.
 905:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 906:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 907:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 908:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 909:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 910:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  available.
 911:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 912:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 913:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       push_back(const value_type& __x)
 991              	.LM42:
 992              	.LFBB13:
 993 0000 80B5     	 push {r7,lr}
 994 0002 82B0     	 sub sp,sp,#8
 995 0004 00AF     	 add r7,sp,#0
 996 0006 7860     	 str r0,[r7,#4]
 997 0008 3960     	 str r1,[r7]
 914:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 915:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 999              	.LM43:
 1000 000a 7B68     	 ldr r3,[r7,#4]
 1001 000c 5A68     	 ldr r2,[r3,#4]
 1002 000e 7B68     	 ldr r3,[r7,#4]
 1003 0010 9B68     	 ldr r3,[r3,#8]
 1004 0012 9A42     	 cmp r2,r3
 1005 0014 0ED0     	 beq .L36
 916:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  {
 917:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 918:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	                             __x);
 1007              	.LM44:
 1008 0016 7968     	 ldr r1,[r7,#4]
 1009 0018 7B68     	 ldr r3,[r7,#4]
 1010 001a 5A68     	 ldr r2,[r3,#4]
 917:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	                             __x);
 1012              	.LM45:
 1013 001c 3B68     	 ldr r3,[r7]
 1014 001e 081C     	 mov r0,r1
 1015 0020 111C     	 mov r1,r2
 1016 0022 1A1C     	 mov r2,r3
 1017 0024 FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_
 919:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    ++this->_M_impl._M_finish;
 1019              	.LM46:
 1020 0028 7B68     	 ldr r3,[r7,#4]
 1021 002a 5B68     	 ldr r3,[r3,#4]
 1022 002c 1A1D     	 add r2,r3,#4
 1023 002e 7B68     	 ldr r3,[r7,#4]
 1024 0030 5A60     	 str r2,[r3,#4]
 1025 0032 0AE0     	 b .L35
 1026              	.L36:
 920:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  }
 921:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	else
 922:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 923:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_emplace_back_aux(__x);
 924:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 925:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_insert_aux(end(), __x);
 1028              	.LM47:
 1029 0034 7B68     	 ldr r3,[r7,#4]
 1030 0036 181C     	 mov r0,r3
 1031 0038 FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv
 1032 003c 011C     	 mov r1,r0
 1033 003e 7A68     	 ldr r2,[r7,#4]
 1034 0040 3B68     	 ldr r3,[r7]
 1035 0042 101C     	 mov r0,r2
 1036 0044 1A1C     	 mov r2,r3
 1037 0046 FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
 1038              	.L35:
 926:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 927:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 1040              	.LM48:
 1041 004a BD46     	 mov sp,r7
 1042 004c 02B0     	 add sp,sp,#8
 1043              	 
 1044 004e 80BD     	 pop {r7,pc}
 1046              	.Lscope13:
 1048              	 .stabd 78,0,0
 1049              	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD5Ev,comdat
 1050              	 .align 2
 1053              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev
 1054              	 .code 16
 1055              	 .thumb_func
 1057              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev:
 1058              	 .stabd 46,0,0
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : public _Tp_alloc_type
 1060              	.LM49:
 1061              	.LFBB14:
 1062 0000 80B5     	 push {r7,lr}
 1063 0002 82B0     	 sub sp,sp,#8
 1064 0004 00AF     	 add r7,sp,#0
 1065 0006 7860     	 str r0,[r7,#4]
 1066              	.LBB10:
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : public _Tp_alloc_type
 1068              	.LM50:
 1069 0008 7B68     	 ldr r3,[r7,#4]
 1070 000a 181C     	 mov r0,r3
 1071 000c FFF7FEFF 	 bl _ZNSaIP13ShiftRegisterED2Ev
 1072              	.LBE10:
 1073 0010 7B68     	 ldr r3,[r7,#4]
 1074 0012 181C     	 mov r0,r3
 1075 0014 BD46     	 mov sp,r7
 1076 0016 02B0     	 add sp,sp,#8
 1077              	 
 1078 0018 80BD     	 pop {r7,pc}
 1080              	.Lscope14:
 1082              	 .stabd 78,0,0
 1083              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD1Ev
 1084              	 .thumb_set _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev
 1085 001a C046     	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC5Ev,comdat
 1086              	 .align 2
 1089              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev
 1090              	 .code 16
 1091              	 .thumb_func
 1093              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev:
 1094              	 .stabd 46,0,0
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       : _M_impl() { }
 1096              	.LM51:
 1097              	.LFBB15:
 1098 0000 80B5     	 push {r7,lr}
 1099 0002 82B0     	 sub sp,sp,#8
 1100 0004 00AF     	 add r7,sp,#0
 1101 0006 7860     	 str r0,[r7,#4]
 1102              	.LBB11:
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1104              	.LM52:
 1105 0008 7B68     	 ldr r3,[r7,#4]
 1106 000a 181C     	 mov r0,r3
 1107 000c FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC1Ev
 1108              	.LBE11:
 1109 0010 7B68     	 ldr r3,[r7,#4]
 1110 0012 181C     	 mov r0,r3
 1111 0014 BD46     	 mov sp,r7
 1112 0016 02B0     	 add sp,sp,#8
 1113              	 
 1114 0018 80BD     	 pop {r7,pc}
 1116              	.Lscope15:
 1118              	 .stabd 78,0,0
 1119              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC1Ev
 1120              	 .thumb_set _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC1Ev,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev
 1121 001a C046     	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED5Ev,comdat
 1122              	 .align 2
 1125              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev
 1126              	 .code 16
 1127              	 .thumb_func
 1129              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev:
 1130              	 .stabd 46,0,0
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 1132              	.LM53:
 1133              	.LFBB16:
 1134 0000 90B5     	 push {r4,r7,lr}
 1135 0002 83B0     	 sub sp,sp,#12
 1136 0004 00AF     	 add r7,sp,#0
 1137 0006 7860     	 str r0,[r7,#4]
 1138              	.LBB12:
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1140              	.LM54:
 1141 0008 7B68     	 ldr r3,[r7,#4]
 1142 000a 1A68     	 ldr r2,[r3]
 1143 000c 7B68     	 ldr r3,[r7,#4]
 1144 000e 9B68     	 ldr r3,[r3,#8]
 1145 0010 191C     	 mov r1,r3
 1146 0012 7B68     	 ldr r3,[r7,#4]
 1147 0014 1B68     	 ldr r3,[r3]
 1148 0016 CB1A     	 sub r3,r1,r3
 1149 0018 9B10     	 asr r3,r3,#2
 1150 001a 1C1C     	 mov r4,r3
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 		      - this->_M_impl._M_start); }
 1152              	.LM55:
 1153 001c 7B68     	 ldr r3,[r7,#4]
 1154 001e 181C     	 mov r0,r3
 1155 0020 111C     	 mov r1,r2
 1156 0022 221C     	 mov r2,r4
 1157 0024 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1159              	.LM56:
 1160 0028 7B68     	 ldr r3,[r7,#4]
 1161 002a 181C     	 mov r0,r3
 1162 002c FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD1Ev
 1163              	.LBE12:
 1164 0030 7B68     	 ldr r3,[r7,#4]
 1165 0032 181C     	 mov r0,r3
 1166 0034 BD46     	 mov sp,r7
 1167 0036 03B0     	 add sp,sp,#12
 1168              	 
 1169 0038 90BD     	 pop {r4,r7,pc}
 1171              	.Lscope16:
 1173              	 .stabd 78,0,0
 1174              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED1Ev
 1175              	 .thumb_set _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED1Ev,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev
 1176 003a C046     	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv,comdat
 1177              	 .align 2
 1180              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 1181              	 .code 16
 1182              	 .thumb_func
 1184              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:
 1185              	 .stabd 46,0,0
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 1187              	.LM57:
 1188              	.LFBB17:
 1189 0000 80B5     	 push {r7,lr}
 1190 0002 82B0     	 sub sp,sp,#8
 1191 0004 00AF     	 add r7,sp,#0
 1192 0006 7860     	 str r0,[r7,#4]
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1194              	.LM58:
 1195 0008 7B68     	 ldr r3,[r7,#4]
 1196 000a 181C     	 mov r0,r3
 1197 000c BD46     	 mov sp,r7
 1198 000e 02B0     	 add sp,sp,#8
 1199              	 
 1200 0010 80BD     	 pop {r7,pc}
 1202              	.Lscope17:
 1204              	 .stabd 78,0,0
 1205 0012 C046     	 .section .text._ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E,"axG",%progbits,_ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E,comdat
 1206              	 .align 2
 1210              	 .weak _ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E
 1211              	 .code 16
 1212              	 .thumb_func
 1214              	_ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E:
 1215              	 .stabd 46,0,0
 1217              	.Ltext4:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Copyright (c) 1996,1997
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * representations about the suitability of this software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** /** @file bits/stl_construct.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****  */
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #include <new>
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #include <bits/move.h>
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #include <ext/alloc_traits.h>
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** {
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   /**
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * object's constructor with an initializer.
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    */
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #if __cplusplus >= 201103L
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _T1, typename... _Args>
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     inline void
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #else
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _T1, typename _T2>
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     inline void
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     }
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** #endif
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   /**
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    */
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _Tp>
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     inline void
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     { __pointer->~_Tp(); }
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<bool>
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     struct _Destroy_aux
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       template<typename _ForwardIterator>
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****         static void
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	{
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	}
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     };
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<>
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     struct _Destroy_aux<true>
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       template<typename _ForwardIterator>
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****         static void
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     };
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   /**
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    */
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _ForwardIterator>
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     inline void
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****                        _Value_type;
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	__destroy(__first, __last);
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     }
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   /**
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****    */
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     void
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	     _Allocator& __alloc)
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       for (; __first != __last; ++__first)
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     }
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     inline void
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1219              	.LM59:
 1220              	.LFBB18:
 1221 0000 80B5     	 push {r7,lr}
 1222 0002 84B0     	 sub sp,sp,#16
 1223 0004 00AF     	 add r7,sp,#0
 1224 0006 F860     	 str r0,[r7,#12]
 1225 0008 B960     	 str r1,[r7,#8]
 1226 000a 7A60     	 str r2,[r7,#4]
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	     allocator<_Tp>&)
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****       _Destroy(__first, __last);
 1228              	.LM60:
 1229 000c FA68     	 ldr r2,[r7,#12]
 1230 000e BB68     	 ldr r3,[r7,#8]
 1231 0010 101C     	 mov r0,r2
 1232 0012 191C     	 mov r1,r3
 1233 0014 FFF7FEFF 	 bl _ZSt8_DestroyIPP13ShiftRegisterEvT_S3_
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     }
 1235              	.LM61:
 1236 0018 BD46     	 mov sp,r7
 1237 001a 04B0     	 add sp,sp,#16
 1238              	 
 1239 001c 80BD     	 pop {r7,pc}
 1241              	.Lscope18:
 1243              	 .stabd 78,0,0
 1244 001e C046     	 .section .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_,"axG",%progbits,_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_,comdat
 1245              	 .align 2
 1250              	 .weak _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_
 1251              	 .code 16
 1252              	 .thumb_func
 1254              	_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_:
 1255              	 .stabd 46,0,0
 1257              	.Ltext5:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // Copyright (C) 2011-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** /** @file ext/alloc_traits.h
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****  */
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #pragma GCC system_header
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #if __cplusplus >= 201103L
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** # include <bits/move.h>
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** # include <bits/alloc_traits.h>
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #else
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #endif
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** {
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #if __cplusplus >= 201103L
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Alloc>
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal : std::false_type { };
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<std::allocator<_Tp>>
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename, typename> struct array_allocator;
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp, typename _Array>
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename> struct bitmap_allocator;
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename> struct malloc_allocator;
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename> struct mt_allocator;
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<mt_allocator<_Tp>>
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename> struct new_allocator;
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<new_allocator<_Tp>>
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename> struct pool_allocator;
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   template<typename _Tp>
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     struct __allocator_always_compares_equal<pool_allocator<_Tp>>
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     : std::true_type { };
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #endif
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** /**
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++0x allocators.
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****  * @ingroup allocators
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** */
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** template<typename _Alloc>
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   struct __alloc_traits
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #if __cplusplus >= 201103L
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   : std::allocator_traits<_Alloc>
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #endif
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   {
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef _Alloc allocator_type;
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #if __cplusplus >= 201103L
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef value_type&                             reference;
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef const value_type&                       const_reference;
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     using _Base_type::allocate;
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     using _Base_type::deallocate;
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     using _Base_type::construct;
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     using _Base_type::destroy;
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     using _Base_type::max_size;
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   private:
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     template<typename _Ptr>
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       using __is_custom_pointer
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****   public:
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     // overload construct for non-standard pointer types
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     template<typename _Ptr, typename... _Args>
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       {
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 			      std::forward<_Args>(__args)...);
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       }
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     // overload destroy for non-standard pointer types
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     template<typename _Ptr>
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_always_equal()
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return __allocator_always_compares_equal<_Alloc>::value; }
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static constexpr bool _S_nothrow_swap()
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     {
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       using std::swap;
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       return !_S_propagate_on_swap()
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****        	|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     }
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     template<typename _Tp>
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       struct rebind
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** #else
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static pointer
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return __a.allocate(__n); }
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { __a.deallocate(__p, __n); }
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     template<typename _Tp>
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 1259              	.LM62:
 1260              	.LFBB19:
 1261 0000 80B5     	 push {r7,lr}
 1262 0002 84B0     	 sub sp,sp,#16
 1263 0004 00AF     	 add r7,sp,#0
 1264 0006 F860     	 str r0,[r7,#12]
 1265 0008 B960     	 str r1,[r7,#8]
 1266 000a 7A60     	 str r2,[r7,#4]
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****       { __a.construct(__p, __arg); }
 1268              	.LM63:
 1269 000c F968     	 ldr r1,[r7,#12]
 1270 000e BA68     	 ldr r2,[r7,#8]
 1271 0010 7B68     	 ldr r3,[r7,#4]
 1272 0012 081C     	 mov r0,r1
 1273 0014 111C     	 mov r1,r2
 1274 0016 1A1C     	 mov r2,r3
 1275 0018 FFF7FEFF 	 bl _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_
 1276 001c BD46     	 mov sp,r7
 1277 001e 04B0     	 add sp,sp,#16
 1278              	 
 1279 0020 80BD     	 pop {r7,pc}
 1281              	.Lscope19:
 1283              	 .stabd 78,0,0
 1284 0022 C046     	 .section .rodata
 1285              	 .align 2
 1286              	.LC2:
 1287 0000 76656374 	 .ascii "vector::_M_insert_aux\000"
 1287      6F723A3A 
 1287      5F4D5F69 
 1287      6E736572 
 1287      745F6175 
 1288 0016 0000     	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_,comdat
 1289              	 .align 2
 1294              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
 1295              	 .code 16
 1296              	 .thumb_func
 1298              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
 1299              	 .stabd 46,0,0
 1301              	.Ltext6:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Copyright (c) 1996
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * representations about the suitability of this  software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** /** @file bits/vector.tcc
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****  */
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #ifndef _VECTOR_TCC
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #define _VECTOR_TCC 1
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** {
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     void
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     reserve(size_type __n)
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (__n > this->max_size())
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (this->capacity() < __n)
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  const size_type __old_size = size();
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			_M_get_Tp_allocator());
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			- this->_M_impl._M_start);
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     template<typename... _Args>
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       void
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       vector<_Tp, _Alloc>::
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       emplace_back(_Args&&... __args)
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       {
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  {
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  }
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	else
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       }
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #else
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     insert(iterator __position, const value_type& __x)
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       const size_type __n = __position - begin();
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  && __position == end())
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  ++this->_M_impl._M_finish;
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       else
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  const auto __pos = begin() + (__position - cbegin());
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      _Tp __x_copy = __x;
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy));
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  else
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _M_insert_aux(__pos, __x);
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #else
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _M_insert_aux(__position, __x);
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     _M_erase(iterator __position)
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (__position + 1 != end())
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       --this->_M_impl._M_finish;
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       return __position;
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     _M_erase(iterator __first, iterator __last)
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (__first != __last)
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  if (__last != end())
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       return __first;
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>&
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (&__x != this)
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	        {
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  // replacement allocator cannot free existing storage
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  this->clear();
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				this->_M_impl._M_end_of_storage
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				- this->_M_impl._M_start);
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		}
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				   __x._M_get_Tp_allocator());
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  const size_type __xlen = __x.size();
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  if (__xlen > capacity())
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 						   __x.end());
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			    _M_get_Tp_allocator());
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			    - this->_M_impl._M_start);
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  else if (size() >= __xlen)
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  else
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			this->_M_impl._M_start);
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					  __x._M_impl._M_finish,
 215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       return *this;
 221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     void
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (__n > capacity())
 229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  __tmp.swap(*this);
 232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       else if (__n > size())
 234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  std::fill(begin(), end(), __val);
 236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					__n - size(), __val,
 238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					_M_get_Tp_allocator());
 239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_finish += __n - size();
 240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       else
 242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     template<typename _InputIterator>
 247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       void
 248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		    std::input_iterator_tag)
 251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       {
 252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	     ++__cur, ++__first)
 255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  *__cur = *__first;
 256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	if (__first == __last)
 257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_erase_at_end(__cur);
 258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	else
 259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  insert(end(), __first, __last);
 260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       }
 261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     template<typename _ForwardIterator>
 264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       void
 265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		    std::forward_iterator_tag)
 268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       {
 269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	if (__len > capacity())
 272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  {
 273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			  _M_get_Tp_allocator());
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			  this->_M_impl._M_end_of_storage
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			  - this->_M_impl._M_start);
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  }
 283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	else if (size() >= __len)
 284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	else
 286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  {
 287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _ForwardIterator __mid = __first;
 288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    std::advance(__mid, size());
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    this->_M_impl._M_finish =
 291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  }
 295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       }
 296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
 298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     template<typename... _Args>
 300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       emplace(const_iterator __position, _Args&&... __args)
 303:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       {
 304:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	const size_type __n = __position - begin();
 305:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 306:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    && __position == end())
 307:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  {
 308:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 309:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
 310:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 311:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  }
 312:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	else
 313:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_insert_aux(begin() + (__position - cbegin()),
 314:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			std::forward<_Args>(__args)...);
 315:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 316:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       }
 317:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 318:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 319:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     template<typename... _Args>
 320:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       void
 321:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 322:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 323:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #else
 324:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 325:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     void
 326:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 1303              	.LM64:
 1304              	.LFBB20:
 1305 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 1306 0002 8BB0     	 sub sp,sp,#44
 1307 0004 00AF     	 add r7,sp,#0
 1308 0006 F860     	 str r0,[r7,#12]
 1309 0008 B960     	 str r1,[r7,#8]
 1310 000a 7A60     	 str r2,[r7,#4]
 1311              	.LBB13:
 1312              	.LBB14:
 327:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 328:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 329:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     {
 330:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1314              	.LM65:
 1315 000c FB68     	 ldr r3,[r7,#12]
 1316 000e 5A68     	 ldr r2,[r3,#4]
 1317 0010 FB68     	 ldr r3,[r7,#12]
 1318 0012 9B68     	 ldr r3,[r3,#8]
 1319 0014 9A42     	 cmp r2,r3
 1320 0016 2ED0     	 beq .L52
 1321              	.LBB15:
 331:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 333:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 334:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				                   - 1)));
 1323              	.LM66:
 1324 0018 F968     	 ldr r1,[r7,#12]
 1325 001a FB68     	 ldr r3,[r7,#12]
 1326 001c 5A68     	 ldr r2,[r3,#4]
 1327 001e FB68     	 ldr r3,[r7,#12]
 1328 0020 5B68     	 ldr r3,[r3,#4]
 1329 0022 043B     	 sub r3,r3,#4
 332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 1331              	.LM67:
 1332 0024 081C     	 mov r0,r1
 1333 0026 111C     	 mov r1,r2
 1334 0028 1A1C     	 mov r2,r3
 1335 002a FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_
 335:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  ++this->_M_impl._M_finish;
 1337              	.LM68:
 1338 002e FB68     	 ldr r3,[r7,#12]
 1339 0030 5B68     	 ldr r3,[r3,#4]
 1340 0032 1A1D     	 add r2,r3,#4
 1341 0034 FB68     	 ldr r3,[r7,#12]
 1342 0036 5A60     	 str r2,[r3,#4]
 336:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus < 201103L
 337:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _Tp __x_copy = __x;
 1344              	.LM69:
 1345 0038 7B68     	 ldr r3,[r7,#4]
 1346 003a 1B68     	 ldr r3,[r3]
 1347 003c 7B62     	 str r3,[r7,#36]
 338:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 339:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 1349              	.LM70:
 1350 003e 0823     	 mov r3,#8
 1351 0040 FB18     	 add r3,r7,r3
 1352 0042 181C     	 mov r0,r3
 1353 0044 FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 1354 0048 031C     	 mov r3,r0
 1355 004a 1968     	 ldr r1,[r3]
 1356 004c FB68     	 ldr r3,[r7,#12]
 1357 004e 5B68     	 ldr r3,[r3,#4]
 1358 0050 083B     	 sub r3,r3,#8
 1359 0052 1A1C     	 mov r2,r3
 1360 0054 FB68     	 ldr r3,[r7,#12]
 1361 0056 5B68     	 ldr r3,[r3,#4]
 1362 0058 043B     	 sub r3,r3,#4
 1363 005a 081C     	 mov r0,r1
 1364 005c 111C     	 mov r1,r2
 1365 005e 1A1C     	 mov r2,r3
 1366 0060 FFF7FEFF 	 bl _ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_
 340:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				  this->_M_impl._M_finish - 2,
 341:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				  this->_M_impl._M_finish - 1);
 342:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus < 201103L
 343:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  *__position = __x_copy;
 1368              	.LM71:
 1369 0064 0823     	 mov r3,#8
 1370 0066 FB18     	 add r3,r7,r3
 1371 0068 181C     	 mov r0,r3
 1372 006a FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv
 1373 006e 031C     	 mov r3,r0
 1374 0070 7A6A     	 ldr r2,[r7,#36]
 1375 0072 1A60     	 str r2,[r3]
 1376              	.LBE15:
 1377 0074 89E0     	 b .L51
 1378              	.L52:
 1379              	.LBB16:
 344:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #else
 345:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 346:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 347:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 348:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****       else
 349:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	{
 350:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  const size_type __len =
 351:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 1381              	.LM72:
 1382 0076 FA68     	 ldr r2,[r7,#12]
 1383 0078 454B     	 ldr r3,.L54
 1384 007a 101C     	 mov r0,r2
 1385 007c 0121     	 mov r1,#1
 1386 007e 1A1C     	 mov r2,r3
 1387 0080 FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc
 1388 0084 031C     	 mov r3,r0
 1389 0086 3B62     	 str r3,[r7,#32]
 352:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  const size_type __elems_before = __position - begin();
 1391              	.LM73:
 1392 0088 FB68     	 ldr r3,[r7,#12]
 1393 008a 181C     	 mov r0,r3
 1394 008c FFF7FEFF 	 bl _ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv
 1395 0090 031C     	 mov r3,r0
 1396 0092 3B61     	 str r3,[r7,#16]
 1397 0094 0823     	 mov r3,#8
 1398 0096 FA18     	 add r2,r7,r3
 1399 0098 1023     	 mov r3,#16
 1400 009a FB18     	 add r3,r7,r3
 1401 009c 101C     	 mov r0,r2
 1402 009e 191C     	 mov r1,r3
 1403 00a0 FFF7FEFF 	 bl _ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
 1404 00a4 031C     	 mov r3,r0
 1405 00a6 FB61     	 str r3,[r7,#28]
 353:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 1407              	.LM74:
 1408 00a8 FA68     	 ldr r2,[r7,#12]
 1409 00aa 3B6A     	 ldr r3,[r7,#32]
 1410 00ac 101C     	 mov r0,r2
 1411 00ae 191C     	 mov r1,r3
 1412 00b0 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj
 1413 00b4 031C     	 mov r3,r0
 1414 00b6 BB61     	 str r3,[r7,#24]
 354:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  pointer __new_finish(__new_start);
 1416              	.LM75:
 1417 00b8 BB69     	 ldr r3,[r7,#24]
 1418 00ba 7B61     	 str r3,[r7,#20]
 355:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  __try
 356:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 357:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 358:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      // case, where the moves could alter a new element belonging
 359:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 360:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl,
 362:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		                       __new_start + __elems_before,
 363:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #if __cplusplus >= 201103L
 364:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 				       std::forward<_Args>(__args)...);
 365:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #else
 366:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	                               __x);
 1420              	.LM76:
 1421 00bc F968     	 ldr r1,[r7,#12]
 1422 00be FB69     	 ldr r3,[r7,#28]
 1423 00c0 9B00     	 lsl r3,r3,#2
 1424 00c2 BA69     	 ldr r2,[r7,#24]
 1425 00c4 D218     	 add r2,r2,r3
 361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		                       __new_start + __elems_before,
 1427              	.LM77:
 1428 00c6 7B68     	 ldr r3,[r7,#4]
 1429 00c8 081C     	 mov r0,r1
 1430 00ca 111C     	 mov r1,r2
 1431 00cc 1A1C     	 mov r2,r3
 1432 00ce FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_
 367:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** #endif
 368:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      __new_finish = 0;
 1434              	.LM78:
 1435 00d2 0023     	 mov r3,#0
 1436 00d4 7B61     	 str r3,[r7,#20]
 369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      __new_finish
 371:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 372:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		(this->_M_impl._M_start, __position.base(),
 373:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1438              	.LM79:
 1439 00d6 FB68     	 ldr r3,[r7,#12]
 1440 00d8 1D68     	 ldr r5,[r3]
 1441 00da 0823     	 mov r3,#8
 1442 00dc FB18     	 add r3,r7,r3
 1443 00de 181C     	 mov r0,r3
 1444 00e0 FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 1445 00e4 031C     	 mov r3,r0
 1446 00e6 1C68     	 ldr r4,[r3]
 1447 00e8 FB68     	 ldr r3,[r7,#12]
 1448 00ea 181C     	 mov r0,r3
 1449 00ec FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 1450 00f0 061C     	 mov r6,r0
 370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1452              	.LM80:
 1453 00f2 BB69     	 ldr r3,[r7,#24]
 1454 00f4 281C     	 mov r0,r5
 1455 00f6 211C     	 mov r1,r4
 1456 00f8 1A1C     	 mov r2,r3
 1457 00fa 331C     	 mov r3,r6
 1458 00fc FFF7FEFF 	 bl _ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_
 1459 0100 031C     	 mov r3,r0
 1460 0102 7B61     	 str r3,[r7,#20]
 374:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 375:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      ++__new_finish;
 1462              	.LM81:
 1463 0104 7B69     	 ldr r3,[r7,#20]
 1464 0106 0433     	 add r3,r3,#4
 1465 0108 7B61     	 str r3,[r7,#20]
 376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      __new_finish
 378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		(__position.base(), this->_M_impl._M_finish,
 380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1467              	.LM82:
 1468 010a 0823     	 mov r3,#8
 1469 010c FB18     	 add r3,r7,r3
 1470 010e 181C     	 mov r0,r3
 1471 0110 FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 1472 0114 031C     	 mov r3,r0
 1473 0116 1D68     	 ldr r5,[r3]
 1474 0118 FB68     	 ldr r3,[r7,#12]
 1475 011a 5C68     	 ldr r4,[r3,#4]
 1476 011c FB68     	 ldr r3,[r7,#12]
 1477 011e 181C     	 mov r0,r3
 1478 0120 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 1479 0124 061C     	 mov r6,r0
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1481              	.LM83:
 1482 0126 7B69     	 ldr r3,[r7,#20]
 1483 0128 281C     	 mov r0,r5
 1484 012a 211C     	 mov r1,r4
 1485 012c 1A1C     	 mov r2,r3
 1486 012e 331C     	 mov r3,r6
 1487 0130 FFF7FEFF 	 bl _ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_
 1488 0134 031C     	 mov r3,r0
 1489 0136 7B61     	 str r3,[r7,#20]
 381:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 382:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****           __catch(...)
 383:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    {
 384:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      if (!__new_finish)
 385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 386:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		                       __new_start + __elems_before);
 387:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      else
 388:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 389:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      _M_deallocate(__new_start, __len);
 390:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	      __throw_exception_again;
 391:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	    }
 392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			_M_get_Tp_allocator());
 1491              	.LM84:
 1492 0138 FB68     	 ldr r3,[r7,#12]
 1493 013a 1D68     	 ldr r5,[r3]
 1494 013c FB68     	 ldr r3,[r7,#12]
 1495 013e 5C68     	 ldr r4,[r3,#4]
 1496 0140 FB68     	 ldr r3,[r7,#12]
 1497 0142 181C     	 mov r0,r3
 1498 0144 FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 1499 0148 031C     	 mov r3,r0
 392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			_M_get_Tp_allocator());
 1501              	.LM85:
 1502 014a 281C     	 mov r0,r5
 1503 014c 211C     	 mov r1,r4
 1504 014e 1A1C     	 mov r2,r3
 1505 0150 FFF7FEFF 	 bl _ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E
 394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 395:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
 396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 			- this->_M_impl._M_start);
 1507              	.LM86:
 1508 0154 F968     	 ldr r1,[r7,#12]
 1509 0156 FB68     	 ldr r3,[r7,#12]
 1510 0158 1A68     	 ldr r2,[r3]
 1511 015a FB68     	 ldr r3,[r7,#12]
 1512 015c 9B68     	 ldr r3,[r3,#8]
 1513 015e 181C     	 mov r0,r3
 1514 0160 FB68     	 ldr r3,[r7,#12]
 1515 0162 1B68     	 ldr r3,[r3]
 1516 0164 C31A     	 sub r3,r0,r3
 1517 0166 9B10     	 asr r3,r3,#2
 394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 1519              	.LM87:
 1520 0168 081C     	 mov r0,r1
 1521 016a 111C     	 mov r1,r2
 1522 016c 1A1C     	 mov r2,r3
 1523 016e FFF7FEFF 	 bl _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j
 397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 1525              	.LM88:
 1526 0172 FB68     	 ldr r3,[r7,#12]
 1527 0174 BA69     	 ldr r2,[r7,#24]
 1528 0176 1A60     	 str r2,[r3]
 398:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 1530              	.LM89:
 1531 0178 FB68     	 ldr r3,[r7,#12]
 1532 017a 7A69     	 ldr r2,[r7,#20]
 1533 017c 5A60     	 str r2,[r3,#4]
 399:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 1535              	.LM90:
 1536 017e 3B6A     	 ldr r3,[r7,#32]
 1537 0180 9B00     	 lsl r3,r3,#2
 1538 0182 BA69     	 ldr r2,[r7,#24]
 1539 0184 D218     	 add r2,r2,r3
 1540 0186 FB68     	 ldr r3,[r7,#12]
 1541 0188 9A60     	 str r2,[r3,#8]
 1542              	.L51:
 1543              	.LBE16:
 1544              	.LBE14:
 1545              	.LBE13:
 400:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc **** 	}
 401:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\vector.tcc ****     }
 1547              	.LM91:
 1548 018a BD46     	 mov sp,r7
 1549 018c 0BB0     	 add sp,sp,#44
 1550              	 
 1551 018e F0BD     	 pop {r4,r5,r6,r7,pc}
 1552              	.L55:
 1553              	 .align 2
 1554              	.L54:
 1555 0190 00000000 	 .word .LC2
 1566              	.Lscope20:
 1568              	 .stabd 78,0,0
 1569              	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv,comdat
 1570              	 .align 2
 1573              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv
 1574              	 .code 16
 1575              	 .thumb_func
 1577              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv:
 1578              	 .stabd 46,0,0
 1580              	.Ltext7:
 565:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1582              	.LM92:
 1583              	.LFBB21:
 1584 0000 80B5     	 push {r7,lr}
 1585 0002 84B0     	 sub sp,sp,#16
 1586 0004 00AF     	 add r7,sp,#0
 1587 0006 7860     	 str r0,[r7,#4]
 566:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1589              	.LM93:
 1590 0008 7B68     	 ldr r3,[r7,#4]
 1591 000a 0433     	 add r3,r3,#4
 1592 000c 0C22     	 mov r2,#12
 1593 000e BA18     	 add r2,r7,r2
 1594 0010 101C     	 mov r0,r2
 1595 0012 191C     	 mov r1,r3
 1596 0014 FFF7FEFF 	 bl _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC1ERKS3_
 1597 0018 FB68     	 ldr r3,[r7,#12]
 1598 001a 181C     	 mov r0,r3
 1599 001c BD46     	 mov sp,r7
 1600 001e 04B0     	 add sp,sp,#16
 1601              	 
 1602 0020 80BD     	 pop {r7,pc}
 1604              	.Lscope21:
 1606              	 .stabd 78,0,0
 1607 0022 C046     	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC5Ev,comdat
 1608              	 .align 2
 1611              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev
 1612              	 .code 16
 1613              	 .thumb_func
 1615              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev:
 1616              	 .stabd 46,0,0
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 1618              	.LM94:
 1619              	.LFBB22:
 1620 0000 80B5     	 push {r7,lr}
 1621 0002 82B0     	 sub sp,sp,#8
 1622 0004 00AF     	 add r7,sp,#0
 1623 0006 7860     	 str r0,[r7,#4]
 1624              	.LBB17:
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	{ }
 1626              	.LM95:
 1627 0008 7B68     	 ldr r3,[r7,#4]
 1628 000a 181C     	 mov r0,r3
 1629 000c FFF7FEFF 	 bl _ZNSaIP13ShiftRegisterEC2Ev
 1630 0010 7B68     	 ldr r3,[r7,#4]
 1631 0012 0022     	 mov r2,#0
 1632 0014 1A60     	 str r2,[r3]
 1633 0016 7B68     	 ldr r3,[r7,#4]
 1634 0018 0022     	 mov r2,#0
 1635 001a 5A60     	 str r2,[r3,#4]
 1636 001c 7B68     	 ldr r3,[r7,#4]
 1637 001e 0022     	 mov r2,#0
 1638 0020 9A60     	 str r2,[r3,#8]
 1639              	.LBE17:
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1641              	.LM96:
 1642 0022 7B68     	 ldr r3,[r7,#4]
 1643 0024 181C     	 mov r0,r3
 1644 0026 BD46     	 mov sp,r7
 1645 0028 02B0     	 add sp,sp,#8
 1646              	 
 1647 002a 80BD     	 pop {r7,pc}
 1649              	.Lscope22:
 1651              	 .stabd 78,0,0
 1652              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC1Ev
 1653              	 .thumb_set _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev
 1654              	 .section .text._ZNSaIP13ShiftRegisterED2Ev,"axG",%progbits,_ZNSaIP13ShiftRegisterED5Ev,comdat
 1655              	 .align 2
 1658              	 .weak _ZNSaIP13ShiftRegisterED2Ev
 1659              	 .code 16
 1660              	 .thumb_func
 1662              	_ZNSaIP13ShiftRegisterED2Ev:
 1663              	 .stabd 46,0,0
 1665              	.Ltext8:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // Allocators -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * Copyright (c) 1996-1997
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  *
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * representations about the suitability of this software for any
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  */
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** /** @file bits/allocator.h
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****  */
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #define _ALLOCATOR_H 1
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #include <bits/memoryfwd.h>
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #if __cplusplus >= 201103L
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #include <type_traits>
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #endif
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** {
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****   /**
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *  @addtogroup allocators
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *  @{
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    */
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****   /// allocator<void> specialization.
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****   template<>
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     class allocator<void>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     {
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     public:
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef size_t      size_type;
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef ptrdiff_t   difference_type;
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef void*       pointer;
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef const void* const_pointer;
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef void        value_type;
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       template<typename _Tp1>
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****         struct rebind
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****         { typedef allocator<_Tp1> other; };
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #if __cplusplus >= 201103L
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #endif
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     };
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****   /**
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *  for further details.
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    */
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****   template<typename _Tp>
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****     {
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****    public:
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef size_t     size_type;
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef ptrdiff_t  difference_type;
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef _Tp*       pointer;
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef const _Tp* const_pointer;
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef _Tp&       reference;
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef const _Tp& const_reference;
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef _Tp        value_type;
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       template<typename _Tp1>
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****         struct rebind
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****         { typedef allocator<_Tp1> other; };
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #if __cplusplus >= 201103L
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** #endif
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       allocator() throw() { }
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       allocator(const allocator& __a) throw()
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       template<typename _Tp1>
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h ****       ~allocator() throw() { }
 1667              	.LM97:
 1668              	.LFBB23:
 1669 0000 80B5     	 push {r7,lr}
 1670 0002 82B0     	 sub sp,sp,#8
 1671 0004 00AF     	 add r7,sp,#0
 1672 0006 7860     	 str r0,[r7,#4]
 1673              	.LBB18:
 1675              	.LM98:
 1676 0008 7B68     	 ldr r3,[r7,#4]
 1677 000a 181C     	 mov r0,r3
 1678 000c FFF7FEFF 	 bl _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev
 1679              	.LBE18:
 1680 0010 7B68     	 ldr r3,[r7,#4]
 1681 0012 181C     	 mov r0,r3
 1682 0014 BD46     	 mov sp,r7
 1683 0016 02B0     	 add sp,sp,#8
 1684              	 
 1685 0018 80BD     	 pop {r7,pc}
 1687              	.Lscope23:
 1689              	 .stabd 78,0,0
 1690              	 .weak _ZNSaIP13ShiftRegisterED1Ev
 1691              	 .thumb_set _ZNSaIP13ShiftRegisterED1Ev,_ZNSaIP13ShiftRegisterED2Ev
 1692 001a C046     	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j,comdat
 1693              	 .align 2
 1698              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j
 1699              	 .code 16
 1700              	 .thumb_func
 1702              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j:
 1703              	 .stabd 46,0,0
 1705              	.Ltext9:
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 1707              	.LM99:
 1708              	.LFBB24:
 1709 0000 80B5     	 push {r7,lr}
 1710 0002 84B0     	 sub sp,sp,#16
 1711 0004 00AF     	 add r7,sp,#0
 1712 0006 F860     	 str r0,[r7,#12]
 1713 0008 B960     	 str r1,[r7,#8]
 1714 000a 7A60     	 str r2,[r7,#4]
 1715              	.LBB19:
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1717              	.LM100:
 1718 000c BB68     	 ldr r3,[r7,#8]
 1719 000e 002B     	 cmp r3,#0
 1720 0010 07D0     	 beq .L64
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 1722              	.LM101:
 1723 0012 F968     	 ldr r1,[r7,#12]
 1724 0014 BA68     	 ldr r2,[r7,#8]
 1725 0016 7B68     	 ldr r3,[r7,#4]
 1726 0018 081C     	 mov r0,r1
 1727 001a 111C     	 mov r1,r2
 1728 001c 1A1C     	 mov r2,r3
 1729 001e FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j
 1730              	.L64:
 1731              	.LBE19:
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 1733              	.LM102:
 1734 0022 BD46     	 mov sp,r7
 1735 0024 04B0     	 add sp,sp,#16
 1736              	 
 1737 0026 80BD     	 pop {r7,pc}
 1739              	.Lscope24:
 1741              	 .stabd 78,0,0
 1742              	 .section .text._ZSt8_DestroyIPP13ShiftRegisterEvT_S3_,"axG",%progbits,_ZSt8_DestroyIPP13ShiftRegisterEvT_S3_,comdat
 1743              	 .align 2
 1747              	 .weak _ZSt8_DestroyIPP13ShiftRegisterEvT_S3_
 1748              	 .code 16
 1749              	 .thumb_func
 1751              	_ZSt8_DestroyIPP13ShiftRegisterEvT_S3_:
 1752              	 .stabd 46,0,0
 1754              	.Ltext10:
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     {
 1756              	.LM103:
 1757              	.LFBB25:
 1758 0000 80B5     	 push {r7,lr}
 1759 0002 82B0     	 sub sp,sp,#8
 1760 0004 00AF     	 add r7,sp,#0
 1761 0006 7860     	 str r0,[r7,#4]
 1762 0008 3960     	 str r1,[r7]
 1763              	.LBB20:
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 	__destroy(__first, __last);
 1765              	.LM104:
 1766 000a 7A68     	 ldr r2,[r7,#4]
 1767 000c 3B68     	 ldr r3,[r7]
 1768 000e 101C     	 mov r0,r2
 1769 0010 191C     	 mov r1,r3
 1770 0012 FFF7FEFF 	 bl _ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_
 1771              	.LBE20:
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h **** 
 1773              	.LM105:
 1774 0016 BD46     	 mov sp,r7
 1775 0018 02B0     	 add sp,sp,#8
 1776              	 
 1777 001a 80BD     	 pop {r7,pc}
 1779              	.Lscope25:
 1781              	 .stabd 78,0,0
 1782              	 .section .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_,comdat
 1783              	 .align 2
 1788              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_
 1789              	 .code 16
 1790              	 .thumb_func
 1792              	_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_:
 1793              	 .stabd 46,0,0
 1795              	.Ltext11:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****  */
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #include <new>
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #include <type_traits>
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #endif
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** {
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****   using std::size_t;
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****   using std::ptrdiff_t;
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****   /**
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *  @ingroup allocators
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *    - all allocation calls operator new
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****    */
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****   template<typename _Tp>
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****     class new_allocator
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****     {
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****     public:
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef size_t     size_type;
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef _Tp*       pointer;
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef _Tp&       reference;
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef _Tp        value_type;
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       template<typename _Tp1>
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         struct rebind
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #if __cplusplus >= 201103L
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #endif
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       template<typename _Tp1>
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       pointer
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { return std::__addressof(__x); }
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       const_pointer
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { return std::__addressof(__x); }
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // about what the return value is when __n == 0.
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       pointer
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { 
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 	if (__n > this->max_size())
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       }
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       void
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       deallocate(pointer __p, size_type)
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { ::operator delete(__p); }
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       size_type
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #if __cplusplus >= 201103L
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       template<typename _Up, typename... _Args>
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         void
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       template<typename _Up>
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         void 
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****         destroy(_Up* __p) { __p->~_Up(); }
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** #else
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       void 
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 1797              	.LM106:
 1798              	.LFBB26:
 1799 0000 80B5     	 push {r7,lr}
 1800 0002 84B0     	 sub sp,sp,#16
 1801 0004 00AF     	 add r7,sp,#0
 1802 0006 F860     	 str r0,[r7,#12]
 1803 0008 B960     	 str r1,[r7,#8]
 1804 000a 7A60     	 str r2,[r7,#4]
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 1806              	.LM107:
 1807 000c BB68     	 ldr r3,[r7,#8]
 1808 000e 0420     	 mov r0,#4
 1809 0010 191C     	 mov r1,r3
 1810 0012 FFF7FEFF 	 bl _ZnwjPv
 1811 0016 031E     	 sub r3,r0,#0
 1812 0018 02D0     	 beq .L67
 1814              	.LM108:
 1815 001a 7A68     	 ldr r2,[r7,#4]
 1816 001c 1268     	 ldr r2,[r2]
 1817 001e 1A60     	 str r2,[r3]
 1818              	.L67:
 1820              	.LM109:
 1821 0020 BD46     	 mov sp,r7
 1822 0022 04B0     	 add sp,sp,#16
 1823              	 
 1824 0024 80BD     	 pop {r7,pc}
 1826              	.Lscope26:
 1828              	 .stabd 78,0,0
 1829 0026 C046     	 .section .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv,"axG",%progbits,_ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv,comdat
 1830              	 .align 2
 1833              	 .weak _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 1834              	 .code 16
 1835              	 .thumb_func
 1837              	_ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv:
 1838              	 .stabd 46,0,0
 1840              	.Ltext12:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // Iterators -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Copyright (c) 1996-1998
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** /** @file bits/stl_iterator.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****  */
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #include <ext/type_traits.h>
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #include <bits/move.h>
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #include <bits/ptr_traits.h>
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** {
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    * @addtogroup iterators
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    * @{
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    */
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @code
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @endcode
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     class reverse_iterator
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     protected:
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _Iterator current;
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     public:
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator() : current() { }
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       explicit
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The copy constructor is normal.
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       : current(__x.current) { }
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       template<typename _Iter>
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	: current(__x.base()) { }
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       iterator_type
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       base() const
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return current; }
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reference
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator*() const
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *--__tmp;
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       pointer
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator->() const
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return &(operator*()); }
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  @c *this
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator&
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++()
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	--current;
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  The original value of @c *this
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++(int)
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	--current;
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return __tmp;
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  @c *this
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator&
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator--()
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++current;
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator
 219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator--(int)
 220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++current;
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return __tmp;
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator
 232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator+(difference_type __n) const
 233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  *this
 237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator&
 242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator+=(difference_type __n)
 243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	current -= __n;
 245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator
 254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator-(difference_type __n) const
 255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  *this
 259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reverse_iterator&
 264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator-=(difference_type __n)
 265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	current += __n;
 267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reference
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator[](difference_type __n) const
 277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *(*this + __n); }
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     };
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   //@{
 281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @return  A simple bool.
 285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 303:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 304:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__x == __y); }
 307:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 308:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 309:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 310:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y < __x; }
 313:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 314:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 315:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 316:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__y < __x); }
 319:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 320:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 321:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 322:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__x < __y); }
 325:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 326:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 327:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 328:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 329:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 330:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 331:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator>
 333:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline reverse_iterator<_Iterator>
 334:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 335:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 336:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 337:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 338:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 339:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 340:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 341:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 342:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 343:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 344:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 345:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 346:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 347:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 348:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 349:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 350:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 351:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 352:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 353:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 354:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 355:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 356:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__x == __y); }
 357:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 358:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 359:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 360:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 362:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y < __x; }
 363:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 364:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 365:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 366:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 367:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 368:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__y < __x); }
 369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 371:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 372:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 373:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 374:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return !(__x < __y); }
 375:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     // DR 685.
 379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline auto
 380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 381:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 382:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 383:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #else
 384:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 386:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 387:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #endif
 388:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 389:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   //@}
 390:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 391:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 395:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  push_back.
 398:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 399:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 400:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  save typing.
 401:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 402:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container>
 403:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     class back_insert_iterator
 404:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 405:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 406:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     protected:
 407:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _Container* container;
 408:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 409:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     public:
 410:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 411:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef _Container          container_type;
 412:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 413:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 414:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       explicit
 415:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 416:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 417:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 418:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 419:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 420:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 421:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 422:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 423:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 424:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 425:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 426:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  always append the value to the end of the container.
 427:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 428:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #if __cplusplus < 201103L
 429:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator&
 430:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 431:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 432:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_back(__value);
 433:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 434:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 435:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #else
 436:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator&
 437:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 438:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 439:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_back(__value);
 440:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 441:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 442:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 443:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator&
 444:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 445:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 446:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_back(std::move(__value));
 447:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 448:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 449:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #endif
 450:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 451:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.
 452:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator&
 453:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator*()
 454:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 455:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 456:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 457:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator&
 458:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++()
 459:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 460:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 461:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 462:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       back_insert_iterator
 463:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++(int)
 464:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 465:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     };
 466:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 467:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 468:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 469:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 470:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 471:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 472:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 473:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 474:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 475:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 476:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  types for you.
 477:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 478:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container>
 479:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline back_insert_iterator<_Container>
 480:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     back_inserter(_Container& __x)
 481:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 482:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 483:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 484:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 485:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 486:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 487:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 488:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  push_front.
 489:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 490:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 491:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  save typing.
 492:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 493:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container>
 494:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     class front_insert_iterator
 495:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 496:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 497:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     protected:
 498:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _Container* container;
 499:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 500:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     public:
 501:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 502:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef _Container          container_type;
 503:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 504:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 505:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 506:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 507:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 508:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 509:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 510:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 511:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 512:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 513:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 514:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 515:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 516:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  always prepend the value to the front of the container.
 517:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 518:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #if __cplusplus < 201103L
 519:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator&
 520:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 521:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 522:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_front(__value);
 523:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 524:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 525:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #else
 526:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator&
 527:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 528:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 529:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_front(__value);
 530:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 531:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 532:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 533:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator&
 534:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 535:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 536:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	container->push_front(std::move(__value));
 537:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 538:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 539:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #endif
 540:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 541:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.
 542:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator&
 543:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator*()
 544:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 545:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 546:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 547:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator&
 548:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++()
 549:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 550:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 551:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 552:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       front_insert_iterator
 553:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++(int)
 554:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 555:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     };
 556:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 557:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 558:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 559:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 560:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 561:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 562:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 563:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 564:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 565:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 566:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  types for you.
 567:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 568:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container>
 569:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline front_insert_iterator<_Container>
 570:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     front_inserter(_Container& __x)
 571:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 572:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 573:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 574:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 575:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 576:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 577:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 578:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 579:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  position.
 580:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 581:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 582:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  %iterator's position.)
 583:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 584:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 585:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  save typing.
 586:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 587:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container>
 588:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     class insert_iterator
 589:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 590:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 591:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     protected:
 592:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _Container* container;
 593:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typename _Container::iterator iter;
 594:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 595:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     public:
 596:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 597:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef _Container          container_type;
 598:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 599:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 600:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 601:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 602:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 603:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 604:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       : container(&__x), iter(__i) {}
 605:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 606:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /**
 607:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 608:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 609:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 610:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 611:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 612:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 613:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 614:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  value into the container at the place before the %iterator.
 615:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 616:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 617:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  insert values immediately after one another.  For example,
 618:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @code
 619:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     // vector v contains A and Z
 620:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 621:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 622:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     i = 1;
 623:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     i = 2;
 624:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     i = 3;
 625:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *
 626:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 627:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****        *  @endcode
 628:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       */
 629:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #if __cplusplus < 201103L
 630:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 631:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 632:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 633:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 634:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++iter;
 635:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 636:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 637:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #else
 638:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 639:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 640:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 641:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 642:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++iter;
 643:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 644:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 645:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 646:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 647:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 648:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 649:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 650:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++iter;
 651:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 652:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 653:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #endif
 654:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 655:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.
 656:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 657:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator*()
 658:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 659:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 660:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 661:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 662:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++()
 663:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 664:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 665:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 666:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       insert_iterator&
 667:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++(int)
 668:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *this; }
 669:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     };
 670:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 671:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   /**
 672:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 673:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 674:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *
 675:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 676:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****    *  types for you.
 681:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   */
 682:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Container, typename _Iterator>
 683:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline insert_iterator<_Container>
 684:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 685:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 686:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       return insert_iterator<_Container>(__x,
 687:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 					 typename _Container::iterator(__i));
 688:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     }
 689:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 690:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // @} group iterators
 691:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 692:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 693:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** } // namespace
 694:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 695:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 696:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** {
 697:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 698:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 699:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 700:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 701:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 702:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 703:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 704:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // using this template can instantiate different types, even if the
 705:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // _Iterator parameter is the same.
 706:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   using std::iterator_traits;
 707:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   using std::iterator;
 708:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 709:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     class __normal_iterator
 710:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     {
 711:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     protected:
 712:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _Iterator _M_current;
 713:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 714:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 715:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 716:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     public:
 717:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 718:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 719:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 720:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 721:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 722:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 723:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 724:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 725:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       : _M_current(_Iterator()) { }
 726:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 727:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       explicit
 728:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 729:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       : _M_current(__i) { }
 730:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 731:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // Allow iterator to const_iterator conversion
 732:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       template<typename _Iter>
 733:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 734:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 			  typename __enable_if<
 735:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 736:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 737:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****         : _M_current(__i.base()) { }
 738:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 739:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // Forward iterator requirements
 740:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reference
 741:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 742:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *_M_current; }
 743:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 744:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       pointer
 745:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 746:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return _M_current; }
 747:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 748:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator&
 749:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 750:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 751:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	++_M_current;
 752:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 753:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 754:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 755:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator
 756:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 757:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 758:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 759:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // Bidirectional iterator requirements
 760:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator&
 761:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 762:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       {
 763:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	--_M_current;
 764:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	return *this;
 765:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       }
 766:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 767:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator
 768:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 769:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 770:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 771:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       // Random access iterator requirements
 772:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       reference
 773:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 774:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return _M_current[__n]; }
 775:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 776:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator&
 777:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 778:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { _M_current += __n; return *this; }
 779:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 780:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator
 781:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 782:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 783:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 784:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator&
 785:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 786:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { _M_current -= __n; return *this; }
 787:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 788:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       __normal_iterator
 789:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 790:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 791:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 792:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       const _Iterator&
 793:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 1842              	.LM110:
 1843              	.LFBB27:
 1844 0000 80B5     	 push {r7,lr}
 1845 0002 82B0     	 sub sp,sp,#8
 1846 0004 00AF     	 add r7,sp,#0
 1847 0006 7860     	 str r0,[r7,#4]
 794:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return _M_current; }
 1849              	.LM111:
 1850 0008 7B68     	 ldr r3,[r7,#4]
 1851 000a 181C     	 mov r0,r3
 1852 000c BD46     	 mov sp,r7
 1853 000e 02B0     	 add sp,sp,#8
 1854              	 
 1855 0010 80BD     	 pop {r7,pc}
 1857              	.Lscope27:
 1859              	 .stabd 78,0,0
 1860 0012 C046     	 .section .text._ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_,"axG",%progbits,_ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_,comdat
 1861              	 .align 2
 1866              	 .weak _ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_
 1867              	 .code 16
 1868              	 .thumb_func
 1870              	_ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_:
 1871              	 .stabd 46,0,0
 1873              	.Ltext13:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****  */
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** {
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus < 201103L
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _BoolType>
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __iter_swap
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static void
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****             _ValueType1;
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<>
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __iter_swap<true>
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static void 
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****           swap(*__a, *__b);
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         }
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   Nothing.
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  iterators themselves.
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline void
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus < 201103L
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	_ValueType1;
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	_ValueType2;
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ValueType2>)
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ValueType1>)
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	_ReferenceType1;
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	_ReferenceType2;
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #else
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       swap(*__a, *__b);
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  The ranges must not overlap.
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     _ForwardIterator2
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __first2;
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  preprocessor macro.
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Tp>
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline const _Tp&
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       if (__b < __a)
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	return __b;
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __a;
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  preprocessor macro.
 214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Tp>
 216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline const _Tp&
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       if (__a < __b)
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	return __b;
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __a;
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline const _Tp&
 240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       if (__comp(__b, __a))
 244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	return __b;
 245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __a;
 246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline const _Tp&
 261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       if (__comp(__a, __b))
 265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	return __b;
 266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __a;
 267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Iterator>
 272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct _Niter_base
 273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { };
 275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Iterator>
 277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // Likewise, for move_iterator.
 282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Iterator>
 283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct _Miter_base
 284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { };
 286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Iterator>
 288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __miter_base(_Iterator __it)
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // a for loop with an explicit count.
 297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool, bool, typename>
 299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move
 300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _OI
 303:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 304:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 305:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 306:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *__result = *__first;
 307:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 308:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 309:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 310:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 311:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 312:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Category>
 313:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 314:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 315:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 316:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _OI
 317:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 318:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 319:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 320:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 321:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 322:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 323:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 324:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 325:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 326:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<>
 327:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 328:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 329:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 330:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _OI
 331:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         { 
 333:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 334:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 335:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    {
 336:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      *__result = *__first;
 337:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      ++__first;
 338:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      ++__result;
 339:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    }
 340:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 341:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 342:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 343:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 344:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 345:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<>
 346:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 347:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 348:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 349:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _OI
 350:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 351:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         { 
 352:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 353:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 354:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    {
 355:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 356:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      ++__first;
 357:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      ++__result;
 358:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    }
 359:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 360:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 362:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 363:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 364:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove>
 365:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 366:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 367:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _Tp>
 368:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _Tp*
 369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 371:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 372:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 373:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  static_assert( is_copy_assignable<_Tp>::value,
 374:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                 "type is not assignable" );
 375:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  if (_Num)
 378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result + _Num;
 380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 381:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 382:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 383:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 384:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _OI
 385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 386:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 387:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 388:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 389:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 390:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 391:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 395:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 398:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 399:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 400:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 401:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _CharT>
 402:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct char_traits;
 403:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 404:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 405:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     class istreambuf_iterator;
 406:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 407:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 408:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     class ostreambuf_iterator;
 409:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 410:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 414:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 416:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 418:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 419:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 420:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 421:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 422:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 423:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 424:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				    _CharT*>::__type
 425:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 426:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 427:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 428:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 429:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _OI
 430:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 431:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 432:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 433:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 434:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 435:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 436:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 437:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 438:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 439:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 440:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 441:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 442:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 443:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   result + (first - last)
 444:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 445:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 446:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 447:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 448:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 449:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 450:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 451:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 452:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  within [first,last).
 453:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 454:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 455:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _OI
 456:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 457:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 458:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 459:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 460:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 461:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 462:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 463:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 464:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 465:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 466:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	       __result));
 467:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 468:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 469:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 470:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 471:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 472:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 473:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 474:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 475:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 476:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   result + (first - last)
 477:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 478:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 479:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 480:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 481:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 482:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 483:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 484:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 485:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  within [first,last).
 486:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 487:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 488:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _OI
 489:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 490:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 491:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 492:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 493:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 494:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 495:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 496:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 497:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 498:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 				       std::__miter_base(__last), __result);
 499:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 500:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 501:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 502:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #else
 503:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 504:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 505:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 506:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool, bool, typename>
 507:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move_backward
 508:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 509:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 510:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _BI2
 511:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 512:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 513:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  while (__first != __last)
 514:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *--__result = *--__last;
 515:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 516:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 517:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 518:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 519:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 520:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _Category>
 521:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 522:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 523:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 524:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _BI2
 525:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 526:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 527:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  while (__first != __last)
 528:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 529:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 530:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 531:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 532:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 533:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 534:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<>
 535:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 536:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 537:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 538:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _BI2
 539:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 540:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 541:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 542:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 543:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *--__result = *--__last;
 544:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 545:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 546:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 547:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 548:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 549:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<>
 550:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 551:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 552:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 553:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _BI2
 554:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 555:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 556:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 557:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 558:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 559:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result;
 560:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 561:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 562:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 563:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 564:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove>
 565:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 566:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 567:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       template<typename _Tp>
 568:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         static _Tp*
 569:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 570:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 571:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 572:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 573:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  static_assert( is_copy_assignable<_Tp>::value,
 574:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                 "type is not assignable" );
 575:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** #endif
 576:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 577:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  if (_Num)
 578:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 579:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result - _Num;
 580:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 581:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 582:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 583:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 584:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _BI2
 585:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 586:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 587:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 588:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 589:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 590:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueType1)
 591:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                     && __is_pointer<_BI1>::__value
 592:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                     && __is_pointer<_BI2>::__value
 593:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 594:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 595:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 596:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	                               _Category>::__copy_move_b(__first,
 597:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 								 __last,
 598:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 								 __result);
 599:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 600:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 601:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 602:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _BI2
 603:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 604:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 605:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return _BI2(std::__copy_move_backward_a<_IsMove>
 606:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 607:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 		   std::__niter_base(__result)));
 608:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 609:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 610:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   /**
 611:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 612:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 613:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 614:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 615:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 616:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  @return   result - (first - last)
 617:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 618:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 619:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 620:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 621:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 622:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 623:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 624:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *
 625:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 626:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 627:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   */
 628:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 629:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     inline _BI2
 630:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 1875              	.LM112:
 1876              	.LFBB28:
 1877 0000 90B5     	 push {r4,r7,lr}
 1878 0002 85B0     	 sub sp,sp,#20
 1879 0004 00AF     	 add r7,sp,#0
 1880 0006 F860     	 str r0,[r7,#12]
 1881 0008 B960     	 str r1,[r7,#8]
 1882 000a 7A60     	 str r2,[r7,#4]
 631:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 632:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       // concept requirements
 633:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 634:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 635:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 636:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 637:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 638:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 639:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 640:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
 641:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 642:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	       __result));
 1884              	.LM113:
 1885 000c FB68     	 ldr r3,[r7,#12]
 1886 000e 181C     	 mov r0,r3
 1887 0010 FFF7FEFF 	 bl _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
 1888 0014 041C     	 mov r4,r0
 1889 0016 BB68     	 ldr r3,[r7,#8]
 1890 0018 181C     	 mov r0,r3
 1891 001a FFF7FEFF 	 bl _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
 1892 001e 021C     	 mov r2,r0
 1893 0020 7B68     	 ldr r3,[r7,#4]
 1894 0022 201C     	 mov r0,r4
 1895 0024 111C     	 mov r1,r2
 1896 0026 1A1C     	 mov r2,r3
 1897 0028 FFF7FEFF 	 bl _ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 1898 002c 031C     	 mov r3,r0
 643:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 1900              	.LM114:
 1901 002e 181C     	 mov r0,r3
 1902 0030 BD46     	 mov sp,r7
 1903 0032 05B0     	 add sp,sp,#20
 1904              	 
 1905 0034 90BD     	 pop {r4,r7,pc}
 1907              	.Lscope28:
 1909              	 .stabd 78,0,0
 1910 0036 C046     	 .section .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv,"axG",%progbits,_ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv,comdat
 1911              	 .align 2
 1914              	 .weak _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv
 1915              	 .code 16
 1916              	 .thumb_func
 1918              	_ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv:
 1919              	 .stabd 46,0,0
 1921              	.Ltext14:
 741:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       { return *_M_current; }
 1923              	.LM115:
 1924              	.LFBB29:
 1925 0000 80B5     	 push {r7,lr}
 1926 0002 82B0     	 sub sp,sp,#8
 1927 0004 00AF     	 add r7,sp,#0
 1928 0006 7860     	 str r0,[r7,#4]
 742:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 1930              	.LM116:
 1931 0008 7B68     	 ldr r3,[r7,#4]
 1932 000a 1B68     	 ldr r3,[r3]
 1933 000c 181C     	 mov r0,r3
 1934 000e BD46     	 mov sp,r7
 1935 0010 02B0     	 add sp,sp,#8
 1936              	 
 1937 0012 80BD     	 pop {r7,pc}
 1939              	.Lscope29:
 1941              	 .stabd 78,0,0
 1942              	 .section .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc,"axG",%progbits,_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc,comdat
 1943              	 .align 2
 1948              	 .weak _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc
 1949              	 .code 16
 1950              	 .thumb_func
 1952              	_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc:
 1953              	 .stabd 46,0,0
 1955              	.Ltext15:
 928:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 929:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 930:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 931:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       push_back(value_type&& __x)
 932:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 933:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 934:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename... _Args>
 935:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
 936:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         emplace_back(_Args&&... __args);
 937:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
 938:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 939:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 940:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Removes last element.
 941:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 942:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 943:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 944:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that no data is returned, and if the last element's
 945:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 946:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  called.
 947:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 948:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
 949:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 950:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 951:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	--this->_M_impl._M_finish;
 952:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 953:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 954:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 955:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
 956:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 957:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 958:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 959:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __args  Arguments.
 960:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 961:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 962:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert an object of type T constructed
 963:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 964:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 965:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  and if it is frequently used the user should consider using
 966:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  std::list.
 967:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 968:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename... _Args>
 969:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         iterator
 970:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         emplace(const_iterator __position, _Args&&... __args);
 971:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 972:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 973:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 974:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 975:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
 976:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 977:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 978:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
 979:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
 980:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 981:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  used the user should consider using std::list.
 982:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 983:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
 984:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
 985:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
 986:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
 987:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 988:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 989:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
 990:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 991:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
 992:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
 993:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
 994:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 995:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  used the user should consider using std::list.
 996:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
 997:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
 998:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(iterator __position, const value_type& __x);
 999:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1000:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1001:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1002:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1003:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1004:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1005:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1006:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1007:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1008:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1009:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1010:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1011:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  used the user should consider using std::list.
1012:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1013:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
1014:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1015:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return emplace(__position, std::move(__x)); }
1016:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1017:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1018:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1019:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1020:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
1021:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1022:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert copies of the data in the 
1023:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1024:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  specified by @a position.
1025:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1026:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1027:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1028:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  consider using std::list.
1029:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1030:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
1031:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1032:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return this->insert(__position, __l.begin(), __l.end()); }
1033:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1034:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1035:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1036:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1037:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1038:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1039:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1040:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1041:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1042:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1043:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1044:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1045:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1046:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1047:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1048:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  consider using std::list.
1049:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1050:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
1051:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1052:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1053:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	difference_type __offset = __position - cbegin();
1054:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1055:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return begin() + __offset;
1056:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
1057:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1058:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1059:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1060:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1061:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1062:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1063:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1064:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1065:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1066:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1067:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1068:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1069:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  consider using std::list.
1070:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1071:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1072:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1073:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1074:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1075:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1076:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1077:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1078:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1079:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1080:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1081:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1082:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1083:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1084:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1085:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1086:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  by @a pos.
1087:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1088:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1089:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1090:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  consider using std::list.
1091:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1092:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator,
1093:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1094:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         iterator
1095:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         insert(const_iterator __position, _InputIterator __first,
1096:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       _InputIterator __last)
1097:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1098:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1099:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			     __first, __last, __false_type());
1101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  return begin() + __offset;
1102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  by @a pos.
1113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  consider using std::list.
1117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	       _InputIterator __last)
1122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Remove element at given position.
1131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will erase the element at the given position and thus
1135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  shorten the %vector by one.
1136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the pointer is the user's responsibility.
1143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
1145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       erase(const_iterator __position)
1147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       erase(iterator __position)
1150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _M_erase(__position); }
1151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Remove a range of elements.
1155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *                  erased.
1158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *           prior to erasing (or end()).
1160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This function will erase the elements in the range
1162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the elements, and that if the elements themselves are
1168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       iterator
1172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	const auto __beg = begin();
1176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	const auto __cbeg = cbegin();
1177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
1179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       erase(iterator __first, iterator __last)
1181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _M_erase(__first, __last); }
1182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @brief  Swaps data with another %vector.
1186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *
1188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       swap(vector& __x)
1195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       noexcept(_Alloc_traits::_S_nothrow_swap())
1197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
1203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  the user's responsibility.
1209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****     protected:
1215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       /**
1216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****        */
1219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _ForwardIterator>
1220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         pointer
1221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  __try
1226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    {
1227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
1229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	      return __result;
1230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    }
1231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  __catch(...)
1232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    {
1233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	      _M_deallocate(__result, __n);
1234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	      __throw_exception_again;
1235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    }
1236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Internal constructor functions follow.
1240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _Integer>
1246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			       __false_type)
1260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    iterator_category _IterCategory;
1263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  for (; __first != __last; ++__first)
1273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    emplace_back(*__first);
1275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    push_back(*__first);
1277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _ForwardIterator>
1282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  this->_M_impl._M_finish =
1290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					this->_M_impl._M_start,
1292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // vector(n,value,a) constructor.
1297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, 
1301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
1302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1303:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
1304:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1305:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1306:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the vector(n) constructor.
1307:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1308:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_default_initialize(size_type __n)
1309:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1310:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	std::__uninitialized_default_n_a(this->_M_impl._M_start, __n, 
1311:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 					 _M_get_Tp_allocator());
1312:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1313:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
1314:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1315:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1316:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1317:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // assignment work for the range versions.
1318:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1319:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1320:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1321:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1322:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1323:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _Integer>
1324:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1325:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1326:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         { _M_fill_assign(__n, __val); }
1327:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1328:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1329:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1330:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1331:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1332:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			   __false_type)
1333:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1334:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1335:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    iterator_category _IterCategory;
1336:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1337:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1338:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1339:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1340:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1341:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1342:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1343:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 		      std::input_iterator_tag);
1344:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1345:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1346:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _ForwardIterator>
1347:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1348:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1349:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 		      std::forward_iterator_tag);
1350:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1351:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1352:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // to be the same thing.
1353:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1354:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1355:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1356:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1357:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Internal insert functions follow.
1358:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1359:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1360:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1361:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1362:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1363:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _Integer>
1364:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1365:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1366:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			   __true_type)
1367:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1368:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1370:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1371:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1372:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1373:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			   _InputIterator __last, __false_type)
1374:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         {
1375:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	    iterator_category _IterCategory;
1377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	}
1379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1381:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _InputIterator>
1382:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1383:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1384:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1386:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1387:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename _ForwardIterator>
1388:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1389:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1390:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1391:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1392:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // the same thing.
1394:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1395:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus >= 201103L
1398:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by resize(n).
1399:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1400:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_default_append(size_type __n);
1401:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1402:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       bool
1403:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_shrink_to_fit();
1404:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1405:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1406:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by insert(p,x)
1407:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #if __cplusplus < 201103L
1408:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       void
1409:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1410:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #else
1411:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename... _Args>
1412:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1413:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1414:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1415:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       template<typename... _Args>
1416:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         void
1417:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****         _M_emplace_back_aux(_Args&&... __args);
1418:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** #endif
1419:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1420:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       // Called by the latter.
1421:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       size_type
1422:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 1957              	.LM117:
 1958              	.LFBB30:
 1959 0000 90B5     	 push {r4,r7,lr}
 1960 0002 87B0     	 sub sp,sp,#28
 1961 0004 00AF     	 add r7,sp,#0
 1962 0006 F860     	 str r0,[r7,#12]
 1963 0008 B960     	 str r1,[r7,#8]
 1964 000a 7A60     	 str r2,[r7,#4]
 1965              	.LBB21:
1423:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
1424:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	if (max_size() - size() < __n)
 1967              	.LM118:
 1968 000c FB68     	 ldr r3,[r7,#12]
 1969 000e 181C     	 mov r0,r3
 1970 0010 FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv
 1971 0014 041C     	 mov r4,r0
 1972 0016 FB68     	 ldr r3,[r7,#12]
 1973 0018 181C     	 mov r0,r3
 1974 001a FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 1975 001e 031C     	 mov r3,r0
 1976 0020 E21A     	 sub r2,r4,r3
 1977 0022 BB68     	 ldr r3,[r7,#8]
 1978 0024 9A42     	 cmp r2,r3
 1979 0026 9B41     	 sbc r3,r3,r3
 1980 0028 5B42     	 neg r3,r3
 1981 002a DBB2     	 uxtb r3,r3
 1982 002c 002B     	 cmp r3,#0
 1983 002e 03D0     	 beq .L77
1425:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	  __throw_length_error(__N(__s));
 1985              	.LM119:
 1986 0030 7B68     	 ldr r3,[r7,#4]
 1987 0032 181C     	 mov r0,r3
 1988 0034 FFF7FEFF 	 bl _ZSt20__throw_length_errorPKc
 1989              	.L77:
1426:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
1427:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 1991              	.LM120:
 1992 0038 FB68     	 ldr r3,[r7,#12]
 1993 003a 181C     	 mov r0,r3
 1994 003c FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 1995 0040 041C     	 mov r4,r0
 1996 0042 FB68     	 ldr r3,[r7,#12]
 1997 0044 181C     	 mov r0,r3
 1998 0046 FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 1999 004a 031C     	 mov r3,r0
 2000 004c 3B61     	 str r3,[r7,#16]
 2001 004e 1023     	 mov r3,#16
 2002 0050 FA18     	 add r2,r7,r3
 2003 0052 0823     	 mov r3,#8
 2004 0054 FB18     	 add r3,r7,r3
 2005 0056 101C     	 mov r0,r2
 2006 0058 191C     	 mov r1,r3
 2007 005a FFF7FEFF 	 bl _ZSt3maxIjERKT_S2_S2_
 2008 005e 031C     	 mov r3,r0
 2009 0060 1B68     	 ldr r3,[r3]
 2010 0062 E318     	 add r3,r4,r3
 2011 0064 7B61     	 str r3,[r7,#20]
1428:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2013              	.LM121:
 2014 0066 FB68     	 ldr r3,[r7,#12]
 2015 0068 181C     	 mov r0,r3
 2016 006a FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
 2017 006e 021E     	 sub r2,r0,#0
 2018 0070 7B69     	 ldr r3,[r7,#20]
 2019 0072 9A42     	 cmp r2,r3
 2020 0074 07D8     	 bhi .L78
 2022              	.LM122:
 2023 0076 FB68     	 ldr r3,[r7,#12]
 2024 0078 181C     	 mov r0,r3
 2025 007a FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv
 2026 007e 021E     	 sub r2,r0,#0
 2027 0080 7B69     	 ldr r3,[r7,#20]
 2028 0082 9A42     	 cmp r2,r3
 2029 0084 05D2     	 bcs .L79
 2030              	.L78:
 2032              	.LM123:
 2033 0086 FB68     	 ldr r3,[r7,#12]
 2034 0088 181C     	 mov r0,r3
 2035 008a FFF7FEFF 	 bl _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv
 2036 008e 031C     	 mov r3,r0
 2037 0090 00E0     	 b .L81
 2038              	.L79:
 2040              	.LM124:
 2041 0092 7B69     	 ldr r3,[r7,#20]
 2042              	.L81:
 2043              	.LBE21:
1429:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 2045              	.LM125:
 2046 0094 181C     	 mov r0,r3
 2047 0096 BD46     	 mov sp,r7
 2048 0098 07B0     	 add sp,sp,#28
 2049              	 
 2050 009a 90BD     	 pop {r4,r7,pc}
 2055              	.Lscope30:
 2057              	 .stabd 78,0,0
 2058              	 .section .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv,"axG",%progbits,_ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv,comdat
 2059              	 .align 2
 2062              	 .weak _ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv
 2063              	 .code 16
 2064              	 .thumb_func
 2066              	_ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv:
 2067              	 .stabd 46,0,0
 547:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2069              	.LM126:
 2070              	.LFBB31:
 2071 0000 80B5     	 push {r7,lr}
 2072 0002 84B0     	 sub sp,sp,#16
 2073 0004 00AF     	 add r7,sp,#0
 2074 0006 7860     	 str r0,[r7,#4]
 548:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 2076              	.LM127:
 2077 0008 7B68     	 ldr r3,[r7,#4]
 2078 000a 0C22     	 mov r2,#12
 2079 000c BA18     	 add r2,r7,r2
 2080 000e 101C     	 mov r0,r2
 2081 0010 191C     	 mov r1,r3
 2082 0012 FFF7FEFF 	 bl _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC1ERKS3_
 2083 0016 FB68     	 ldr r3,[r7,#12]
 2084 0018 181C     	 mov r0,r3
 2085 001a BD46     	 mov sp,r7
 2086 001c 04B0     	 add sp,sp,#16
 2087              	 
 2088 001e 80BD     	 pop {r7,pc}
 2090              	.Lscope31:
 2092              	 .stabd 78,0,0
 2093              	 .section .text._ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_,"axG",%progbits,_ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_,comdat
 2094              	 .align 2
 2098              	 .weak _ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
 2099              	 .code 16
 2100              	 .thumb_func
 2102              	_ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:
 2103              	 .stabd 46,0,0
 2105              	.Ltext16:
 795:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     };
 796:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 797:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 798:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 799:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 800:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 801:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 802:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 803:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 804:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 805:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // Forward iterator requirements
 806:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 807:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 808:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 809:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 810:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 811:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 812:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 813:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 814:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 815:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 816:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 817:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 818:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 819:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 820:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 821:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 822:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 823:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 824:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 825:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 826:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 827:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 828:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 829:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 830:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 831:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 832:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 833:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 834:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // Random access iterator requirements
 835:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 836:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 837:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 838:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 839:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 840:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 841:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 842:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 843:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 844:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 845:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 846:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 847:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 848:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 849:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 850:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 851:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 852:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 853:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 854:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 855:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 856:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 857:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 858:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 859:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 860:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 861:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 862:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 863:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 864:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 865:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 866:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 867:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 868:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 869:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 870:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 871:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 872:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 873:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 874:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 875:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 876:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 877:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 878:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 879:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 880:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 881:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 882:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 883:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 884:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 885:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline bool
 886:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 887:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 888:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 889:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 890:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 891:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 892:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 893:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 894:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   // parameters.
 895:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 896:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 897:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     // DR 685.
 898:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline auto
 899:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 900:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
 901:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 902:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #else
 903:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 904:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 905:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 906:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** #endif
 907:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 908:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 909:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 910:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 911:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 2107              	.LM128:
 2108              	.LFBB32:
 2109 0000 90B5     	 push {r4,r7,lr}
 2110 0002 83B0     	 sub sp,sp,#12
 2111 0004 00AF     	 add r7,sp,#0
 2112 0006 7860     	 str r0,[r7,#4]
 2113 0008 3960     	 str r1,[r7]
 912:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 913:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 914:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 2115              	.LM129:
 2116 000a 7B68     	 ldr r3,[r7,#4]
 2117 000c 181C     	 mov r0,r3
 2118 000e FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 2119 0012 031C     	 mov r3,r0
 2120 0014 1B68     	 ldr r3,[r3]
 2121 0016 1C1C     	 mov r4,r3
 2122 0018 3B68     	 ldr r3,[r7]
 2123 001a 181C     	 mov r0,r3
 2124 001c FFF7FEFF 	 bl _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
 2125 0020 031C     	 mov r3,r0
 2126 0022 1B68     	 ldr r3,[r3]
 2127 0024 E31A     	 sub r3,r4,r3
 2128 0026 9B10     	 asr r3,r3,#2
 2129 0028 181C     	 mov r0,r3
 2130 002a BD46     	 mov sp,r7
 2131 002c 03B0     	 add sp,sp,#12
 2132              	 
 2133 002e 90BD     	 pop {r4,r7,pc}
 2135              	.Lscope32:
 2137              	 .stabd 78,0,0
 2138              	 .section .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj,"axG",%progbits,_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj,comdat
 2139              	 .align 2
 2143              	 .weak _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj
 2144              	 .code 16
 2145              	 .thumb_func
 2147              	_ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj:
 2148              	 .stabd 46,0,0
 2150              	.Ltext17:
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       {
 2152              	.LM130:
 2153              	.LFBB33:
 2154 0000 80B5     	 push {r7,lr}
 2155 0002 82B0     	 sub sp,sp,#8
 2156 0004 00AF     	 add r7,sp,#0
 2157 0006 7860     	 str r0,[r7,#4]
 2158 0008 3960     	 str r1,[r7]
 2159              	.LBB22:
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 2161              	.LM131:
 2162 000a 3B68     	 ldr r3,[r7]
 2163 000c 002B     	 cmp r3,#0
 2164 000e 07D0     	 beq .L87
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 2166              	.LM132:
 2167 0010 7A68     	 ldr r2,[r7,#4]
 2168 0012 3B68     	 ldr r3,[r7]
 2169 0014 101C     	 mov r0,r2
 2170 0016 191C     	 mov r1,r3
 2171 0018 FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j
 2172 001c 031C     	 mov r3,r0
 2173 001e 00E0     	 b .L88
 2174              	.L87:
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       }
 2176              	.LM133:
 2177 0020 0023     	 mov r3,#0
 2178              	.L88:
 2179              	.LBE22:
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 2181              	.LM134:
 2182 0022 181C     	 mov r0,r3
 2183 0024 BD46     	 mov sp,r7
 2184 0026 02B0     	 add sp,sp,#8
 2185              	 
 2186 0028 80BD     	 pop {r7,pc}
 2188              	.Lscope33:
 2190              	 .stabd 78,0,0
 2191 002a C046     	 .section .text._ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_,"axG",%progbits,_ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_,comdat
 2192              	 .align 2
 2198              	 .weak _ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_
 2199              	 .code 16
 2200              	 .thumb_func
 2202              	_ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_:
 2203              	 .stabd 46,0,0
 2205              	.Ltext18:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****  */
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** {
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_copy
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static _ForwardIterator
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         {
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __try
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      return __cur;
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __catch(...)
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      __throw_exception_again;
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	}
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<>
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_copy<true>
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static _ForwardIterator
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   /**
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   */
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline _ForwardIterator
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	_ValueType1;
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	_ValueType2;
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = true;
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #else
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType;
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = is_assignable<_ValueType1, _RefType>::value;
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #endif
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 				       && __assignable>::
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_fill
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static void
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         {
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __try
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __catch(...)
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	}
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<>
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_fill<true>
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static void
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   /**
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @return   Nothing.
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   */
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline void
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		       const _Tp& __x)
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	_ValueType;
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = true;
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #else
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #endif
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static void
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			const _Tp& __x)
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         {
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __try
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __catch(...)
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    {
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    }
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	}
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<>
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 214:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 215:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         static void
 216:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			const _Tp& __x)
 218:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****         { std::fill_n(__first, __n, __x); }
 219:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
 220:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 221:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   /**
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 226:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  @return   Nothing.
 227:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *
 228:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 229:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   */
 230:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 231:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline void
 232:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 233:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 234:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 235:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	_ValueType;
 236:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 237:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = true;
 238:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #else
 239:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 240:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 241:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #endif
 242:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 243:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 244:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 245:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 246:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 247:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 248:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 249:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 250:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 251:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   //  any of the POD optimizations.
 252:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 253:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 254:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	   typename _Allocator>
 255:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     _ForwardIterator
 256:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 257:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 258:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 259:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 260:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       __try
 261:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	{
 262:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 263:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 264:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 265:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  return __cur;
 266:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	}
 267:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       __catch(...)
 268:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	{
 269:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 270:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 271:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	}
 272:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 273:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 274:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 275:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline _ForwardIterator
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 277:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 280:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 281:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	   typename _Allocator>
 282:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline _ForwardIterator
 283:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 284:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 285:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 286:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 287:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 288:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 					 __result, __alloc);
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 291:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 292:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	   typename _Allocator>
 293:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     inline _ForwardIterator
 294:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 2207              	.LM135:
 2208              	.LFBB34:
 2209 0000 80B5     	 push {r7,lr}
 2210 0002 84B0     	 sub sp,sp,#16
 2211 0004 00AF     	 add r7,sp,#0
 2212 0006 F860     	 str r0,[r7,#12]
 2213 0008 B960     	 str r1,[r7,#8]
 2214 000a 7A60     	 str r2,[r7,#4]
 2215 000c 3B60     	 str r3,[r7]
 295:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 				       _InputIterator __last,
 296:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 				       _ForwardIterator __result,
 297:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 				       _Allocator& __alloc)
 298:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     {
 299:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a
 300:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 301:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 2217              	.LM136:
 2218 000e F868     	 ldr r0,[r7,#12]
 2219 0010 B968     	 ldr r1,[r7,#8]
 2220 0012 7A68     	 ldr r2,[r7,#4]
 2221 0014 3B68     	 ldr r3,[r7]
 2222 0016 FFF7FEFF 	 bl _ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E
 2223 001a 031C     	 mov r3,r0
 302:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 2225              	.LM137:
 2226 001c 181C     	 mov r0,r3
 2227 001e BD46     	 mov sp,r7
 2228 0020 04B0     	 add sp,sp,#16
 2229              	 
 2230 0022 80BD     	 pop {r7,pc}
 2232              	.Lscope34:
 2234              	 .stabd 78,0,0
 2235              	 .section .text._ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_,"axG",%progbits,_ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC5ERKS3_,comdat
 2236              	 .align 2
 2240              	 .weak _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_
 2241              	 .code 16
 2242              	 .thumb_func
 2244              	_ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_:
 2245              	 .stabd 46,0,0
 2247              	.Ltext19:
 728:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h ****       : _M_current(__i) { }
 2249              	.LM138:
 2250              	.LFBB35:
 2251 0000 80B5     	 push {r7,lr}
 2252 0002 82B0     	 sub sp,sp,#8
 2253 0004 00AF     	 add r7,sp,#0
 2254 0006 7860     	 str r0,[r7,#4]
 2255 0008 3960     	 str r1,[r7]
 2256              	.LBB23:
 729:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator.h **** 
 2258              	.LM139:
 2259 000a 3B68     	 ldr r3,[r7]
 2260 000c 1A68     	 ldr r2,[r3]
 2261 000e 7B68     	 ldr r3,[r7,#4]
 2262 0010 1A60     	 str r2,[r3]
 2263              	.LBE23:
 2264 0012 7B68     	 ldr r3,[r7,#4]
 2265 0014 181C     	 mov r0,r3
 2266 0016 BD46     	 mov sp,r7
 2267 0018 02B0     	 add sp,sp,#8
 2268              	 
 2269 001a 80BD     	 pop {r7,pc}
 2271              	.Lscope35:
 2273              	 .stabd 78,0,0
 2274              	 .weak _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC1ERKS3_
 2275              	 .thumb_set _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC1ERKS3_,_ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_
 2276              	 .section .text._ZNSaIP13ShiftRegisterEC2Ev,"axG",%progbits,_ZNSaIP13ShiftRegisterEC5Ev,comdat
 2277              	 .align 2
 2280              	 .weak _ZNSaIP13ShiftRegisterEC2Ev
 2281              	 .code 16
 2282              	 .thumb_func
 2284              	_ZNSaIP13ShiftRegisterEC2Ev:
 2285              	 .stabd 46,0,0
 2287              	.Ltext20:
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 2289              	.LM140:
 2290              	.LFBB36:
 2291 0000 80B5     	 push {r7,lr}
 2292 0002 82B0     	 sub sp,sp,#8
 2293 0004 00AF     	 add r7,sp,#0
 2294 0006 7860     	 str r0,[r7,#4]
 2295              	.LBB24:
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\allocator.h **** 
 2297              	.LM141:
 2298 0008 7B68     	 ldr r3,[r7,#4]
 2299 000a 181C     	 mov r0,r3
 2300 000c FFF7FEFF 	 bl _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev
 2301              	.LBE24:
 2302 0010 7B68     	 ldr r3,[r7,#4]
 2303 0012 181C     	 mov r0,r3
 2304 0014 BD46     	 mov sp,r7
 2305 0016 02B0     	 add sp,sp,#8
 2306              	 
 2307 0018 80BD     	 pop {r7,pc}
 2309              	.Lscope36:
 2311              	 .stabd 78,0,0
 2312              	 .weak _ZNSaIP13ShiftRegisterEC1Ev
 2313              	 .thumb_set _ZNSaIP13ShiftRegisterEC1Ev,_ZNSaIP13ShiftRegisterEC2Ev
 2314 001a C046     	 .section .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED5Ev,comdat
 2315              	 .align 2
 2318              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev
 2319              	 .code 16
 2320              	 .thumb_func
 2322              	_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev:
 2323              	 .stabd 46,0,0
 2325              	.Ltext21:
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2327              	.LM142:
 2328              	.LFBB37:
 2329 0000 80B5     	 push {r7,lr}
 2330 0002 82B0     	 sub sp,sp,#8
 2331 0004 00AF     	 add r7,sp,#0
 2332 0006 7860     	 str r0,[r7,#4]
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2334              	.LM143:
 2335 0008 7B68     	 ldr r3,[r7,#4]
 2336 000a 181C     	 mov r0,r3
 2337 000c BD46     	 mov sp,r7
 2338 000e 02B0     	 add sp,sp,#8
 2339              	 
 2340 0010 80BD     	 pop {r7,pc}
 2342              	.Lscope37:
 2344              	 .stabd 78,0,0
 2345              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED1Ev
 2346              	 .thumb_set _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED1Ev,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev
 2347 0012 C046     	 .section .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j,"axG",%progbits,_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j,comdat
 2348              	 .align 2
 2353              	 .weak _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j
 2354              	 .code 16
 2355              	 .thumb_func
 2357              	_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j:
 2358              	 .stabd 46,0,0
 2360              	.Ltext22:
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2362              	.LM144:
 2363              	.LFBB38:
 2364 0000 80B5     	 push {r7,lr}
 2365 0002 84B0     	 sub sp,sp,#16
 2366 0004 00AF     	 add r7,sp,#0
 2367 0006 F860     	 str r0,[r7,#12]
 2368 0008 B960     	 str r1,[r7,#8]
 2369 000a 7A60     	 str r2,[r7,#4]
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 2371              	.LM145:
 2372 000c F968     	 ldr r1,[r7,#12]
 2373 000e BA68     	 ldr r2,[r7,#8]
 2374 0010 7B68     	 ldr r3,[r7,#4]
 2375 0012 081C     	 mov r0,r1
 2376 0014 111C     	 mov r1,r2
 2377 0016 1A1C     	 mov r2,r3
 2378 0018 FFF7FEFF 	 bl _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j
 2379 001c BD46     	 mov sp,r7
 2380 001e 04B0     	 add sp,sp,#16
 2381              	 
 2382 0020 80BD     	 pop {r7,pc}
 2384              	.Lscope38:
 2386              	 .stabd 78,0,0
 2387 0022 C046     	 .section .text._ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_,"axG",%progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_,comdat
 2388              	 .align 2
 2390              	 .weak _ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_
 2391              	 .code 16
 2392              	 .thumb_func
 2394              	_ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_:
 2395              	 .stabd 46,0,0
 2397              	.Ltext23:
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     };
 2399              	.LM146:
 2400              	.LFBB39:
 2401 0000 80B5     	 push {r7,lr}
 2402 0002 82B0     	 sub sp,sp,#8
 2403 0004 00AF     	 add r7,sp,#0
 2404 0006 7860     	 str r0,[r7,#4]
 2405 0008 3960     	 str r1,[r7]
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_construct.h ****     };
 2407              	.LM147:
 2408 000a BD46     	 mov sp,r7
 2409 000c 02B0     	 add sp,sp,#8
 2410              	 
 2411 000e 80BD     	 pop {r7,pc}
 2413              	.Lscope39:
 2415              	 .stabd 78,0,0
 2416              	 .section .text._ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_,"axG",%progbits,_ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_,comdat
 2417              	 .align 2
 2420              	 .weak _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
 2421              	 .code 16
 2422              	 .thumb_func
 2424              	_ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_:
 2425              	 .stabd 46,0,0
 2427              	.Ltext24:
 289:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 2429              	.LM148:
 2430              	.LFBB40:
 2431 0000 80B5     	 push {r7,lr}
 2432 0002 82B0     	 sub sp,sp,#8
 2433 0004 00AF     	 add r7,sp,#0
 2434 0006 7860     	 str r0,[r7,#4]
 290:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2436              	.LM149:
 2437 0008 7B68     	 ldr r3,[r7,#4]
 2438 000a 181C     	 mov r0,r3
 2439 000c FFF7FEFF 	 bl _ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_
 2440 0010 031C     	 mov r3,r0
 2441 0012 181C     	 mov r0,r3
 2442 0014 BD46     	 mov sp,r7
 2443 0016 02B0     	 add sp,sp,#8
 2444              	 
 2445 0018 80BD     	 pop {r7,pc}
 2447              	.Lscope40:
 2449              	 .stabd 78,0,0
 2450 001a C046     	 .section .text._ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,"axG",%progbits,_ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,comdat
 2451              	 .align 2
 2456              	 .weak _ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 2457              	 .code 16
 2458              	 .thumb_func
 2460              	_ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:
 2461              	 .stabd 46,0,0
 603:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 2463              	.LM150:
 2464              	.LFBB41:
 2465 0000 B0B5     	 push {r4,r5,r7,lr}
 2466 0002 84B0     	 sub sp,sp,#16
 2467 0004 00AF     	 add r7,sp,#0
 2468 0006 F860     	 str r0,[r7,#12]
 2469 0008 B960     	 str r1,[r7,#8]
 2470 000a 7A60     	 str r2,[r7,#4]
 607:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 2472              	.LM151:
 2473 000c FB68     	 ldr r3,[r7,#12]
 2474 000e 181C     	 mov r0,r3
 2475 0010 FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 2476 0014 051C     	 mov r5,r0
 2477 0016 BB68     	 ldr r3,[r7,#8]
 2478 0018 181C     	 mov r0,r3
 2479 001a FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 2480 001e 041C     	 mov r4,r0
 2481 0020 7B68     	 ldr r3,[r7,#4]
 2482 0022 181C     	 mov r0,r3
 2483 0024 FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 2484 0028 031C     	 mov r3,r0
 2485 002a 281C     	 mov r0,r5
 2486 002c 211C     	 mov r1,r4
 2487 002e 1A1C     	 mov r2,r3
 2488 0030 FFF7FEFF 	 bl _ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 2489 0034 031C     	 mov r3,r0
 608:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2491              	.LM152:
 2492 0036 181C     	 mov r0,r3
 2493 0038 BD46     	 mov sp,r7
 2494 003a 04B0     	 add sp,sp,#16
 2495              	 
 2496 003c B0BD     	 pop {r4,r5,r7,pc}
 2498              	.Lscope41:
 2500              	 .stabd 78,0,0
 2501 003e C046     	 .section .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv,"axG",%progbits,_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv,comdat
 2502              	 .align 2
 2505              	 .weak _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv
 2506              	 .code 16
 2507              	 .thumb_func
 2509              	_ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv:
 2510              	 .stabd 46,0,0
 2512              	.Ltext25:
 659:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 2514              	.LM153:
 2515              	.LFBB42:
 2516 0000 80B5     	 push {r7,lr}
 2517 0002 82B0     	 sub sp,sp,#8
 2518 0004 00AF     	 add r7,sp,#0
 2519 0006 7860     	 str r0,[r7,#4]
 660:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 2521              	.LM154:
 2522 0008 7B68     	 ldr r3,[r7,#4]
 2523 000a 181C     	 mov r0,r3
 2524 000c FFF7FEFF 	 bl _ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 2525 0010 031C     	 mov r3,r0
 2526 0012 181C     	 mov r0,r3
 2527 0014 FFF7FEFF 	 bl _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_
 2528 0018 031C     	 mov r3,r0
 2529 001a 181C     	 mov r0,r3
 2530 001c BD46     	 mov sp,r7
 2531 001e 02B0     	 add sp,sp,#8
 2532              	 
 2533 0020 80BD     	 pop {r7,pc}
 2535              	.Lscope42:
 2537              	 .stabd 78,0,0
 2538 0022 C046     	 .section .text._ZSt3maxIjERKT_S2_S2_,"axG",%progbits,_ZSt3maxIjERKT_S2_S2_,comdat
 2539              	 .align 2
 2543              	 .weak _ZSt3maxIjERKT_S2_S2_
 2544              	 .code 16
 2545              	 .thumb_func
 2547              	_ZSt3maxIjERKT_S2_S2_:
 2548              	 .stabd 46,0,0
 2550              	.Ltext26:
 217:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 2552              	.LM155:
 2553              	.LFBB43:
 2554 0000 80B5     	 push {r7,lr}
 2555 0002 82B0     	 sub sp,sp,#8
 2556 0004 00AF     	 add r7,sp,#0
 2557 0006 7860     	 str r0,[r7,#4]
 2558 0008 3960     	 str r1,[r7]
 222:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	return __b;
 2560              	.LM156:
 2561 000a 7B68     	 ldr r3,[r7,#4]
 2562 000c 1A68     	 ldr r2,[r3]
 2563 000e 3B68     	 ldr r3,[r7]
 2564 0010 1B68     	 ldr r3,[r3]
 2565 0012 9A42     	 cmp r2,r3
 2566 0014 01D2     	 bcs .L110
 223:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****       return __a;
 2568              	.LM157:
 2569 0016 3B68     	 ldr r3,[r7]
 2570 0018 00E0     	 b .L111
 2571              	.L110:
 224:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 2573              	.LM158:
 2574 001a 7B68     	 ldr r3,[r7,#4]
 2575              	.L111:
 225:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2577              	.LM159:
 2578 001c 181C     	 mov r0,r3
 2579 001e BD46     	 mov sp,r7
 2580 0020 02B0     	 add sp,sp,#8
 2581              	 
 2582 0022 80BD     	 pop {r7,pc}
 2584              	.Lscope43:
 2586              	 .stabd 78,0,0
 2587              	 .section .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j,"axG",%progbits,_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j,comdat
 2588              	 .align 2
 2592              	 .weak _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j
 2593              	 .code 16
 2594              	 .thumb_func
 2596              	_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j:
 2597              	 .stabd 46,0,0
 2599              	.Ltext27:
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return __a.allocate(__n); }
 2601              	.LM160:
 2602              	.LFBB44:
 2603 0000 80B5     	 push {r7,lr}
 2604 0002 82B0     	 sub sp,sp,#8
 2605 0004 00AF     	 add r7,sp,#0
 2606 0006 7860     	 str r0,[r7,#4]
 2607 0008 3960     	 str r1,[r7]
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 2609              	.LM161:
 2610 000a 7A68     	 ldr r2,[r7,#4]
 2611 000c 3B68     	 ldr r3,[r7]
 2612 000e 101C     	 mov r0,r2
 2613 0010 191C     	 mov r1,r3
 2614 0012 0022     	 mov r2,#0
 2615 0014 FFF7FEFF 	 bl _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv
 2616 0018 031C     	 mov r3,r0
 2617 001a 181C     	 mov r0,r3
 2618 001c BD46     	 mov sp,r7
 2619 001e 02B0     	 add sp,sp,#8
 2620              	 
 2621 0020 80BD     	 pop {r7,pc}
 2623              	.Lscope44:
 2625              	 .stabd 78,0,0
 2626 0022 C046     	 .section .text._ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E,"axG",%progbits,_ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E,comdat
 2627              	 .align 2
 2632              	 .weak _ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E
 2633              	 .code 16
 2634              	 .thumb_func
 2636              	_ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E:
 2637              	 .stabd 46,0,0
 2639              	.Ltext28:
 276:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 2641              	.LM162:
 2642              	.LFBB45:
 2643 0000 80B5     	 push {r7,lr}
 2644 0002 84B0     	 sub sp,sp,#16
 2645 0004 00AF     	 add r7,sp,#0
 2646 0006 F860     	 str r0,[r7,#12]
 2647 0008 B960     	 str r1,[r7,#8]
 2648 000a 7A60     	 str r2,[r7,#4]
 2649 000c 3B60     	 str r3,[r7]
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 2651              	.LM163:
 2652 000e F968     	 ldr r1,[r7,#12]
 2653 0010 BA68     	 ldr r2,[r7,#8]
 2654 0012 7B68     	 ldr r3,[r7,#4]
 2655 0014 081C     	 mov r0,r1
 2656 0016 111C     	 mov r1,r2
 2657 0018 1A1C     	 mov r2,r3
 2658 001a FFF7FEFF 	 bl _ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
 2659 001e 031C     	 mov r3,r0
 2660 0020 181C     	 mov r0,r3
 2661 0022 BD46     	 mov sp,r7
 2662 0024 04B0     	 add sp,sp,#16
 2663              	 
 2664 0026 80BD     	 pop {r7,pc}
 2666              	.Lscope45:
 2668              	 .stabd 78,0,0
 2669              	 .section .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC5Ev,comdat
 2670              	 .align 2
 2673              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev
 2674              	 .code 16
 2675              	 .thumb_func
 2677              	_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev:
 2678              	 .stabd 46,0,0
 2680              	.Ltext29:
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2682              	.LM164:
 2683              	.LFBB46:
 2684 0000 80B5     	 push {r7,lr}
 2685 0002 82B0     	 sub sp,sp,#8
 2686 0004 00AF     	 add r7,sp,#0
 2687 0006 7860     	 str r0,[r7,#4]
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2689              	.LM165:
 2690 0008 7B68     	 ldr r3,[r7,#4]
 2691 000a 181C     	 mov r0,r3
 2692 000c BD46     	 mov sp,r7
 2693 000e 02B0     	 add sp,sp,#8
 2694              	 
 2695 0010 80BD     	 pop {r7,pc}
 2697              	.Lscope46:
 2699              	 .stabd 78,0,0
 2700              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC1Ev
 2701              	 .thumb_set _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC1Ev,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev
 2702 0012 C046     	 .section .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j,comdat
 2703              	 .align 2
 2707              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j
 2708              	 .code 16
 2709              	 .thumb_func
 2711              	_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j:
 2712              	 .stabd 46,0,0
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { ::operator delete(__p); }
 2714              	.LM166:
 2715              	.LFBB47:
 2716 0000 80B5     	 push {r7,lr}
 2717 0002 84B0     	 sub sp,sp,#16
 2718 0004 00AF     	 add r7,sp,#0
 2719 0006 F860     	 str r0,[r7,#12]
 2720 0008 B960     	 str r1,[r7,#8]
 2721 000a 7A60     	 str r2,[r7,#4]
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2723              	.LM167:
 2724 000c BB68     	 ldr r3,[r7,#8]
 2725 000e 181C     	 mov r0,r3
 2726 0010 FFF7FEFF 	 bl _ZdlPv
 2727 0014 BD46     	 mov sp,r7
 2728 0016 04B0     	 add sp,sp,#16
 2729              	 
 2730 0018 80BD     	 pop {r7,pc}
 2732              	.Lscope47:
 2734              	 .stabd 78,0,0
 2735 001a C046     	 .section .text._ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_,"axG",%progbits,_ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_,comdat
 2736              	 .align 2
 2739              	 .weak _ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_
 2740              	 .code 16
 2741              	 .thumb_func
 2743              	_ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_:
 2744              	 .stabd 46,0,0
 2746              	.Ltext30:
   1:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
   3:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** //
   5:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // any later version.
  10:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  11:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  16:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  20:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  25:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** /*
  26:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  27:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  30:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  38:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  39:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  42:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  */
  50:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  51:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *
  55:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****  */
  58:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  59:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  62:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #pragma GCC system_header
  63:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  64:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  66:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible
  68:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #endif
  69:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  70:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** {
  72:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  74:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /**
  75:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  76:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  77:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   */
  78:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   //@{ 
  79:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  80:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /**
  81:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  82:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  83:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  84:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  85:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  86:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   */
  87:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   //@{ 
  88:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   ///  Marking input iterators.
  89:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   struct input_iterator_tag { };
  90:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   ///  Marking output iterators.
  92:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   struct output_iterator_tag { };
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  94:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  95:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  96:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
  97:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  98:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// operations.
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 100:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// iterator operations.
 103:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   //@}
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 106:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /**
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 108:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *
 109:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 110:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 111:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  used in specializations and overloading.
 112:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   */
 116:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct iterator
 119:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 120:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 121:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 122:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 123:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Tp        value_type;
 124:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 127:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 128:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 129:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Reference reference;
 130:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     };
 131:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 132:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /**
 133:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 134:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *
 135:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 136:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 137:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 138:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 139:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   */
 140:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 141:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 142:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** _GLIBCXX_HAS_NESTED_TYPE(iterator_category)
 143:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 144:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iterator,
 145:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 	   bool = __has_iterator_category<_Iterator>::value>
 146:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct __iterator_traits { };
 147:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 148:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iterator>
 149:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator, true>
 150:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 151:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 152:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 153:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 154:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 155:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 156:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     };
 157:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 158:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iterator>
 159:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct iterator_traits
 160:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 161:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #else
 162:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iterator>
 163:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct iterator_traits
 164:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 165:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 166:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 167:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 168:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 169:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 170:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     };
 171:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** #endif
 172:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 173:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 174:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Tp>
 175:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 176:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 177:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 178:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 179:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 180:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 181:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 182:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     };
 183:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 184:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 185:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Tp>
 186:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 187:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 188:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 189:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     };
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   /**
 196:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 197:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****    *  sugar for internal library use only.
 198:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   */
 199:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iter>
 200:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 201:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 202:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 203:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 204:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   //@}
 205:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h **** 
 206:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   // If _Iterator has a base returns it otherwise _Iterator is returned
 207:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   // untouched
 208:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****   template<typename _Iterator, bool _HasBase>
 209:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     struct _Iter_base
 210:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****     {
 211:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       typedef _Iterator iterator_type;
 212:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 2748              	.LM168:
 2749              	.LFBB48:
 2750 0000 80B5     	 push {r7,lr}
 2751 0002 82B0     	 sub sp,sp,#8
 2752 0004 00AF     	 add r7,sp,#0
 2753 0006 7860     	 str r0,[r7,#4]
 213:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_iterator_base_types.h ****       { return __it; }
 2755              	.LM169:
 2756 0008 7B68     	 ldr r3,[r7,#4]
 2757 000a 181C     	 mov r0,r3
 2758 000c BD46     	 mov sp,r7
 2759 000e 02B0     	 add sp,sp,#8
 2760              	 
 2761 0010 80BD     	 pop {r7,pc}
 2763              	.Lscope48:
 2765              	 .stabd 78,0,0
 2766 0012 C046     	 .section .text._ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_,"axG",%progbits,_ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_,comdat
 2767              	 .align 2
 2770              	 .weak _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 2771              	 .code 16
 2772              	 .thumb_func
 2774              	_ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_:
 2775              	 .stabd 46,0,0
 2777              	.Ltext31:
 278:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 2779              	.LM170:
 2780              	.LFBB49:
 2781 0000 80B5     	 push {r7,lr}
 2782 0002 82B0     	 sub sp,sp,#8
 2783 0004 00AF     	 add r7,sp,#0
 2784 0006 7860     	 str r0,[r7,#4]
 279:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2786              	.LM171:
 2787 0008 7B68     	 ldr r3,[r7,#4]
 2788 000a 181C     	 mov r0,r3
 2789 000c FFF7FEFF 	 bl _ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_
 2790 0010 031C     	 mov r3,r0
 2791 0012 181C     	 mov r0,r3
 2792 0014 BD46     	 mov sp,r7
 2793 0016 02B0     	 add sp,sp,#8
 2794              	 
 2795 0018 80BD     	 pop {r7,pc}
 2797              	.Lscope49:
 2799              	 .stabd 78,0,0
 2800 001a C046     	 .section .text._ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,"axG",%progbits,_ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,comdat
 2801              	 .align 2
 2806              	 .weak _ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 2807              	 .code 16
 2808              	 .thumb_func
 2810              	_ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:
 2811              	 .stabd 46,0,0
 585:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 2813              	.LM172:
 2814              	.LFBB50:
 2815 0000 80B5     	 push {r7,lr}
 2816 0002 86B0     	 sub sp,sp,#24
 2817 0004 00AF     	 add r7,sp,#0
 2818 0006 F860     	 str r0,[r7,#12]
 2819 0008 B960     	 str r1,[r7,#8]
 2820 000a 7A60     	 str r2,[r7,#4]
 2821              	.LBB25:
 593:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2823              	.LM173:
 2824 000c 1723     	 mov r3,#23
 2825 000e FB18     	 add r3,r7,r3
 2826 0010 0122     	 mov r2,#1
 2827 0012 1A70     	 strb r2,[r3]
 598:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 2829              	.LM174:
 2830 0014 F968     	 ldr r1,[r7,#12]
 2831 0016 BA68     	 ldr r2,[r7,#8]
 2832 0018 7B68     	 ldr r3,[r7,#4]
 2833 001a 081C     	 mov r0,r1
 2834 001c 111C     	 mov r1,r2
 2835 001e 1A1C     	 mov r2,r3
 2836 0020 FFF7FEFF 	 bl _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_
 2837 0024 031C     	 mov r3,r0
 2838              	.LBE25:
 599:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 2840              	.LM175:
 2841 0026 181C     	 mov r0,r3
 2842 0028 BD46     	 mov sp,r7
 2843 002a 06B0     	 add sp,sp,#24
 2844              	 
 2845 002c 80BD     	 pop {r7,pc}
 2850              	.Lscope50:
 2852              	 .stabd 78,0,0
 2853 002e C046     	 .section .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_,"axG",%progbits,_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_,comdat
 2854              	 .align 2
 2857              	 .weak _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_
 2858              	 .code 16
 2859              	 .thumb_func
 2861              	_ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_:
 2862              	 .stabd 46,0,0
 2864              	.Ltext32:
 190:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 191:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 192:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { __a.destroy(__p); }
 193:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h **** 
 194:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 2866              	.LM176:
 2867              	.LFBB51:
 2868 0000 80B5     	 push {r7,lr}
 2869 0002 82B0     	 sub sp,sp,#8
 2870 0004 00AF     	 add r7,sp,#0
 2871 0006 7860     	 str r0,[r7,#4]
 195:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\alloc_traits.h ****     { return __a.max_size(); }
 2873              	.LM177:
 2874 0008 7B68     	 ldr r3,[r7,#4]
 2875 000a 181C     	 mov r0,r3
 2876 000c FFF7FEFF 	 bl _ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv
 2877 0010 031C     	 mov r3,r0
 2878 0012 181C     	 mov r0,r3
 2879 0014 BD46     	 mov sp,r7
 2880 0016 02B0     	 add sp,sp,#8
 2881              	 
 2882 0018 80BD     	 pop {r7,pc}
 2884              	.Lscope51:
 2886              	 .stabd 78,0,0
 2887 001a C046     	 .section .text._ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv,"axG",%progbits,_ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv,comdat
 2888              	 .align 2
 2891              	 .weak _ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
 2892              	 .code 16
 2893              	 .thumb_func
 2895              	_ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:
 2896              	 .stabd 46,0,0
 2898              	.Ltext33:
 117:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 2900              	.LM178:
 2901              	.LFBB52:
 2902 0000 80B5     	 push {r7,lr}
 2903 0002 82B0     	 sub sp,sp,#8
 2904 0004 00AF     	 add r7,sp,#0
 2905 0006 7860     	 str r0,[r7,#4]
 118:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_vector.h **** 
 2907              	.LM179:
 2908 0008 7B68     	 ldr r3,[r7,#4]
 2909 000a 181C     	 mov r0,r3
 2910 000c BD46     	 mov sp,r7
 2911 000e 02B0     	 add sp,sp,#8
 2912              	 
 2913 0010 80BD     	 pop {r7,pc}
 2915              	.Lscope52:
 2917              	 .stabd 78,0,0
 2918 0012 C046     	 .section .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv,comdat
 2919              	 .align 2
 2923              	 .weak _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv
 2924              	 .code 16
 2925              	 .thumb_func
 2927              	_ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv:
 2928              	 .stabd 46,0,0
 2930              	.Ltext34:
  99:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { 
 2932              	.LM180:
 2933              	.LFBB53:
 2934 0000 80B5     	 push {r7,lr}
 2935 0002 84B0     	 sub sp,sp,#16
 2936 0004 00AF     	 add r7,sp,#0
 2937 0006 F860     	 str r0,[r7,#12]
 2938 0008 B960     	 str r1,[r7,#8]
 2939 000a 7A60     	 str r2,[r7,#4]
 101:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 2941              	.LM181:
 2942 000c FB68     	 ldr r3,[r7,#12]
 2943 000e 181C     	 mov r0,r3
 2944 0010 FFF7FEFF 	 bl _ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv
 2945 0014 021C     	 mov r2,r0
 2946 0016 BB68     	 ldr r3,[r7,#8]
 2947 0018 9A42     	 cmp r2,r3
 2948 001a 9B41     	 sbc r3,r3,r3
 2949 001c 5B42     	 neg r3,r3
 2950 001e DBB2     	 uxtb r3,r3
 2951 0020 002B     	 cmp r3,#0
 2952 0022 01D0     	 beq .L131
 102:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2954              	.LM182:
 2955 0024 FFF7FEFF 	 bl _ZSt17__throw_bad_allocv
 2956              	.L131:
 104:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       }
 2958              	.LM183:
 2959 0028 BB68     	 ldr r3,[r7,#8]
 2960 002a 9B00     	 lsl r3,r3,#2
 2961 002c 181C     	 mov r0,r3
 2962 002e FFF7FEFF 	 bl _Znwj
 2963 0032 031C     	 mov r3,r0
 105:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 2965              	.LM184:
 2966 0034 181C     	 mov r0,r3
 2967 0036 BD46     	 mov sp,r7
 2968 0038 04B0     	 add sp,sp,#16
 2969              	 
 2970 003a 80BD     	 pop {r7,pc}
 2972              	.Lscope53:
 2974              	 .stabd 78,0,0
 2975              	 .section .text._ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_,"axG",%progbits,_ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_,comdat
 2976              	 .align 2
 2981              	 .weak _ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
 2982              	 .code 16
 2983              	 .thumb_func
 2985              	_ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:
 2986              	 .stabd 46,0,0
 2988              	.Ltext35:
 107:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 2990              	.LM185:
 2991              	.LFBB54:
 2992 0000 80B5     	 push {r7,lr}
 2993 0002 86B0     	 sub sp,sp,#24
 2994 0004 00AF     	 add r7,sp,#0
 2995 0006 F860     	 str r0,[r7,#12]
 2996 0008 B960     	 str r1,[r7,#8]
 2997 000a 7A60     	 str r2,[r7,#4]
 2998              	.LBB26:
 115:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** #else
 3000              	.LM186:
 3001 000c 1723     	 mov r3,#23
 3002 000e FB18     	 add r3,r7,r3
 3003 0010 0122     	 mov r2,#1
 3004 0012 1A70     	 strb r2,[r3]
 125:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     }
 3006              	.LM187:
 3007 0014 F968     	 ldr r1,[r7,#12]
 3008 0016 BA68     	 ldr r2,[r7,#8]
 3009 0018 7B68     	 ldr r3,[r7,#4]
 3010 001a 081C     	 mov r0,r1
 3011 001c 111C     	 mov r1,r2
 3012 001e 1A1C     	 mov r2,r3
 3013 0020 FFF7FEFF 	 bl _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_
 3014 0024 031C     	 mov r3,r0
 3015              	.LBE26:
 126:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 
 3017              	.LM188:
 3018 0026 181C     	 mov r0,r3
 3019 0028 BD46     	 mov sp,r7
 3020 002a 06B0     	 add sp,sp,#24
 3021              	 
 3022 002c 80BD     	 pop {r7,pc}
 3027              	.Lscope54:
 3029              	 .stabd 78,0,0
 3030 002e C046     	 .section .text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_,"axG",%progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_,comdat
 3031              	 .align 2
 3036              	 .weak _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_
 3037              	 .code 16
 3038              	 .thumb_func
 3040              	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_:
 3041              	 .stabd 46,0,0
 3043              	.Ltext36:
 569:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 3045              	.LM189:
 3046              	.LFBB55:
 3047 0000 80B5     	 push {r7,lr}
 3048 0002 86B0     	 sub sp,sp,#24
 3049 0004 00AF     	 add r7,sp,#0
 3050 0006 F860     	 str r0,[r7,#12]
 3051 0008 B960     	 str r1,[r7,#8]
 3052 000a 7A60     	 str r2,[r7,#4]
 3053              	.LBB27:
 576:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  if (_Num)
 3055              	.LM190:
 3056 000c BA68     	 ldr r2,[r7,#8]
 3057 000e FB68     	 ldr r3,[r7,#12]
 3058 0010 D31A     	 sub r3,r2,r3
 3059 0012 9B10     	 asr r3,r3,#2
 3060 0014 7B61     	 str r3,[r7,#20]
 577:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 3062              	.LM191:
 3063 0016 7B69     	 ldr r3,[r7,#20]
 3064 0018 002B     	 cmp r3,#0
 3065 001a 0CD0     	 beq .L136
 578:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result - _Num;
 3067              	.LM192:
 3068 001c 7B69     	 ldr r3,[r7,#20]
 3069 001e 9B00     	 lsl r3,r3,#2
 3070 0020 5B42     	 neg r3,r3
 3071 0022 7A68     	 ldr r2,[r7,#4]
 3072 0024 D118     	 add r1,r2,r3
 3073 0026 7B69     	 ldr r3,[r7,#20]
 3074 0028 9B00     	 lsl r3,r3,#2
 3075 002a FA68     	 ldr r2,[r7,#12]
 3076 002c 081C     	 mov r0,r1
 3077 002e 111C     	 mov r1,r2
 3078 0030 1A1C     	 mov r2,r3
 3079 0032 FFF7FEFF 	 bl memmove
 3080              	.L136:
 579:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 3082              	.LM193:
 3083 0036 7B69     	 ldr r3,[r7,#20]
 3084 0038 9B00     	 lsl r3,r3,#2
 3085 003a 5B42     	 neg r3,r3
 3086 003c 7A68     	 ldr r2,[r7,#4]
 3087 003e D318     	 add r3,r2,r3
 3088              	.LBE27:
 580:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 3090              	.LM194:
 3091 0040 181C     	 mov r0,r3
 3092 0042 BD46     	 mov sp,r7
 3093 0044 06B0     	 add sp,sp,#24
 3094              	 
 3095 0046 80BD     	 pop {r7,pc}
 3100              	.Lscope55:
 3102              	 .stabd 78,0,0
 3103              	 .section .text._ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv,"axG",%progbits,_ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv,comdat
 3104              	 .align 2
 3107              	 .weak _ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv
 3108              	 .code 16
 3109              	 .thumb_func
 3111              	_ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv:
 3112              	 .stabd 46,0,0
 3114              	.Ltext37:
 113:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 3116              	.LM195:
 3117              	.LFBB56:
 3118 0000 80B5     	 push {r7,lr}
 3119 0002 82B0     	 sub sp,sp,#8
 3120 0004 00AF     	 add r7,sp,#0
 3121 0006 7860     	 str r0,[r7,#4]
 114:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\ext\new_allocator.h **** 
 3123              	.LM196:
 3124 0008 024B     	 ldr r3,.L140
 3125 000a 181C     	 mov r0,r3
 3126 000c BD46     	 mov sp,r7
 3127 000e 02B0     	 add sp,sp,#8
 3128              	 
 3129 0010 80BD     	 pop {r7,pc}
 3130              	.L141:
 3131 0012 C046     	 .align 2
 3132              	.L140:
 3133 0014 FFFFFF3F 	 .word 1073741823
 3135              	.Lscope56:
 3137              	 .stabd 78,0,0
 3138              	 .section .text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_,"axG",%progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_,comdat
 3139              	 .align 2
 3144              	 .weak _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_
 3145              	 .code 16
 3146              	 .thumb_func
 3148              	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_:
 3149              	 .stabd 46,0,0
 3151              	.Ltext38:
  91:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 3153              	.LM197:
 3154              	.LFBB57:
 3155 0000 80B5     	 push {r7,lr}
 3156 0002 84B0     	 sub sp,sp,#16
 3157 0004 00AF     	 add r7,sp,#0
 3158 0006 F860     	 str r0,[r7,#12]
 3159 0008 B960     	 str r1,[r7,#8]
 3160 000a 7A60     	 str r2,[r7,#4]
  93:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_uninitialized.h ****     };
 3162              	.LM198:
 3163 000c F968     	 ldr r1,[r7,#12]
 3164 000e BA68     	 ldr r2,[r7,#8]
 3165 0010 7B68     	 ldr r3,[r7,#4]
 3166 0012 081C     	 mov r0,r1
 3167 0014 111C     	 mov r1,r2
 3168 0016 1A1C     	 mov r2,r3
 3169 0018 FFF7FEFF 	 bl _ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
 3170 001c 031C     	 mov r3,r0
 3171 001e 181C     	 mov r0,r3
 3172 0020 BD46     	 mov sp,r7
 3173 0022 04B0     	 add sp,sp,#16
 3174              	 
 3175 0024 80BD     	 pop {r7,pc}
 3177              	.Lscope57:
 3179              	 .stabd 78,0,0
 3180 0026 C046     	 .section .text._ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_,"axG",%progbits,_ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_,comdat
 3181              	 .align 2
 3186              	 .weak _ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
 3187              	 .code 16
 3188              	 .thumb_func
 3190              	_ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:
 3191              	 .stabd 46,0,0
 3193              	.Ltext39:
 456:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 3195              	.LM199:
 3196              	.LFBB58:
 3197 0000 90B5     	 push {r4,r7,lr}
 3198 0002 85B0     	 sub sp,sp,#20
 3199 0004 00AF     	 add r7,sp,#0
 3200 0006 F860     	 str r0,[r7,#12]
 3201 0008 B960     	 str r1,[r7,#8]
 3202 000a 7A60     	 str r2,[r7,#4]
 466:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 3204              	.LM200:
 3205 000c FB68     	 ldr r3,[r7,#12]
 3206 000e 181C     	 mov r0,r3
 3207 0010 FFF7FEFF 	 bl _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
 3208 0014 041C     	 mov r4,r0
 3209 0016 BB68     	 ldr r3,[r7,#8]
 3210 0018 181C     	 mov r0,r3
 3211 001a FFF7FEFF 	 bl _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
 3212 001e 021C     	 mov r2,r0
 3213 0020 7B68     	 ldr r3,[r7,#4]
 3214 0022 201C     	 mov r0,r4
 3215 0024 111C     	 mov r1,r2
 3216 0026 1A1C     	 mov r2,r3
 3217 0028 FFF7FEFF 	 bl _ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 3218 002c 031C     	 mov r3,r0
 467:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 3220              	.LM201:
 3221 002e 181C     	 mov r0,r3
 3222 0030 BD46     	 mov sp,r7
 3223 0032 05B0     	 add sp,sp,#20
 3224              	 
 3225 0034 90BD     	 pop {r4,r7,pc}
 3227              	.Lscope58:
 3229              	 .stabd 78,0,0
 3230 0036 C046     	 .section .text._ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,"axG",%progbits,_ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,comdat
 3231              	 .align 2
 3236              	 .weak _ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 3237              	 .code 16
 3238              	 .thumb_func
 3240              	_ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:
 3241              	 .stabd 46,0,0
 430:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 3243              	.LM202:
 3244              	.LFBB59:
 3245 0000 B0B5     	 push {r4,r5,r7,lr}
 3246 0002 84B0     	 sub sp,sp,#16
 3247 0004 00AF     	 add r7,sp,#0
 3248 0006 F860     	 str r0,[r7,#12]
 3249 0008 B960     	 str r1,[r7,#8]
 3250 000a 7A60     	 str r2,[r7,#4]
 434:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 3252              	.LM203:
 3253 000c FB68     	 ldr r3,[r7,#12]
 3254 000e 181C     	 mov r0,r3
 3255 0010 FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 3256 0014 051C     	 mov r5,r0
 3257 0016 BB68     	 ldr r3,[r7,#8]
 3258 0018 181C     	 mov r0,r3
 3259 001a FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 3260 001e 041C     	 mov r4,r0
 3261 0020 7B68     	 ldr r3,[r7,#4]
 3262 0022 181C     	 mov r0,r3
 3263 0024 FFF7FEFF 	 bl _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
 3264 0028 031C     	 mov r3,r0
 3265 002a 281C     	 mov r0,r5
 3266 002c 211C     	 mov r1,r4
 3267 002e 1A1C     	 mov r2,r3
 3268 0030 FFF7FEFF 	 bl _ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 3269 0034 031C     	 mov r3,r0
 435:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 3271              	.LM204:
 3272 0036 181C     	 mov r0,r3
 3273 0038 BD46     	 mov sp,r7
 3274 003a 04B0     	 add sp,sp,#16
 3275              	 
 3276 003c B0BD     	 pop {r4,r5,r7,pc}
 3278              	.Lscope59:
 3280              	 .stabd 78,0,0
 3281 003e C046     	 .section .text._ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,"axG",%progbits,_ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_,comdat
 3282              	 .align 2
 3287              	 .weak _ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
 3288              	 .code 16
 3289              	 .thumb_func
 3291              	_ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:
 3292              	 .stabd 46,0,0
 385:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     {
 3294              	.LM205:
 3295              	.LFBB60:
 3296 0000 80B5     	 push {r7,lr}
 3297 0002 86B0     	 sub sp,sp,#24
 3298 0004 00AF     	 add r7,sp,#0
 3299 0006 F860     	 str r0,[r7,#12]
 3300 0008 B960     	 str r1,[r7,#8]
 3301 000a 7A60     	 str r2,[r7,#4]
 3302              	.LBB28:
 393:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 3304              	.LM206:
 3305 000c 1723     	 mov r3,#23
 3306 000e FB18     	 add r3,r7,r3
 3307 0010 0122     	 mov r2,#1
 3308 0012 1A70     	 strb r2,[r3]
 396:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     }
 3310              	.LM207:
 3311 0014 F968     	 ldr r1,[r7,#12]
 3312 0016 BA68     	 ldr r2,[r7,#8]
 3313 0018 7B68     	 ldr r3,[r7,#4]
 3314 001a 081C     	 mov r0,r1
 3315 001c 111C     	 mov r1,r2
 3316 001e 1A1C     	 mov r2,r3
 3317 0020 FFF7FEFF 	 bl _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_
 3318 0024 031C     	 mov r3,r0
 3319              	.LBE28:
 397:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 
 3321              	.LM208:
 3322 0026 181C     	 mov r0,r3
 3323 0028 BD46     	 mov sp,r7
 3324 002a 06B0     	 add sp,sp,#24
 3325              	 
 3326 002c 80BD     	 pop {r7,pc}
 3331              	.Lscope60:
 3333              	 .stabd 78,0,0
 3334 002e C046     	 .section .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_,"axG",%progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_,comdat
 3335              	 .align 2
 3340              	 .weak _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_
 3341              	 .code 16
 3342              	 .thumb_func
 3344              	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_:
 3345              	 .stabd 46,0,0
 369:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****         {
 3347              	.LM209:
 3348              	.LFBB61:
 3349 0000 80B5     	 push {r7,lr}
 3350 0002 86B0     	 sub sp,sp,#24
 3351 0004 00AF     	 add r7,sp,#0
 3352 0006 F860     	 str r0,[r7,#12]
 3353 0008 B960     	 str r1,[r7,#8]
 3354 000a 7A60     	 str r2,[r7,#4]
 3355              	.LBB29:
 376:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  if (_Num)
 3357              	.LM210:
 3358 000c BA68     	 ldr r2,[r7,#8]
 3359 000e FB68     	 ldr r3,[r7,#12]
 3360 0010 D31A     	 sub r3,r2,r3
 3361 0012 9B10     	 asr r3,r3,#2
 3362 0014 7B61     	 str r3,[r7,#20]
 377:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 3364              	.LM211:
 3365 0016 7B69     	 ldr r3,[r7,#20]
 3366 0018 002B     	 cmp r3,#0
 3367 001a 08D0     	 beq .L151
 378:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	  return __result + _Num;
 3369              	.LM212:
 3370 001c 7B69     	 ldr r3,[r7,#20]
 3371 001e 9B00     	 lsl r3,r3,#2
 3372 0020 7968     	 ldr r1,[r7,#4]
 3373 0022 FA68     	 ldr r2,[r7,#12]
 3374 0024 081C     	 mov r0,r1
 3375 0026 111C     	 mov r1,r2
 3376 0028 1A1C     	 mov r2,r3
 3377 002a FFF7FEFF 	 bl memmove
 3378              	.L151:
 379:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h **** 	}
 3380              	.LM213:
 3381 002e 7B69     	 ldr r3,[r7,#20]
 3382 0030 9B00     	 lsl r3,r3,#2
 3383 0032 7A68     	 ldr r2,[r7,#4]
 3384 0034 D318     	 add r3,r2,r3
 3385              	.LBE29:
 380:c:\davev4-64bit\dave-4.3.2\eclipse\arm-gcc-49\arm-none-eabi\include\c++\4.9.3\bits\stl_algobase.h ****     };
 3387              	.LM214:
 3388 0036 181C     	 mov r0,r3
 3389 0038 BD46     	 mov sp,r7
 3390 003a 06B0     	 add sp,sp,#24
 3391              	 
 3392 003c 80BD     	 pop {r7,pc}
 3397              	.Lscope61:
 3399              	 .stabd 78,0,0
 3400              	 .global _ZTV18ShiftRegisterArray
 3401 003e C046     	 .section .rodata._ZTV18ShiftRegisterArray,"a",%progbits
 3402              	 .align 3
 3405              	_ZTV18ShiftRegisterArray:
 3406 0000 00000000 	 .word 0
 3407 0004 00000000 	 .word 0
 3408 0008 00000000 	 .word _ZN18ShiftRegisterArrayD1Ev
 3409 000c 00000000 	 .word _ZN18ShiftRegisterArrayD0Ev
 3410 0010 00000000 	 .word _ZN18ShiftRegisterArray4pushEh
 3411 0014 00000000 	 .word _ZN13ShiftRegister4pushEb
 3412 0018 00000000 	 .word _ZN13ShiftRegister5cpushEh
 3413 001c 00000000 	 .word _ZN13ShiftRegister5cpushEb
 3414              	 .text
 3416              	.Letext0:
 3417              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 ShiftRegisterArray.cpp
    {standard input}:412    .text._ZnwjPv:00000000 $t
    {standard input}:419    .text._ZnwjPv:00000000 _ZnwjPv
    {standard input}:444    .text._ZN18ShiftRegisterArrayC2EP13__AccessPoint:00000000 $t
    {standard input}:452    .text._ZN18ShiftRegisterArrayC2EP13__AccessPoint:00000000 _ZN18ShiftRegisterArrayC2EP13__AccessPoint
    {standard input}:827    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC1Ev
    {standard input}:491    .text._ZN18ShiftRegisterArrayC2EP13__AccessPoint:00000030 $d
    {standard input}:3405   .rodata._ZTV18ShiftRegisterArray:00000000 _ZTV18ShiftRegisterArray
    {standard input}:452    .text._ZN18ShiftRegisterArrayC2EP13__AccessPoint:00000000 _ZN18ShiftRegisterArrayC1EP13__AccessPoint
    {standard input}:499    .text._ZN18ShiftRegisterArrayD2Ev:00000000 $t
    {standard input}:506    .text._ZN18ShiftRegisterArrayD2Ev:00000000 _ZN18ShiftRegisterArrayD2Ev
    {standard input}:865    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EED1Ev
    {standard input}:551    .text._ZN18ShiftRegisterArrayD2Ev:00000038 $d
    {standard input}:506    .text._ZN18ShiftRegisterArrayD2Ev:00000000 _ZN18ShiftRegisterArrayD1Ev
    {standard input}:559    .text._ZN18ShiftRegisterArrayD0Ev:00000000 $t
    {standard input}:566    .text._ZN18ShiftRegisterArrayD0Ev:00000000 _ZN18ShiftRegisterArrayD0Ev
    {standard input}:594    .text._ZN18ShiftRegisterArray4pushEh:00000000 $t
    {standard input}:602    .text._ZN18ShiftRegisterArray4pushEh:00000000 _ZN18ShiftRegisterArray4pushEh
    {standard input}:953    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj
    {standard input}:917    .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv:00000000 _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv
    {standard input}:718    .text._ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister:00000000 $t
    {standard input}:726    .text._ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister:00000000 _ZN18ShiftRegisterArray16addShiftRegisterEP13ShiftRegister
    {standard input}:988    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_
    {standard input}:756    .text._ZN18ShiftRegisterArray5beginEv:00000000 $t
    {standard input}:763    .text._ZN18ShiftRegisterArray5beginEv:00000000 _ZN18ShiftRegisterArray5beginEv
    {standard input}:788    .text._ZN18ShiftRegisterArray3endEv:00000000 $t
    {standard input}:795    .text._ZN18ShiftRegisterArray3endEv:00000000 _ZN18ShiftRegisterArray3endEv
    {standard input}:820    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev:00000000 $t
    {standard input}:827    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC2Ev
    {standard input}:1093   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev
    {standard input}:858    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev:00000000 $t
    {standard input}:865    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EED2Ev
    {standard input}:1184   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
    {standard input}:1214   .text._ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E:00000000 _ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E
    {standard input}:1129   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev
    {standard input}:910    .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE4sizeEv:00000000 $t
    {standard input}:945    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EEixEj:00000000 $t
    {standard input}:980    .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE9push_backERKS1_:00000000 $t
    {standard input}:1254   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_:00000000 _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_
    {standard input}:1577   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv
    {standard input}:1298   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
    {standard input}:1050   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev:00000000 $t
    {standard input}:1057   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev
    {standard input}:1662   .text._ZNSaIP13ShiftRegisterED2Ev:00000000 _ZNSaIP13ShiftRegisterED2Ev
    {standard input}:1057   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD1Ev
    {standard input}:1086   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev:00000000 $t
    {standard input}:1615   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC1Ev
    {standard input}:1093   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC1Ev
    {standard input}:1122   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev:00000000 $t
    {standard input}:1702   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j
    {standard input}:1129   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED1Ev
    {standard input}:1177   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:00000000 $t
    {standard input}:1206   .text._ZSt8_DestroyIPP13ShiftRegisterS1_EvT_S3_RSaIT0_E:00000000 $t
    {standard input}:1751   .text._ZSt8_DestroyIPP13ShiftRegisterEvT_S3_:00000000 _ZSt8_DestroyIPP13ShiftRegisterEvT_S3_
    {standard input}:1245   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE9constructIS2_EEvRS3_PS2_RKT_:00000000 $t
    {standard input}:1792   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_
    {standard input}:1285   .rodata:00000000 $d
    {standard input}:1289   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:00000000 $t
    {standard input}:1837   .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv:00000000 _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv
    {standard input}:1870   .text._ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 _ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_
    {standard input}:1918   .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv:00000000 _ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv
    {standard input}:1952   .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc:00000000 _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc
    {standard input}:2066   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv
    {standard input}:2102   .text._ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:00000000 _ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
    {standard input}:2147   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj
    {standard input}:2202   .text._ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_:00000000 _ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_
    {standard input}:1555   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:00000190 $d
    {standard input}:1570   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE3endEv:00000000 $t
    {standard input}:2244   .text._ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_:00000000 _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC1ERKS3_
    {standard input}:1608   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev:00000000 $t
    {standard input}:1615   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC2Ev
    {standard input}:2284   .text._ZNSaIP13ShiftRegisterEC2Ev:00000000 _ZNSaIP13ShiftRegisterEC2Ev
    {standard input}:1655   .text._ZNSaIP13ShiftRegisterED2Ev:00000000 $t
    {standard input}:2322   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev
    {standard input}:1662   .text._ZNSaIP13ShiftRegisterED2Ev:00000000 _ZNSaIP13ShiftRegisterED1Ev
    {standard input}:1693   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE13_M_deallocateEPS1_j:00000000 $t
    {standard input}:2357   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j:00000000 _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j
    {standard input}:1743   .text._ZSt8_DestroyIPP13ShiftRegisterEvT_S3_:00000000 $t
    {standard input}:2394   .text._ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_:00000000 _ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_
    {standard input}:1783   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE9constructEPS2_RKS2_:00000000 $t
    {standard input}:1830   .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEE4baseEv:00000000 $t
    {standard input}:1861   .text._ZSt13copy_backwardIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 $t
    {standard input}:2424   .text._ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_:00000000 _ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_
    {standard input}:2460   .text._ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 _ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
    {standard input}:1911   .text._ZNK9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEdeEv:00000000 $t
    {standard input}:1943   .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE12_M_check_lenEjPKc:00000000 $t
    {standard input}:2509   .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv:00000000 _ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv
    {standard input}:2547   .text._ZSt3maxIjERKT_S2_S2_:00000000 _ZSt3maxIjERKT_S2_S2_
    {standard input}:2059   .text._ZNSt6vectorIP13ShiftRegisterSaIS1_EE5beginEv:00000000 $t
    {standard input}:2094   .text._ZN9__gnu_cxxmiIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:00000000 $t
    {standard input}:2139   .text._ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE11_M_allocateEj:00000000 $t
    {standard input}:2596   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j:00000000 _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j
    {standard input}:2192   .text._ZSt34__uninitialized_move_if_noexcept_aIPP13ShiftRegisterS2_SaIS1_EET0_T_S5_S4_RT1_:00000000 $t
    {standard input}:2636   .text._ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E:00000000 _ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E
    {standard input}:2236   .text._ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_:00000000 $t
    {standard input}:2244   .text._ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_:00000000 _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC2ERKS3_
    {standard input}:2277   .text._ZNSaIP13ShiftRegisterEC2Ev:00000000 $t
    {standard input}:2677   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev
    {standard input}:2284   .text._ZNSaIP13ShiftRegisterEC2Ev:00000000 _ZNSaIP13ShiftRegisterEC1Ev
    {standard input}:2315   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev:00000000 $t
    {standard input}:2322   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED1Ev
    {standard input}:2348   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE10deallocateERS3_PS2_j:00000000 $t
    {standard input}:2711   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j
    {standard input}:2388   .text._ZNSt12_Destroy_auxILb1EE9__destroyIPP13ShiftRegisterEEvT_S5_:00000000 $t
    {standard input}:2417   .text._ZSt12__miter_baseIPP13ShiftRegisterENSt11_Miter_baseIT_E13iterator_typeES4_:00000000 $t
    {standard input}:2743   .text._ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_:00000000 _ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_
    {standard input}:2451   .text._ZSt23__copy_move_backward_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 $t
    {standard input}:2774   .text._ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_:00000000 _ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_
    {standard input}:2810   .text._ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 _ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
    {standard input}:2502   .text._ZNKSt6vectorIP13ShiftRegisterSaIS1_EE8max_sizeEv:00000000 $t
    {standard input}:2895   .text._ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:00000000 _ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv
    {standard input}:2861   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_:00000000 _ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_
    {standard input}:2539   .text._ZSt3maxIjERKT_S2_S2_:00000000 $t
    {standard input}:2588   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8allocateERS3_j:00000000 $t
    {standard input}:2927   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv
    {standard input}:2627   .text._ZSt22__uninitialized_copy_aIPP13ShiftRegisterS2_S1_ET0_T_S4_S3_RSaIT1_E:00000000 $t
    {standard input}:2985   .text._ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 _ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
    {standard input}:2670   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev:00000000 $t
    {standard input}:2677   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC1Ev
    {standard input}:2703   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE10deallocateEPS2_j:00000000 $t
    {standard input}:2736   .text._ZNSt10_Iter_baseIPP13ShiftRegisterLb0EE7_S_baseES2_:00000000 $t
    {standard input}:2767   .text._ZSt12__niter_baseIPP13ShiftRegisterENSt11_Niter_baseIT_E13iterator_typeES4_:00000000 $t
    {standard input}:2801   .text._ZSt22__copy_move_backward_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 $t
    {standard input}:3040   .text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_:00000000 _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_
    {standard input}:2854   .text._ZN9__gnu_cxx14__alloc_traitsISaIP13ShiftRegisterEE8max_sizeERKS3_:00000000 $t
    {standard input}:3111   .text._ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv:00000000 _ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv
    {standard input}:2888   .text._ZNKSt12_Vector_baseIP13ShiftRegisterSaIS1_EE19_M_get_Tp_allocatorEv:00000000 $t
    {standard input}:2919   .text._ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterE8allocateEjPKv:00000000 $t
    {standard input}:2976   .text._ZSt18uninitialized_copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 $t
    {standard input}:3148   .text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_:00000000 _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_
    {standard input}:3031   .text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP13ShiftRegisterEEPT_PKS5_S8_S6_:00000000 $t
    {standard input}:3104   .text._ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv:00000000 $t
    {standard input}:3133   .text._ZNK9__gnu_cxx13new_allocatorIP13ShiftRegisterE8max_sizeEv:00000014 $d
    {standard input}:3139   .text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPP13ShiftRegisterS4_EET0_T_S6_S5_:00000000 $t
    {standard input}:3190   .text._ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 _ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_
    {standard input}:3181   .text._ZSt4copyIPP13ShiftRegisterS2_ET0_T_S4_S3_:00000000 $t
    {standard input}:3240   .text._ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 _ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
    {standard input}:3231   .text._ZSt14__copy_move_a2ILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 $t
    {standard input}:3291   .text._ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 _ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_
    {standard input}:3282   .text._ZSt13__copy_move_aILb0EPP13ShiftRegisterS2_ET1_T0_S4_S3_:00000000 $t
    {standard input}:3344   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_:00000000 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_
    {standard input}:3335   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13ShiftRegisterEEPT_PKS5_S8_S6_:00000000 $t
    {standard input}:3402   .rodata._ZTV18ShiftRegisterArray:00000000 $d
                           .group:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EEC5Ev
                           .group:00000000 _ZNSt6vectorIP13ShiftRegisterSaIS1_EED5Ev
                           .group:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implD5Ev
                           .group:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EEC5Ev
                           .group:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EED5Ev
                           .group:00000000 _ZNSt12_Vector_baseIP13ShiftRegisterSaIS1_EE12_Vector_implC5Ev
                           .group:00000000 _ZNSaIP13ShiftRegisterED5Ev
                           .group:00000000 _ZN9__gnu_cxx17__normal_iteratorIPP13ShiftRegisterSt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:00000000 _ZNSaIP13ShiftRegisterEC5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterED5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorIP13ShiftRegisterEC5Ev

UNDEFINED SYMBOLS
_ZN13ShiftRegisterC2EP13__AccessPoint
_ZN13ShiftRegisterD2Ev
_ZdlPv
_ZN13ShiftRegister6clkLowEv
_ZN13ShiftRegister7clkHighEv
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
_Znwj
memmove
_ZN13ShiftRegister4pushEb
_ZN13ShiftRegister5cpushEh
_ZN13ShiftRegister5cpushEb
